{
  "api/Stride.CommunityToolkit.Extensions.CameraComponentExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Extensions.CameraComponentExtensions.html",
    "title": "Class CameraComponentExtensions | Stride Community Toolkit",
    "keywords": "Class CameraComponentExtensions Namespace Stride.CommunityToolkit.Extensions Assembly Stride.CommunityToolkit.dll public static class CameraComponentExtensions Inheritance object CameraComponentExtensions Methods LogicDirectionToWorldDirection(CameraComponent, Vector2) public static Vector3 LogicDirectionToWorldDirection(this CameraComponent camera, Vector2 logicDirection) Parameters camera CameraComponent logicDirection Vector2 Returns Vector3 LogicDirectionToWorldDirection(CameraComponent, Vector2, Vector3) public static Vector3 LogicDirectionToWorldDirection(this CameraComponent camera, Vector2 logicDirection, Vector3 upVector) Parameters camera CameraComponent logicDirection Vector2 upVector Vector3 Returns Vector3 RayCast(CameraComponent, ScriptComponent, Vector2, CollisionFilterGroups, CollisionFilterGroupFlags) Performs a raycasting operation from the specified CameraComponent's position through the specified screen position in world coordinates, and returns information about the hit result. public static HitResult RayCast(this CameraComponent Camera, ScriptComponent component, Vector2 screenPos, CollisionFilterGroups collisionGroups = CollisionFilterGroups.DefaultFilter, CollisionFilterGroupFlags collisionFlags = CollisionFilterGroupFlags.DefaultFilter) Parameters Camera CameraComponent The CameraComponent from which the ray should be cast. component ScriptComponent The ScriptComponent which has the Simulation to run the Cast in. screenPos Vector2 The screen position (in world coordinates) where the ray should be cast through. collisionGroups CollisionFilterGroups Optional. The collision filter group to consider during the raycasting. Default is CollisionFilterGroups.DefaultFilter. collisionFlags CollisionFilterGroupFlags Optional. The collision filter group flags to consider during the raycasting. Default is CollisionFilterGroupFlags.DefaultFilter. Returns HitResult A HitResult containing information about the hit result, including the hit location and other collision data. RayCastMouse(CameraComponent, ScriptComponent, CollisionFilterGroups, CollisionFilterGroupFlags) Performs a raycasting operation from the specified CameraComponent's position through the mouse cursor position in screen coordinates, and returns information about the hit result. public static HitResult RayCastMouse(this CameraComponent Camera, ScriptComponent component, CollisionFilterGroups collisionGroup = CollisionFilterGroups.DefaultFilter, CollisionFilterGroupFlags collisionFilterGroupFlags = CollisionFilterGroupFlags.DefaultFilter) Parameters Camera CameraComponent The CameraComponent from which the ray should be cast. component ScriptComponent The ScriptComponent from which the Input.MousePosition should be taken. collisionGroup CollisionFilterGroups Optional. The collision filter group to consider during the raycasting. Default is CollisionFilterGroups.DefaultFilter. collisionFilterGroupFlags CollisionFilterGroupFlags Optional. The collision filter group flags to consider during the raycasting. Default is CollisionFilterGroupFlags.DefaultFilter. Returns HitResult A HitResult containing information about the hit result, including the hit location and other collision data. ScreenPointToRay(CameraComponent, Vector2) Returns near and far vector based on a ray going from camera through a screen point. The ray is in world space, starting on the near plane of the camera and going through position's (x,y) pixel coordinates on the screen. public static (Vector4 VectorNear, Vector4 VectorFar) ScreenPointToRay(this CameraComponent cameraComponent, Vector2 mousePosition) Parameters cameraComponent CameraComponent mousePosition Vector2 Returns (Vector4 VectorNear, Vector4 VectorFar) ScreenToWorldPoint(CameraComponent, Vector3) Converts the screen position to a point in world coordinates. public static Vector3 ScreenToWorldPoint(this CameraComponent cameraComponent, Vector3 position) Parameters cameraComponent CameraComponent position Vector3 The screen position in normalized X, Y coordinates. Top-left is (0,0), bottom-right is (1,1). Z is in world units from near camera plane. Returns Vector3 Position in world coordinates. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. Exceptions ArgumentNullException If the cameraComponent argument is null. ScreenToWorldPoint(CameraComponent, ref Vector3, out Vector3) Converts the screen position to a point in world coordinates. public static void ScreenToWorldPoint(this CameraComponent cameraComponent, ref Vector3 position, out Vector3 result) Parameters cameraComponent CameraComponent position Vector3 The screen position in normalized X, Y coordinates. Top-left is (0,0), bottom-right is (1,1). Z is in world units from near camera plane. result Vector3 Position in world coordinates. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. ScreenToWorldRaySegment(CameraComponent, Vector2) Converts the screen position to a RaySegment in world coordinates. public static RaySegment ScreenToWorldRaySegment(this CameraComponent cameraComponent, Vector2 position) Parameters cameraComponent CameraComponent position Vector2 Returns RaySegment RaySegment, starting at near plain and ending at the far plain. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. Exceptions ArgumentNullException If the cameraComponent argument is null. ScreenToWorldRaySegment(CameraComponent, ref Vector2, out RaySegment) Converts the screen position to a RaySegment in world coordinates. public static void ScreenToWorldRaySegment(this CameraComponent cameraComponent, ref Vector2 position, out RaySegment result) Parameters cameraComponent CameraComponent position Vector2 result RaySegment RaySegment, starting at near plain and ending at the far plain. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. WorldToClipSpace(CameraComponent, ref Vector3) Converts the world position to clip space coordinates relative to camera. public static Vector3 WorldToClipSpace(this CameraComponent cameraComponent, ref Vector3 position) Parameters cameraComponent CameraComponent position Vector3 Returns Vector3 Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. WorldToScreenPoint(CameraComponent, Vector3) Converts the world position to screen space coordinates relative to camera. public static Vector3 WorldToScreenPoint(this CameraComponent cameraComponent, Vector3 position) Parameters cameraComponent CameraComponent position Vector3 Returns Vector3 The screen position in normalized X, Y coordinates. Top-left is (0,0), bottom-right is (1,1). Z is in world units from near camera plane. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. Exceptions ArgumentNullException If the cameraComponent argument is null. WorldToScreenPoint(CameraComponent, ref Vector3, out Vector3) Converts the world position to screen space coordinates relative to camera. public static void WorldToScreenPoint(this CameraComponent cameraComponent, ref Vector3 position, out Vector3 result) Parameters cameraComponent CameraComponent position Vector3 result Vector3 The screen position in normalized X, Y coordinates. Top-left is (0,0), bottom-right is (1,1). Z is in world units from near camera plane. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. Exceptions ArgumentNullException If the cameraComponent argument is null."
  },
  "api/Stride.CommunityToolkit.Extensions.CameraDefaults.html": {
    "href": "api/Stride.CommunityToolkit.Extensions.CameraDefaults.html",
    "title": "Class CameraDefaults | Stride Community Toolkit",
    "keywords": "Class CameraDefaults Namespace Stride.CommunityToolkit.Extensions Assembly Stride.CommunityToolkit.dll public static class CameraDefaults Inheritance object CameraDefaults Fields InitialPosition public static readonly Vector3 InitialPosition Field Value Vector3 InitialRotation public static readonly Vector3 InitialRotation Field Value Vector3"
  },
  "api/Stride.CommunityToolkit.Extensions.GameExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Extensions.GameExtensions.html",
    "title": "Class GameExtensions | Stride Community Toolkit",
    "keywords": "Class GameExtensions Namespace Stride.CommunityToolkit.Extensions Assembly Stride.CommunityToolkit.dll public static class GameExtensions Inheritance object GameExtensions Methods AddCamera(Game, string?, Vector3?, Vector3?) Adds a camera entity to the game's root scene with customizable position and rotation. public static Entity AddCamera(this Game game, string? entityName = null, Vector3? initialPosition = null, Vector3? initialRotation = null) Parameters game Game The Game instance to which the camera entity will be added. entityName string Optional name for the camera entity. If null, the entity will not be named. initialPosition Vector3? Initial position for the camera entity. If null, the camera will be positioned at the default position (6, 6, 6). initialRotation Vector3? Initial rotation for the camera entity specified in degrees. If null, the camera will be rotated to face towards the origin with default angles (Yaw: 45, Pitch: -30, Roll: 0). Returns Entity The created Entity object representing the camera. Remarks The camera entity will be created with a perspective projection mode and will be added to the game's root scene. It will also be assigned to the first available camera slot in the GraphicsCompositor. AddDirectionalLight(Game, string?) Adds a directional light entity to the game's root scene with optional customization. public static Entity AddDirectionalLight(this Game game, string? entityName = null) Parameters game Game The Game instance to which the directional light will be added. entityName string Optional name for the new directional light entity. If null, the entity will not be named. Returns Entity The created Entity object representing the directional light. Remarks This method creates a directional light with the following default settings: Intensity: 20.0f Position: (0, 2.0f, 0) Rotation: X-axis rotated by -30 degrees and Y-axis rotated by -180 degrees. Shadow Enabled: True Shadow Size: Large Shadow Filter: PCF (Percentage Closer Filtering) with a filter size of 5x5 The entity will be added to the game's root scene. You can customize the light properties by accessing the returned Entity object. AddGraphicsCompositor(Game) Adds a default GraphicsCompositor with enabled post-effects to the specified Game instance and sets it as the game's SceneSystem GraphicsCompositor. public static GraphicsCompositor AddGraphicsCompositor(this Game game) Parameters game Game The Game instance to which the GraphicsCompositor will be added. Returns GraphicsCompositor The newly configured GraphicsCompositor instance with enabled post-effects. AddGround(Game, string?, Vector2?, bool) Adds a ground with default Size 10,10. public static Entity AddGround(this Game game, string? entityName = null, Vector2? size = null, bool includeCollider = true) Parameters game Game entityName string size Vector2? includeCollider bool Adds a collider Returns Entity AddMouseLookCamera(Game, Entity?) The camera entity can be moved using W, A, S, D, Q and E, arrow keys, a gamepad's left stick or dragging/scaling using multi-touch. Rotation is achieved using the Numpad, the mouse while holding the right mouse button, a gamepad's right stick, or dragging using single-touch. public static void AddMouseLookCamera(this Game game, Entity? cameraEntity) Parameters game Game cameraEntity Entity AddProfiler(Game, string?) Toggle profiling Left Shift + Left Ctrl + P, Toggle filtering mode F1 public static Entity AddProfiler(this Game game, string? entityName = null) Parameters game Game entityName string Returns Entity AddSkybox(Game, string?) public static Entity AddSkybox(this Game game, string? entityName = null) Parameters game Game entityName string Returns Entity CreatePrimitive(Game, PrimitiveModelType, string?, Material?, bool) Creates an entity with a primitive procedural model with a primitive mesh renderer and adds appropriate collider except for Torus, Teapot and Plane. public static Entity CreatePrimitive(this Game game, PrimitiveModelType type, string? entityName = null, Material? material = null, bool includeCollider = true) Parameters game Game type PrimitiveModelType entityName string material Material includeCollider bool Adds a default collider except for Torus, Teapot and Plane. Default true. Returns Entity DeltaTime(IGame) Gets the time elapsed since the last game update in seconds as a single-precision floating-point number. public static float DeltaTime(this IGame gameTime) Parameters gameTime IGame The IGame interface providing access to game timing information. Returns float The time elapsed since the last game update in seconds. DeltaTimeAccurate(IGame) Gets the time elapsed since the last game update in seconds as a double-precision floating-point number. public static double DeltaTimeAccurate(this IGame gameTime) Parameters gameTime IGame The IGame interface providing access to game timing information. Returns double The time elapsed since the last game update in seconds with double precision. FPS(Game) Shows the current FPS. public static float FPS(this Game game) Parameters game Game Returns float NewDefaultMaterial(Game, Color?) Basic default material public static Material NewDefaultMaterial(this Game game, Color? color = null) Parameters game Game color Color? Returns Material Run(Game, GameContext?, Action<Scene>?, Action<Scene, GameTime>?) Initializes the game, starts the game loop, and handles game events. public static void Run(this Game game, GameContext? context = null, Action<Scene>? start = null, Action<Scene, GameTime>? update = null) Parameters game Game The Game instance to initialize and run. context GameContext Optional GameContext to be used. Defaults to null. start Action<Scene> Optional action to execute at the start of the game. Takes the root scene as a parameter. update Action<Scene, GameTime> Optional action to execute during each game loop iteration. Takes the root scene and game time as parameters. Remarks This method performs the following actions: Schedules the root script for execution. Initiates the game loop by calling Run(GameContext). Invokes the provided start and update delegates. SetupBase(Game) Sets up essential components for the game including a GraphicsCompositor, a camera, and a directional light. public static void SetupBase(this Game game) Parameters game Game The Game instance that will receive the base setup. Remarks This method performs the following operations: Adds a default GraphicsCompositor to the game's SceneSystem and applies a clean UI stage. Adds a camera to the game. Adds a directional light to the game. SetupBase3DScene(Game) Sets up a default 3D scene for the game, similar to creating an empty project through the editor. public static void SetupBase3DScene(this Game game) Parameters game Game The Game instance for which the base 3D scene will be set up. Remarks This method performs the following setup operations in sequence: Adds a default GraphicsCompositor to the game's SceneSystem and applies a clean UI stage. Adds a camera to the game and sets it up with a MouseLookCamera component. Adds a directional light to the game scene. Adds a skybox to the game scene. Adds ground geometry to the game scene."
  },
  "api/Stride.CommunityToolkit.Extensions.GraphicsDeviceExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Extensions.GraphicsDeviceExtensions.html",
    "title": "Class GraphicsDeviceExtensions | Stride Community Toolkit",
    "keywords": "Class GraphicsDeviceExtensions Namespace Stride.CommunityToolkit.Extensions Assembly Stride.CommunityToolkit.dll public static class GraphicsDeviceExtensions Inheritance object GraphicsDeviceExtensions Methods GetWindowSize(GraphicsDevice) Retrieves the current window size of the GraphicsDevice as a Int2. public static Int2 GetWindowSize(this GraphicsDevice graphics) Parameters graphics GraphicsDevice The GraphicsDevice for which the window size should be retrieved. Returns Int2 An Int2 representing the current window size, where X is the width and Y is the height."
  },
  "api/Stride.CommunityToolkit.Extensions.html": {
    "href": "api/Stride.CommunityToolkit.Extensions.html",
    "title": "Namespace Stride.CommunityToolkit.Extensions | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Extensions Classes CameraComponentExtensions CameraDefaults GameExtensions GraphicsDeviceExtensions"
  },
  "api/Stride.CommunityToolkit.ProceduralModels.PrimitiveModelType.html": {
    "href": "api/Stride.CommunityToolkit.ProceduralModels.PrimitiveModelType.html",
    "title": "Enum PrimitiveModelType | Stride Community Toolkit",
    "keywords": "Enum PrimitiveModelType Namespace Stride.CommunityToolkit.ProceduralModels Assembly Stride.CommunityToolkit.dll public enum PrimitiveModelType Fields Capsule = 7 Cone = 6 Cube = 1 Cylinder = 2 Plane = 4 Sphere = 0 Teapot = 5 Torus = 3"
  },
  "api/Stride.CommunityToolkit.ProceduralModels.html": {
    "href": "api/Stride.CommunityToolkit.ProceduralModels.html",
    "title": "Namespace Stride.CommunityToolkit.ProceduralModels | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.ProceduralModels Enums PrimitiveModelType"
  },
  "api/Stride.CommunityToolkit.Rendering.Compositing.GraphicsCompositorExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Compositing.GraphicsCompositorExtensions.html",
    "title": "Class GraphicsCompositorExtensions | Stride Community Toolkit",
    "keywords": "Class GraphicsCompositorExtensions Namespace Stride.CommunityToolkit.Rendering.Compositing Assembly Stride.CommunityToolkit.dll public static class GraphicsCompositorExtensions Inheritance object GraphicsCompositorExtensions Methods AddCleanUIStage(GraphicsCompositor) Adds a UI render stage and white/clean text effect to the given GraphicsCompositor. This alters the GraphicsCompositor's PostProcessingEffects, RenderStage, and RenderFeature. public static GraphicsCompositor AddCleanUIStage(this GraphicsCompositor graphicsCompositor) Parameters graphicsCompositor GraphicsCompositor The GraphicsCompositor to modify. Returns GraphicsCompositor Returns the modified GraphicsCompositor instance, allowing for method chaining. Examples game.AddGraphicsCompositor().AddCleanUIStage(); AddSceneRenderer(GraphicsCompositor, SceneRendererBase) Adds a new scene renderer to the given GraphicsCompositor's game. If the game is already a collection of scene renderers, the new scene renderer is added to that collection. Otherwise, a new scene renderer collection is created to house both the existing game and the new scene renderer. public static GraphicsCompositor AddSceneRenderer(this GraphicsCompositor graphicsCompositor, SceneRendererBase sceneRenderer) Parameters graphicsCompositor GraphicsCompositor The GraphicsCompositor to which the scene renderer will be added. sceneRenderer SceneRendererBase The new SceneRendererBase instance that will be added to the GraphicsCompositor's game. Returns GraphicsCompositor Returns the modified GraphicsCompositor instance, allowing for method chaining. Remarks This method will either add the scene renderer to an existing SceneRendererCollection or create a new one to house both the existing game and the new scene renderer. In either case, the GraphicsCompositor's game will end up with the new scene renderer added."
  },
  "api/Stride.CommunityToolkit.Rendering.Compositing.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Compositing.html",
    "title": "Namespace Stride.CommunityToolkit.Rendering.Compositing | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Rendering.Compositing Classes GraphicsCompositorExtensions"
  },
  "api/Stride.CommunityToolkit.Scripts.BasicCameraController.html": {
    "href": "api/Stride.CommunityToolkit.Scripts.BasicCameraController.html",
    "title": "Class BasicCameraController | Stride Community Toolkit",
    "keywords": "Class BasicCameraController Namespace Stride.CommunityToolkit.Scripts Assembly Stride.CommunityToolkit.dll A script that allows to move and rotate an entity through keyboard, mouse and touch input to provide basic camera navigation. public class BasicCameraController : SyncScript, IIdentifiable, ICollectorHolder Inheritance object EntityComponent ScriptComponent StartupScript SyncScript BasicCameraController Implements IIdentifiable ICollectorHolder Inherited Members ScriptComponent.LiveScriptingMask ScriptComponent.ScriptGlobalProfilingKey ScriptComponent.PriorityUpdated() ScriptComponent.Cancel() ScriptComponent.ProfilingKey ScriptComponent.Audio ScriptComponent.SpriteAnimation ScriptComponent.Services ScriptComponent.Game ScriptComponent.Content ScriptComponent.GameProfiler ScriptComponent.GraphicsDevice ScriptComponent.Input ScriptComponent.Script ScriptComponent.SceneSystem ScriptComponent.EffectSystem ScriptComponent.DebugText ScriptComponent.Streaming ScriptComponent.Log ScriptComponent.Priority ScriptComponent.IsLiveReloading ScriptComponent.Collector EntityComponent.Entity EntityComponent.Id EntityComponent.EnsureEntity Extension Methods ScriptComponentExtensions.DeltaTime(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent, string) ScriptComponentExtensions.GetFirstCamera(ScriptComponent) Remarks The entity can be moved using W, A, S, D, Q and E, arrow keys, a gamepad's left stick or dragging/scaling using multi-touch. Rotation is achieved using the Numpad, the mouse while holding the right mouse button, a gamepad's right stick, or dragging using single-touch. Properties Gamepad public bool Gamepad { get; set; } Property Value bool KeyboardMovementSpeed public Vector3 KeyboardMovementSpeed { get; set; } Property Value Vector3 KeyboardRotationSpeed public Vector2 KeyboardRotationSpeed { get; set; } Property Value Vector2 MouseRotationSpeed public Vector2 MouseRotationSpeed { get; set; } Property Value Vector2 SpeedFactor public float SpeedFactor { get; set; } Property Value float TouchMovementSpeed public Vector3 TouchMovementSpeed { get; set; } Property Value Vector3 TouchRotationSpeed public Vector2 TouchRotationSpeed { get; set; } Property Value Vector2 Methods Start() Called before the script enters it's update loop. public override void Start() Update() Called every frame. public override void Update()"
  },
  "api/Stride.CommunityToolkit.Scripts.GameProfiler.html": {
    "href": "api/Stride.CommunityToolkit.Scripts.GameProfiler.html",
    "title": "Class GameProfiler | Stride Community Toolkit",
    "keywords": "Class GameProfiler Namespace Stride.CommunityToolkit.Scripts Assembly Stride.CommunityToolkit.dll public class GameProfiler : AsyncScript, IIdentifiable, ICollectorHolder Inheritance object EntityComponent ScriptComponent AsyncScript GameProfiler Implements IIdentifiable ICollectorHolder Inherited Members AsyncScript.PriorityUpdated() AsyncScript.CancellationToken ScriptComponent.LiveScriptingMask ScriptComponent.ScriptGlobalProfilingKey ScriptComponent.Cancel() ScriptComponent.ProfilingKey ScriptComponent.Audio ScriptComponent.SpriteAnimation ScriptComponent.Services ScriptComponent.Game ScriptComponent.Content ScriptComponent.GameProfiler ScriptComponent.GraphicsDevice ScriptComponent.Input ScriptComponent.Script ScriptComponent.SceneSystem ScriptComponent.EffectSystem ScriptComponent.DebugText ScriptComponent.Streaming ScriptComponent.Log ScriptComponent.Priority ScriptComponent.IsLiveReloading ScriptComponent.Collector EntityComponent.Entity EntityComponent.Id EntityComponent.EnsureEntity Extension Methods ScriptComponentExtensions.DeltaTime(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent, string) ScriptComponentExtensions.GetFirstCamera(ScriptComponent) Properties Enabled Enables or disable the game profiling public bool Enabled { get; set; } Property Value bool FilteringMode Gets or sets the type of the profiling to display: CPU or GPU [Display(0, \"Filter\", null)] public GameProfilingResults FilteringMode { get; set; } Property Value GameProfilingResults RefreshTime The time between two refreshes of the profiling information in milliseconds. [Display(2, \"Refresh interval (ms)\", null)] public double RefreshTime { get; set; } Property Value double ResultPage Gets or sets the current profiling result page to display. [Display(3, \"Display page\", null)] public uint ResultPage { get; set; } Property Value uint SortingMode Gets or set the sorting mode of the profiling entries [Display(1, \"Sort by\", null)] public GameProfilingSorting SortingMode { get; set; } Property Value GameProfilingSorting TextColor The color of the text displayed during profiling [Display(4, \"Text color\", null)] public Color TextColor { get; set; } Property Value Color Methods Execute() Called once, as a microthread public override Task Execute() Returns Task"
  },
  "api/Stride.CommunityToolkit.Scripts.RaySegment.html": {
    "href": "api/Stride.CommunityToolkit.Scripts.RaySegment.html",
    "title": "Struct RaySegment | Stride Community Toolkit",
    "keywords": "Struct RaySegment Namespace Stride.CommunityToolkit.Scripts Assembly Stride.CommunityToolkit.dll Represents a three dimensional line based on a 2 points in space. [DataContract] public struct RaySegment : IEquatable<RaySegment>, IFormattable Implements IEquatable<RaySegment> IFormattable Constructors RaySegment(Vector3, Vector3) Initializes a new instance of the RaySegment struct. public RaySegment(Vector3 start, Vector3 end) Parameters start Vector3 The position in three dimensional space where the ray starts. end Vector3 The position in three dimensional space where the ray ends. Properties End The position in three dimensional space where the ray ends. public Vector3 End { readonly get; init; } Property Value Vector3 Length Length of RaySegment public float Length { get; } Property Value float Start The position in three dimensional space where the ray starts. public Vector3 Start { readonly get; init; } Property Value Vector3 Methods Equals(RaySegment) Determines whether the specified Vector4 is equal to this instance. public bool Equals(RaySegment value) Parameters value RaySegment The Vector4 to compare with this instance. Returns bool true if the specified Vector4 is equal to this instance; otherwise, false. Equals(object?) Determines whether the specified object is equal to this instance. public override bool Equals(object? value) Parameters value object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. ToString(IFormatProvider) Returns a string that represents this instance. public string ToString(IFormatProvider formatProvider) Parameters formatProvider IFormatProvider The format provider. Returns string A string that represents this instance. ToString(string) Returns a string that represents this instance. public string ToString(string format) Parameters format string The format. Returns string A string that represents this instance. ToString(string?, IFormatProvider?) Returns a string that represents this instance. public string ToString(string? format, IFormatProvider? formatProvider) Parameters format string The format. formatProvider IFormatProvider The format provider. Returns string A string that represents this instance. Operators operator ==(RaySegment, RaySegment) Tests for equality between two objects. public static bool operator ==(RaySegment left, RaySegment right) Parameters left RaySegment The first value to compare. right RaySegment The second value to compare. Returns bool true if left has the same value as right; otherwise, false. explicit operator Ray(RaySegment) Performs an explicit conversion from RaySegment to Ray. public static explicit operator Ray(RaySegment raySegment) Parameters raySegment RaySegment The RaySegment to convert Returns Ray The result of the conversion. operator !=(RaySegment, RaySegment) Tests for inequality between two objects. public static bool operator !=(RaySegment left, RaySegment right) Parameters left RaySegment The first value to compare. right RaySegment The second value to compare. Returns bool true if left has a different value than right; otherwise, false."
  },
  "api/Stride.CommunityToolkit.Scripts.html": {
    "href": "api/Stride.CommunityToolkit.Scripts.html",
    "title": "Namespace Stride.CommunityToolkit.Scripts | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Scripts Classes BasicCameraController A script that allows to move and rotate an entity through keyboard, mouse and touch input to provide basic camera navigation. GameProfiler Structs RaySegment Represents a three dimensional line based on a 2 points in space."
  },
  "api/Stride.CommunityToolkit.Skyboxes.SkyboxGenerator.html": {
    "href": "api/Stride.CommunityToolkit.Skyboxes.SkyboxGenerator.html",
    "title": "Class SkyboxGenerator | Stride Community Toolkit",
    "keywords": "Class SkyboxGenerator Namespace Stride.CommunityToolkit.Skyboxes Assembly Stride.CommunityToolkit.dll public static class SkyboxGenerator Inheritance object SkyboxGenerator Methods Generate(Skybox, SkyboxGeneratorContext, Texture) public static Skybox Generate(Skybox skybox, SkyboxGeneratorContext context, Texture skyboxTexture) Parameters skybox Skybox context SkyboxGeneratorContext skyboxTexture Texture Returns Skybox"
  },
  "api/Stride.CommunityToolkit.Skyboxes.SkyboxGeneratorContext.html": {
    "href": "api/Stride.CommunityToolkit.Skyboxes.SkyboxGeneratorContext.html",
    "title": "Class SkyboxGeneratorContext | Stride Community Toolkit",
    "keywords": "Class SkyboxGeneratorContext Namespace Stride.CommunityToolkit.Skyboxes Assembly Stride.CommunityToolkit.dll public class SkyboxGeneratorContext : ShaderGeneratorContext, IDisposable, IComponent, IReferencable, ICollectorHolder Inheritance object DisposeBase ComponentBase ShaderGeneratorContext SkyboxGeneratorContext Implements IDisposable IComponent IReferencable ICollectorHolder Inherited Members ShaderGeneratorContext.GetParameterKey(ParameterKey) ShaderGeneratorContext.GenerateTextureFromColor(Color) ShaderGeneratorContext.GetTextureKey(Texture, ObjectParameterKey<Texture>, Color?) ShaderGeneratorContext.GetSamplerKey(SamplerStateDescription, GraphicsDevice) ShaderGeneratorContext.GetTextureKey(ComputeTextureBase, MaterialComputeColorKeys) ShaderGeneratorContext.GetSamplerKey(ComputeColorParameterSampler) ShaderGeneratorContext.ResetParameterKeys() ShaderGeneratorContext.PushOverrides(MaterialOverrides) ShaderGeneratorContext.PopOverrides() ShaderGeneratorContext.FindAsset ShaderGeneratorContext.GetAssetFriendlyName ShaderGeneratorContext.Log ShaderGeneratorContext.Content ShaderGeneratorContext.Parameters ShaderGeneratorContext.CurrentOverrides ShaderGeneratorContext.ColorSpace ShaderGeneratorContext.IsNotPixelStage ShaderGeneratorContext.OptimizeMaterials ComponentBase.Tags ComponentBase.Destroy() ComponentBase.OnNameChanged() ComponentBase.ToString() ComponentBase.Name DisposeBase.Dispose() DisposeBase.OnAddReference() DisposeBase.OnReleaseReference() DisposeBase.IsDisposed Constructors SkyboxGeneratorContext(Game) public SkyboxGeneratorContext(Game game) Parameters game Game Properties GraphicsDevice public GraphicsDevice GraphicsDevice { get; } Property Value GraphicsDevice RenderContext public RenderContext RenderContext { get; } Property Value RenderContext RenderDrawContext public RenderDrawContext RenderDrawContext { get; } Property Value RenderDrawContext Services public IServiceRegistry Services { get; } Property Value IServiceRegistry"
  },
  "api/Stride.CommunityToolkit.Skyboxes.html": {
    "href": "api/Stride.CommunityToolkit.Skyboxes.html",
    "title": "Namespace Stride.CommunityToolkit.Skyboxes | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Skyboxes Classes SkyboxGenerator SkyboxGeneratorContext"
  },
  "api/Stride.Engine.AnimationComponentExtensions.html": {
    "href": "api/Stride.Engine.AnimationComponentExtensions.html",
    "title": "Class AnimationComponentExtensions | Stride Community Toolkit",
    "keywords": "Class AnimationComponentExtensions Namespace Stride.Engine Assembly Stride.CommunityToolkit.dll public static class AnimationComponentExtensions Inheritance object AnimationComponentExtensions Methods PlayAnimation(AnimationComponent, string) public static void PlayAnimation(this AnimationComponent animationComponent, string name) Parameters animationComponent AnimationComponent name string"
  },
  "api/Stride.Engine.EntityComponentExtensions.html": {
    "href": "api/Stride.Engine.EntityComponentExtensions.html",
    "title": "Class EntityComponentExtensions | Stride Community Toolkit",
    "keywords": "Class EntityComponentExtensions Namespace Stride.Engine Assembly Stride.CommunityToolkit.dll public static class EntityComponentExtensions Inheritance object EntityComponentExtensions Methods DestroyEntity(Entity) Destroys the entity that calls this method. public static bool DestroyEntity(this Entity entity) Parameters entity Entity Returns bool GetComponent<T>(Entity) Definitely not a rip off of Unity's GetComponent. public static T GetComponent<T>(this Entity entity) Parameters entity Entity Returns T Type Parameters T GetComponents<T>(Entity) Gets all components of type T public static IEnumerable<T> GetComponents<T>(this Entity entity) Parameters entity Entity Returns IEnumerable<T> Type Parameters T WorldPosition(Entity) An easier way to get world position rather than getting TranslationVector from WorldMatrix public static Vector3 WorldPosition(this Entity entity) Parameters entity Entity The Entity to get the World Position Returns Vector3 The Vector3 as the World Position of the Entity"
  },
  "api/Stride.Engine.ModelComponentExtensions.html": {
    "href": "api/Stride.Engine.ModelComponentExtensions.html",
    "title": "Class ModelComponentExtensions | Stride Community Toolkit",
    "keywords": "Class ModelComponentExtensions Namespace Stride.Engine Assembly Stride.CommunityToolkit.dll public static class ModelComponentExtensions Inheritance object ModelComponentExtensions Methods GetMeshHWL(ModelComponent) Gets the ModelComponents BoundingBox and calculates the Height, Width and Length public static Vector3 GetMeshHWL(this ModelComponent modelComponent) Parameters modelComponent ModelComponent Returns Vector3 GetMeshHeight(ModelComponent) Gets the ModelComponents BoundingBox and calculates the Y height public static float GetMeshHeight(this ModelComponent modelComponent) Parameters modelComponent ModelComponent Returns float"
  },
  "api/Stride.Engine.ScriptComponentExtensions.html": {
    "href": "api/Stride.Engine.ScriptComponentExtensions.html",
    "title": "Class ScriptComponentExtensions | Stride Community Toolkit",
    "keywords": "Class ScriptComponentExtensions Namespace Stride.Engine Assembly Stride.CommunityToolkit.dll public static class ScriptComponentExtensions Inheritance object ScriptComponentExtensions Methods DeltaTime(ScriptComponent) Returns delta time in a shorter format. public static float DeltaTime(this ScriptComponent scriptComponent) Parameters scriptComponent ScriptComponent Returns float GetCamera(ScriptComponent) Gets the camera from the GraphicsCompositor with the name main public static CameraComponent GetCamera(this ScriptComponent scriptComponent) Parameters scriptComponent ScriptComponent Returns CameraComponent Remarks Make sure the Graphics compositor has been initialized with cameras or else this will fail. GetCamera(ScriptComponent, string) Gets the camera from the GraphicsCompositor with the given name. public static CameraComponent GetCamera(this ScriptComponent scriptComponent, string cameraName) Parameters scriptComponent ScriptComponent cameraName string Returns CameraComponent Remarks Make sure the Graphics compositor has been initialized with cameras or else this will fail. GetFirstCamera(ScriptComponent) Gets the first camera from the GraphicsCompositor public static CameraComponent GetFirstCamera(this ScriptComponent scriptComponent) Parameters scriptComponent ScriptComponent Returns CameraComponent Remarks Make sure the Graphics compositor has been initialized with cameras or else this will fail."
  },
  "api/Stride.Engine.html": {
    "href": "api/Stride.Engine.html",
    "title": "Namespace Stride.Engine | Stride Community Toolkit",
    "keywords": "Namespace Stride.Engine Classes AnimationComponentExtensions EntityComponentExtensions ModelComponentExtensions ScriptComponentExtensions"
  },
  "api/Stride.Physics.SimulationExtensions.html": {
    "href": "api/Stride.Physics.SimulationExtensions.html",
    "title": "Class SimulationExtensions | Stride Community Toolkit",
    "keywords": "Class SimulationExtensions Namespace Stride.Physics Assembly Stride.CommunityToolkit.dll public static class SimulationExtensions Inheritance object SimulationExtensions Methods RayCast(Simulation, Entity, Vector3, float, CollisionFilterGroupFlags) A Raycast method based on the example in the fps demo public static HitResult RayCast(this Simulation simulation, Entity entityPosition, Vector3 direction, float length = 1, CollisionFilterGroupFlags collisionFlags = CollisionFilterGroupFlags.AllFilter) Parameters simulation Simulation entityPosition Entity direction Vector3 length float collisionFlags CollisionFilterGroupFlags Returns HitResult RayCast(Simulation, Entity, float, CollisionFilterGroupFlags) A Raycast method based on the example in the fps demo Make sure you are using the actual rotating Entity otherwise you will waste hours like I did debuging a non issue public static HitResult RayCast(this Simulation simulation, Entity entityPosition, float length = 1, CollisionFilterGroupFlags collisionFlags = CollisionFilterGroupFlags.AllFilter) Parameters simulation Simulation entityPosition Entity length float collisionFlags CollisionFilterGroupFlags Returns HitResult"
  },
  "api/Stride.Physics.html": {
    "href": "api/Stride.Physics.html",
    "title": "Namespace Stride.Physics | Stride Community Toolkit",
    "keywords": "Namespace Stride.Physics Classes SimulationExtensions"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Stride Community Toolkit API | Stride API",
    "keywords": "Stride Community Toolkit API Welcome to the Stride Community Toolkit API documentation. These pages contain detailed information about the Stride scripting API, grouped by namespace. The API documentation covers methods, properties, and other relevant information to help you effectively use the Stride engine in your projects."
  },
  "index.html": {
    "href": "index.html",
    "title": "Stride Community Toolkit Documentation | Stride Community Toolkit",
    "keywords": "Stride Community Toolkit Documentation The Stride Community Toolkit is a comprehensive set of helpers and extensions designed to enhance your experience with the Stride Game Engine (GitHub). It simplifies and exemplifies routine development tasks, enabling you to build applications for Stride using .NET with ease. Available as a NuGet package, the Stride Community Toolkit can be easily integrated into new or existing Stride Game C# projects. For more information on how to get started, please refer to the Getting Started page. This toolkit serves as our preferred solution for rapid prototyping and accelerated game development. Unlike the more stable Stride Game Engine, the Stride Community Toolkit aims for a faster development momentum. As such, breaking changes are not only likely but should be expected. This approach allows us to quickly iterate and integrate new features and improvements. We believe this pace serves the needs of developers who are looking for cutting-edge tools and are comfortable with a more dynamic environment. Feel free to browse the documentation using the table of contents on the left side of this page. 🤝 Open Source Stride Community Toolkit Source Code This toolkit is an open-source project hosted on GitHub and is supported by the community. Most projects within the Stride Community Toolkit are licensed under the MIT license. For specifics on licensing and notes on third-party usage, please check the individual repositories or NuGet packages."
  },
  "manual/code-only/create-project.html": {
    "href": "manual/code-only/create-project.html",
    "title": "Create Project | Stride Manual",
    "keywords": "Create Project Visual Studio Code Instructions Create a Console App: Follow the Microsoft tutorial to create a new console application. dotnet new console --framework net6.0 Add NuGet Package: Execute the following command to add the necessary NuGet package. dotnet add package Stride.CommunityToolkit --prerelease Update Program.cs: Paste the example code (provided below) into your Program.cs file. Run the Project: Execute the following command. dotnet run Enjoy Stride: If everything is set up correctly, you should now be able to run and enjoy your Stride project. Visual Studio 2022 and Rider Instructions Create a C# Console Application: Open Visual Studio 2022 or Rider and create a new C# Console Application targeting .NET 6. Add NuGet Package: Search for and add the Stride.CommunityToolkit NuGet package, ensuring you opt for the prerelease version. Update Program.cs: Paste the example code (provided below) into your Program.cs file. Run the Project: Build and run your project using the IDE's run functionality. Enjoy Stride: If everything is set up correctly, you should now be able to run and enjoy your Stride project. Example Code The provided C# code example is designed to showcase the basic usage of the Stride Game Engine. using Stride.Core.Mathematics; using Stride.Engine; using Stride.GameDefaults.ProceduralModels; using Stride.GameDefaults.Extensions; using var game = new Game(); game.Run(start: Start); void Start(Scene rootScene) { game.SetupBase3DScene(); var entity = game.CreatePrimitive(PrimitiveModelType.Capsule); entity.Transform.Position = new Vector3(0, 8, 0); entity.Scene = rootScene; } using var game = new Game(); creates a new instance of the Game class. The game.Run(start: Start); line starts the game, and it specifies that the Start method should be called when the game begins. void Start(Scene rootScene) is the method that is called when the game starts. It takes in a Scene object, which represents the game scene that is currently being played. Inside the Start method, game.SetupBase3DScene(); sets up a basic 3D scene. var entity = game.CreatePrimitive(PrimitiveModelType.Capsule); creates a new primitive entity of type Capsule, and assigns it to the entity variable. entity.Transform.Position = new Vector3(0, 8, 0); sets the position of the entity in the 3D space. The position is set to (0, 8, 0), which means the capsule is placed 8 units above the ground. entity.Scene = rootScene; adds the entity to the root scene of the game. The CreatePrimitive() method creates a Capsule with rigid body physics. Because the capsule is placed 8 units above the ground, it will fall due to gravity. Note that it's important to remove the capsule from memory once it's no longer visible in the scene, to free up resources and ensure the CPU isn't unnecessarily calculating physics for it"
  },
  "manual/code-only/examples/advance-examples.html": {
    "href": "manual/code-only/examples/advance-examples.html",
    "title": "Code Only Advance Examples | Stride Manual",
    "keywords": "Code Only Advance Examples You can either copy and paste the code snippets from the advance examples into your own project or run them directly using our console app with an interactive menu. The console application providing this interactive menu is available here Stride.CommunityToolkit.Examples project. Stride Community Toolkit Examples [1] Basic Example - Capsule with rigid body [2] Basic Example - Give me a cube [3] Basic Example - Stride UI - Capsule with rigid body and Window [4] Basic Example - Myra UI - Draggable Window, GetService() [Q] Quit"
  },
  "manual/code-only/examples/basic-examples.html": {
    "href": "manual/code-only/examples/basic-examples.html",
    "title": "Code Only Basic Examples | Stride Manual",
    "keywords": "Code Only Basic Examples You can either copy and paste the code snippets from the examples into your own project or run them directly using our console app with an interactive menu. The console application providing this interactive menu is available here Stride.CommunityToolkit.Examples project. Stride Community Toolkit Examples [1] Basic Example - Capsule with rigid body [2] Basic Example - Give me a cube [3] Basic Example - Stride UI - Capsule with rigid body and Window [4] Basic Example - Myra UI - Draggable Window, GetService() [Q] Quit"
  },
  "manual/code-only/examples/capsule-with-rigid-body.html": {
    "href": "manual/code-only/examples/capsule-with-rigid-body.html",
    "title": "Capsule with rigid body | Stride Manual",
    "keywords": "Capsule with rigid body This code example demonstrates how to initialize a game, set up a basic 3D scene, create a 3D capsule entity, set its position, and add it to the scene using the Stride Game Engine. The capsule entity comes automatically equipped with a rigid body and a collider, thanks to the CreatePrimitive() method. It's a simple example that provides a starting point for building a game using Stride ToDo: Add a screenshot View on GitHub. using Stride.CommunityToolkit.Extensions; using Stride.CommunityToolkit.ProceduralModels; using Stride.Engine; using var game = new Game(); game.Run(start: (Scene rootScene) => { game.SetupBase3DScene(); var entity = game.CreatePrimitive(PrimitiveModelType.Capsule); entity.Transform.Position = new Vector3(0, 8, 0); entity.Scene = rootScene; }); using var game = new Game(); This line of code creates a new instance of the Game class. The Game class is the central part of the Stride engine, managing the overall game loop, the scenes, and the updates to the entities. The using keyword ensures that the Dispose() method is called on the game object when it goes out of scope, ensuring that any resources it uses are properly cleaned up game.Run(start: (Scene rootScene) => This line initiates the game loop. The Run method is responsible for starting the game, and it takes a delegate as a parameter. This delegate is a function that is called once when the game starts. The rootScene parameter represents the main scene of your game. game.SetupBase3DScene(); This line sets up a basic 3D scene. It's a helper method provided to quickly set up a scene with a default camera, lighting, and skybox. var entity = game.CreatePrimitive(PrimitiveModelType.Capsule); Here, a new entity is created in the form of a 3D capsule primitive. The CreatePrimitive method is another helper method provided to create basic 3D shapes. entity.Transform.Position = new Vector3(0, 8, 0); This line sets the position of the created entity in the 3D space. The Position property of the Transform component determines the location of the entity. entity.Scene = rootScene; Finally, the entity is added to the rootScene. The Scene property of an entity determines which scene it belongs to."
  },
  "manual/code-only/examples/give-me-cube-body.html": {
    "href": "manual/code-only/examples/give-me-cube-body.html",
    "title": "Give me a cube | Stride Manual",
    "keywords": "Give me a cube This example demonstrates the essential steps to create a 3D cube in Stride. Just like the previous example, the cube entity comes automatically equipped with a rigid body and a collider, thanks to the CreatePrimitive() method. The cube is positioned at (1f, 0.5f, 3f) in the 3D world space. This example is perfect for those who are new to 3D game development with Stride. ToDo: Add a screenshot View on GitHub. using Stride.CommunityToolkit.Extensions; using Stride.CommunityToolkit.ProceduralModels; using Stride.Engine; using var game = new Game(); game.Run(start: Start); void Start(Scene rootScene) { game.SetupBase3DScene(); var entity = game.CreatePrimitive(PrimitiveModelType.Cube); entity.Transform.Position = new Vector3(1f, 0.5f, 3f); entity.Scene = rootScene; }"
  },
  "manual/code-only/examples/myra-ui-draggable-window-and-services.html": {
    "href": "manual/code-only/examples/myra-ui-draggable-window-and-services.html",
    "title": "Myra UI - Draggable Window, GetService() | Stride Manual",
    "keywords": "Myra UI - Draggable Window, GetService() This example showcases how to integrate Myra, an external UI library, into your game developed with Stride. Myra provides a rich set of widgets and functionalities to enhance the graphical user interface of your game. Key features in this example: Draggable Window: The example demonstrates how to implement a draggable window within the game using Myra's UI components. This draggable window serves as a movable and interactive element that can host other widgets, thus offering a dynamic interface experience for the player. Health Bar: This example features two distinct health bars. The first one is statically defined within the MainView class, while the second is dynamically added during runtime. Both bars can be customized to represent a variety of in-game attributes, such as player health, experience, or other performance metrics. Dynamic Initialization: The UI components, including the health bar, are initialized dynamically during the game's runtime. This allows for greater flexibility and responsiveness in the game's UI. Service Retrieval: The example illustrates the use of GetService() to retrieve services dynamically, thus fostering loose coupling between various components of the game. This practice promotes code reusability and easier maintenance. By following this example, you will gain insights into how to extend your game's capabilities by leveraging external libraries for UI and best practices for service retrieval and dynamic UI component initialization. ToDo: Add a screenshot View on GitHub. using Example04_MyraUI; using Stride.CommunityToolkit.Extensions; using Stride.CommunityToolkit.Rendering.Compositing; using Stride.Engine; using Stride.Games; using var game = new Game(); // State flag to track health bar visibility bool isHealthBarVisible = false; game.Run(start: Start, update: Update); void Start(Scene rootScene) { SetupBase3DScene(); } void Update(Scene rootScene, GameTime time) { InitializeHealthBar(); } void SetupBase3DScene() { game.AddGraphicsCompositor() .AddCleanUIStage() //optional .AddSceneRenderer(new MyraSceneRenderer()); game.AddMouseLookCamera(game.AddCamera()); game.AddDirectionalLight(); game.AddSkybox(); game.AddGround(); } /// <summary> /// Initializes the health bar if it is not already visible. /// </summary> void InitializeHealthBar() { if (isHealthBarVisible) return; var mainView = game.Services.GetService<MainView>(); if (mainView == null) return; // Create and add a new health bar to the main view mainView.Widgets.Add(UIUtils.CreateHealthBar(-50, \"#FFD961FF\")); isHealthBarVisible = true; } MyraSceneRenderer.cs This class provides functionality for rendering Myra-based user interfaces in a Stride game. using Myra; using Myra.Graphics2D.UI; using Stride.Engine; using Stride.Games; using Stride.Graphics; using Stride.Rendering; using Stride.Rendering.Compositing; namespace Example04_MyraUI; /// <summary> /// Provides functionality for rendering Myra-based user interfaces in a Stride game. /// </summary> /// <remarks> /// This renderer uses the Myra UI library to render the user interface and integrates it into the Stride rendering pipeline. /// </remarks> public class MyraSceneRenderer : SceneRendererBase { /// <summary> /// Gets or sets the root of all UI elements to be rendered. /// </summary> /// <remarks> /// The desktop serves as the root container for all UI elements rendered by Myra. /// </remarks> private Desktop? _desktop; /// <summary> /// Gets or sets the main view of the application UI. /// </summary> /// <remarks> /// The main view contains the primary UI elements that the user will interact with. /// </remarks> private MainView? _mainView; /// <summary> /// Initializes the core rendering properties. /// </summary> /// <remarks> /// This method sets up the Myra environment, configures the main view, and associates it with the desktop. /// </remarks> protected override void InitializeCore() { base.InitializeCore(); MyraEnvironment.Game = (Game)Services.GetService<IGame>(); InitializeMainView(); InitializeDesktop(); } /// <summary> /// Initializes the main view and adds it to the Stride services. /// </summary> private void InitializeMainView() { _mainView = new MainView(); Services.AddService(_mainView); } /// <summary> /// Initializes the desktop and sets the root view. /// </summary> private void InitializeDesktop() { _desktop = new Desktop { Root = _mainView }; } protected override void DrawCore(RenderContext context, RenderDrawContext drawContext) { // Clear depth buffer drawContext.CommandList.Clear(GraphicsDevice.Presenter.DepthStencilBuffer, DepthStencilClearOptions.DepthBuffer); // Render UI _desktop?.Render(); } } MainView.cs This class creates the main UI window MainView and the health bar using HorizontalProgressBar. using Myra.Graphics2D.UI; namespace Example04_MyraUI; /// <summary> /// Represents the main user interface view for the application. /// </summary> /// <remarks> /// The MainView class is responsible for creating and managing key UI elements such as a health bar and a test window. /// </remarks> public class MainView : Panel { /// <summary> /// Gets the health bar UI element. /// </summary> /// <remarks> /// The health bar shows the current health status. /// </remarks> public HorizontalProgressBar HealthBar { get; private set; } = null!; /// <summary> /// Gets the test window UI element. /// </summary> /// <remarks> /// The example window is used for demo purposes and contains a sample label. /// </remarks> public Window ExampleWindow { get; private set; } = null!; /// <summary> /// Initializes a new instance of the <see cref=\"MainView\"/> class. /// </summary> public MainView() { InitializeHealthBar(); InitializeTestWindow(); } /// <summary> /// Initializes the health bar UI element. /// </summary> private void InitializeHealthBar() => Widgets.Add(UIUtils.CreateHealthBar(-20, \"#4BD961FF\")); /// <summary> /// Initializes the test window UI element. /// </summary> private void InitializeTestWindow() { var label = new Label { VerticalSpacing = 10, Text = \"This is a Test! Hello from Myra! This is a window and below two progress bars.\" }; ExampleWindow = new Window { Title = \"Hello From Myra\", Left = 590, Top = 200, Content = label }; Widgets.Add(ExampleWindow); } } UIUtils.cs This class contains helper methods to create UI elements, which are used in multiple places in the example. using Myra.Graphics2D.Brushes; using Myra.Graphics2D.UI; namespace Example04_MyraUI; /// <summary> /// Utility class to create custom UI widgets. /// </summary> public static class UIUtils { /// <summary> /// Creates a new <see cref=\"HorizontalProgressBar\"/> with the given top position and filler color. /// </summary> /// <param name=\"top\">The top position of the progress bar.</param> /// <param name=\"filler\">The filler color of the progress bar.</param> /// <returns>A new <see cref=\"HorizontalProgressBar\"/> instance.</returns> public static HorizontalProgressBar CreateHealthBar(int top, string filler) { return new HorizontalProgressBar { HorizontalAlignment = HorizontalAlignment.Left, VerticalAlignment = VerticalAlignment.Bottom, Value = 100, Filler = new SolidBrush(filler), Left = 20, Top = top, Width = 300, Height = 20, Background = new SolidBrush(\"#202020FF\") }; } } Other Examples Using Myra in Stride Engine Tutorial"
  },
  "manual/code-only/examples/stride-ui-capsule-with-rigid-body.html": {
    "href": "manual/code-only/examples/stride-ui-capsule-with-rigid-body.html",
    "title": "Capsule with rigid body and window | Stride Manual",
    "keywords": "Capsule with rigid body and window In this example, we demonstrate how to set up a 3D scene that includes a capsule with a rigid body as well as a simple window displaying a text message. This example is organized into multiple methods for better readability and maintainability. It is structured as follows: Start(Scene rootScene) This is the entry point for setting up the scene. It calls other methods to set up the 3D scene, add the capsule, load the font, and add the window. AddCapsule(Scene rootScene) This method creates a 3D capsule and adds it to the scene at a specific position. LoadFont() This method loads the font that will be used for the UI window. AddWindow(Scene rootScene) This method calls CreateUIEntity() to create an entity with a UI component, and then adds this entity to the root scene. CreateUIEntity() This method creates an entity that has a UI component. The UI component includes a canvas as its root element. CreateCanvas() This method creates a canvas element that will be the root of the UI component. CreateTextBlock(SpriteFont? _font) This method creates a TextBlock element that displays the message \"Hello, World\". It uses the loaded font and sets other properties like color and size. This modular approach makes the code easier to understand and maintain. Each method has a clear responsibility. ToDo: Add a screenshot View on GitHub. using Stride.CommunityToolkit.Extensions; using Stride.CommunityToolkit.ProceduralModels; using Stride.Engine; using Stride.Graphics; using Stride.Rendering; using Stride.UI; using Stride.UI.Controls; using Stride.UI.Panels; SpriteFont? _font; using var game = new Game(); game.Run(start: Start); void Start(Scene rootScene) { game.SetupBase3DScene(); AddCapsule(rootScene); LoadFont(); AddWindow(rootScene); } void AddCapsule(Scene rootScene) { var entity = game.CreatePrimitive(PrimitiveModelType.Capsule); entity.Transform.Position = new Vector3(0, 8, 0); entity.Scene = rootScene; } void LoadFont() { _font = game.Content.Load<SpriteFont>(\"StrideDefaultFont\"); } void AddWindow(Scene rootScene) { var uiEntity = CreateUIEntity(); uiEntity.Scene = rootScene; } Entity CreateUIEntity() { return new Entity { new UIComponent { Page = new UIPage { RootElement = CreateCanvas() }, RenderGroup = RenderGroup.Group31 } }; } Canvas CreateCanvas() { var canvas = new Canvas { Width = 300, Height = 100, BackgroundColor = new Color(248, 177, 149, 100) }; canvas.Children.Add(CreateTextBlock(_font)); return canvas; } TextBlock CreateTextBlock(SpriteFont? _font) { if (_font is null) { Console.WriteLine(\"Font is null\"); } return new TextBlock { Text = \"Hello, World\", TextColor = Color.White, TextSize = 20, Margin = new Thickness(3, 3, 3, 0), Font = _font }; }"
  },
  "manual/code-only/extensions.html": {
    "href": "manual/code-only/extensions.html",
    "title": "Extensions | Stride Manual",
    "keywords": "Extensions Each extension has been crafted to address common game development scenarios. They encapsulate and abstract away some of the complexities involved in setting up these scenarios, thus allowing you to focus more on the game logic and less on the setup and configuration. To modify an extension, you can examine its code to understand how it works. Once you grasp the underlying logic, you can modify it or even create a new extension that better suits your needs. Remember, these extensions are just tools to help you get started; don't be afraid to modify them or build your own to align with your unique requirements. In conclusion, whether you are a beginner just starting out with Stride or an experienced developer looking for a quicker way to get your game up and running, these extensions are a valuable resource. They are designed to be a starting point that can be used as is, or can be customised and built upon to create the perfect solution for your game development needs. Remember, the key to mastering Stride, and game development in general, is practice and exploration. So, go ahead, play around with these extensions, and start creating! GameExtensions.cs Some extensions return Entity so it can be further modified. Extensions Status Note Run() Unitialising the game, use start and update params SetupBase() Adds Graphics Compositor, Camera and Directional Light SetupBase3DScene() Same as SetupBase() plus SkyBox, Ground, MouseLookCamera SetupBase2DScene() AddGraphicsCompositor() Adds Graphic Compositor with Clean UI AddCamera() AddDirectionalLight() AddSkybox() AddMouseLookCamera() The camera entity can be moved using W, A, S, D, Q and E, arrow keys NewDefaultMaterial() Adds basic material CreatePrimitive() Simplifies primitives creation AddProfiler() Attaches profile AddGizmo() Debug. To see X,Y,Z arrows AddEntityNames() Debug. To see entity properties in the game AddPhysicsDebugger() Debug. To see colliders. Tracked here Issue #9 EntityComponentExtensions.cs | GetComponent() || Allows you to find a class attached to an Entity that are not limited to type ScriptComponent | | GetComponents() || Allows you to find all classes attached to an Entity that are not limited to type ScriptComponent | | DestroyEntity() || easily destroys the calling Entity, you may need to use Entity.Transform.Parent.Entity.DestroyEntity(); | | WorldPosition() || A faster way of getting world position | ScriptComponentExtensions.cs | DeltaTime() || Easier way of getting DeltaTime as a float in seconds | | GetCamera() || Gets the first camera with the name \"Main\", currently doesnt work at the start of a game due to being null in the GraphicsCompositor | | GetCamera(string name) || Gets the first camera with the name provided, currently doesnt work at the start of a game due to being null in the GraphicsCompositor | | GetFirstCamera() || Gets the first camera in the GraphicsCompositor. currently doesnt work at the start of a game due to being null in the GraphicsCompositor | AnimationComponentExtensions.cs | PlayAnimation() || Plays an animation if not already playing | ModelComponentExtensions.cs | GetMeshHeight() || Gets the Mesh height as a float | | GetMeshHWL() || Gets the Mesh height, width and length as a Vector3 |"
  },
  "manual/code-only/index.html": {
    "href": "manual/code-only/index.html",
    "title": "Code Only | Stride Manual",
    "keywords": "Code Only Why Opt for Code-Only Over the Stride Editor? There are numerous reasons to consider using the Code-Only approach, especially if: You prefer not to install additional software on your computer (Stride installation not required). Learn C# or game development in a straightforward, code-first manner. You're aiming for a quick start in game development or C# programming. You're eager to dive into C# or game development, finding joy and educational value in hands-on coding experiences, whether you're new or experienced. You wish to see tangible, visual 2D/3D outputs instead of just console-based results. You want to gradually ease into game programming, mastering the basics before diving into the complexities of a game editor. You find typical coding environments and tools too overwhelming to navigate. You'd like to prototype quickly and easily game elements. You want an efficient way to grasp fundamental game development concepts and practices. You're interested in evaluating performance and features of Stride Game Engine without the overhead of a full-fledged editor. Have more reasons to add? Feel free to suggest them through our GitHub Issues. Extensions and Helpers Our extensions and helpers provide a simplified pathway for game creation, specifically designed for code-only projects within the Stride Game Engine. While they are not essential for running a game, they serve as time-saving tools to aid users, particularly those new to Stride, in quickly getting started. These extensions rely heavily on default settings to ease your initiation into the engine. However, they are not rigid; if the default settings don't fully meet your needs, you have the option to delve into the extension's implementation and create a custom version tailored to your preferences. Please note, although these extensions have been created with an opinionated approach to help beginners get up and running quickly, experienced users can also find value in them. They can serve as a foundation upon which you can build, modify, and extend to create more complex and customised solutions. Functionality Some functionality you would expect and which is working in the Stride Editor might not be possible yet. Please add your vote or submit another request in the GitHub Issues. References https://github.com/stride3d/stride/issues/1295 https://github.com/stride3d/stride/discussions/1253"
  },
  "manual/code-only/troubleshooting.html": {
    "href": "manual/code-only/troubleshooting.html",
    "title": "Troubleshooting | Stride Manual",
    "keywords": "Troubleshooting Building Project Issues Error - Could not load native library libcore using CPU architecture x64 Make sure you installed Visual C++ Redistributable C:\\Users\\Vacla\\.nuget\\packages\\stride.core.assets.compilerapp\\4.1.0.1728\\buildTransitive\\Stride.Core.Assets.CompilerApp.targets(132,5): error MSB3073: The command \"\"C:\\Users\\Vacla\\.nuget\\packages\\stride.core.assets.compilerapp\\4.1.0.1728\\buildTransitive\\..\\tools\\net6.0-windows7.0\\Stride.Core.Assets.CompilerApp.exe\" --disable-auto- compile --project-configuration \"Debug\" --platform=Windows --project-configuration=Debug --compile-property:StrideGraphicsApi=Direct3D11 --output-path=\"C:\\Projects\\StrideDemo\\bin\\Debug\\net6.0\\data\" --build-path=\"C:\\Projects\\StrideDemo\\obj\\stride\\assetbuild\\data\" --package-file=\"C:\\Projects\\StrideDemo\\StrideDemo.csproj\" --msbuild-up todatecheck-filebase=\"C:\\Projects\\StrideDemo\\obj\\Debug\\net6.0\\stride\\assetcompiler-uptodatecheck\"\" exited with code -532462766. [C:\\Projects\\StrideDemo\\StrideDemo.csproj] Error - Package 'runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0' from source .. : The repository primary signature's timestamping certificate is not trusted by the trust provider Restore the package Stride.CommunityToolkit again dotnet restore"
  },
  "manual/getting-started.html": {
    "href": "manual/getting-started.html",
    "title": "Get started | Stride Manual",
    "keywords": "Get started This article covers how to get started using the packages provided as part of the Stride Community Toolkit project. Prerequisites You must install the following, otherwise you won't be able to build/run the project. If you are using Stride 4.1+ already, these should be already installed. Install Microsoft Visual C++ 2013 Redistributable vcredist_x86.exe vcredist_x64.exe Install Microsoft Visual C++ 2015-2019 Redistributable vcredist_x64.exe New - Install Microsoft Visual C++ 2015-2022 Redistributable vcredist_x64.exe (25MB) Install .NET 6 SDK x64 https://dotnet.microsoft.com/en-us/download (200MB) Install IDE of your choice Visual Studio 2022 Visual Studio 2022 Community is free Make sure that .NET desktop development workload is selected when installing Visual Studio Visual Studio Code (free, 81MB) Make sure you install also C# for Visual Studio Code (powered by OmniSharp) extension Restart Visual Studio Code otherwise dotnet command might not work Rider (paid) Adding the NuGet package(s) The toolkit is available as a set of NuGet packages that can be added to any existing or new project using Visual Studio."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Stride Community Toolkit Manual | Stride Manual",
    "keywords": "Stride Community Toolkit Manual These pages contain information about how to use Stride Community Toolkit, for Stride an open-source C# game engine."
  },
  "manual/whats-new.html": {
    "href": "manual/whats-new.html",
    "title": "What's new in docs? | Stride Manual",
    "keywords": "What's new in docs? Welcome to what's new in Stride Community Toolkit docs. Use this page to quickly find the latest changes. New articles Updated articles"
  },
  "release-notes/index.html": {
    "href": "release-notes/index.html",
    "title": "Release Notes | Stride Community Toolkit",
    "keywords": "Release Notes Welcome to the Release Notes for the Stride Community Toolkit. This section aims to provide you with an organized, high-level summary of changes, enhancements, and fixes made in each version release. If you're looking to understand what has changed from one version to the next, you're in the right place. How to Read the Release Notes Each sub-page listed on the left corresponds to a specific version release of the Stride Community Toolkit. These sub-pages will detail new features, improvements, and bug fixes for that particular version. What to Expect The Stride Community Toolkit is developed with rapid iteration in mind. It moves at a faster development pace compared to the Stride Game Engine. As a result, you should expect frequent updates that may introduce breaking changes. This fast-paced approach allows us to incorporate community feedback quickly and continue improving the toolkit."
  },
  "release-notes/stride-community-toolkit-1.0.html": {
    "href": "release-notes/stride-community-toolkit-1.0.html",
    "title": "What's new in Stride Community Toolkit 1.0 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0 This article highlights the most significant changes in Stride Community Toolkit 1.0 with links to relevant documentation."
  },
  "tutorials/code-only/getting-started.html": {
    "href": "tutorials/code-only/getting-started.html",
    "title": "Get Started | Stride Tutorials",
    "keywords": "Get Started These tutorials cover the code only principles of using C# when working with the Stride game engine."
  },
  "tutorials/code-only/index.html": {
    "href": "tutorials/code-only/index.html",
    "title": "C# Code Only | Stride Tutorials",
    "keywords": "C# Code Only These tutorials cover the code only principles of using C# when working with the Stride game engine."
  },
  "tutorials/index.html": {
    "href": "tutorials/index.html",
    "title": "Stride Game Engine Tutorials | Stride Tutorials",
    "keywords": "Stride Game Engine Tutorials These pages contain tutorials to learn more about the Stride game engine 🎮. Stride Tutorials New to Stride? Start with these tutorials to get familiar with the basics of the engine and the Game Studio. 🛠️ Game Studio - The Stride engine comes with an editor called Game Studio, which is the central tool for game and application production in Stride. 🌱 C# Beginner - Covering the beginner principles of using C# when working with the Stride game engine. 📈 C# Intermediate - Diving into intermediate principles of C# programming in Stride, including UI, collisions, and more. Stride Community Toolkit Tutorials 📈 Code Only - This tutorial will show you how to create a simple game using only code."
  }
}