{
  "api/DebugShapes.ImmediateDebugPrimitives.html": {
    "href": "api/DebugShapes.ImmediateDebugPrimitives.html",
    "title": "Class ImmediateDebugPrimitives | Stride Community Toolkit",
    "keywords": "Class ImmediateDebugPrimitives Namespace DebugShapes Assembly Stride.CommunityToolkit.dll public class ImmediateDebugPrimitives Inheritance object ImmediateDebugPrimitives Methods CopyFromGeometricPrimitive(GeometricMeshData<VertexPositionNormalTexture>, ref VertexPositionTexture[], ref int[]) public static void CopyFromGeometricPrimitive(GeometricMeshData<VertexPositionNormalTexture> primitiveData, ref VertexPositionTexture[] vertices, ref int[] indices) Parameters primitiveData GeometricMeshData<VertexPositionNormalTexture> vertices VertexPositionTexture[] indices int[] GenerateCapsule(float, float, int, int) public static (VertexPositionTexture[] Vertices, int[] Indices) GenerateCapsule(float length, float radius, int tesselation, int uvSplits = 4) Parameters length float radius float tesselation int uvSplits int Returns (VertexPositionTexture[] Vertices, int[] Indices) GenerateCircle(float, int, int, float, bool, int) public static (VertexPositionTexture[] Vertices, int[] Indices) GenerateCircle(float radius = 0.5, int tesselations = 16, int uvSplits = 0, float yOffset = 0, bool isFlipped = false, int uvOffset = 0) Parameters radius float tesselations int uvSplits int yOffset float isFlipped bool uvOffset int Returns (VertexPositionTexture[] Vertices, int[] Indices) GenerateCone(float, float, int, int, int) public static (VertexPositionTexture[] Vertices, int[] Indices) GenerateCone(float height, float radius, int tesselations, int uvSplits = 4, int uvSplitsBottom = 0) Parameters height float radius float tesselations int uvSplits int uvSplitsBottom int Returns (VertexPositionTexture[] Vertices, int[] Indices) GenerateCube(float) public static (VertexPositionTexture[] Vertices, int[] Indices) GenerateCube(float size = 1) Parameters size float Returns (VertexPositionTexture[] Vertices, int[] Indices) GenerateCylinder(float, float, int, int, int?) public static (VertexPositionTexture[] Vertices, int[] Indices) GenerateCylinder(float height = 1, float radius = 0.5, int tesselations = 16, int uvSplits = 4, int? uvSidesForCircle = null) Parameters height float radius float tesselations int uvSplits int uvSidesForCircle int? Returns (VertexPositionTexture[] Vertices, int[] Indices) GenerateQuad(float, float) public static (VertexPositionTexture[] Vertices, int[] Indices) GenerateQuad(float width, float height) Parameters width float height float Returns (VertexPositionTexture[] Vertices, int[] Indices) GenerateSphere(float, int, int, int) public static (VertexPositionTexture[] Vertices, int[] Indices) GenerateSphere(float radius = 0.5, int tesselations = 16, int uvSplits = 4, int uvSplitOffsetVertical = 0) Parameters radius float tesselations int uvSplits int uvSplitOffsetVertical int Returns (VertexPositionTexture[] Vertices, int[] Indices) GetCircleVector(int, int) public static Vector3 GetCircleVector(int i, int tessellation) Parameters i int tessellation int Returns Vector3"
  },
  "api/DebugShapes.ImmediateDebugRenderFeature.html": {
    "href": "api/DebugShapes.ImmediateDebugRenderFeature.html",
    "title": "Class ImmediateDebugRenderFeature | Stride Community Toolkit",
    "keywords": "Class ImmediateDebugRenderFeature Namespace DebugShapes Assembly Stride.CommunityToolkit.dll public class ImmediateDebugRenderFeature : RootRenderFeature, IComponent, IReferencable, ICollectorHolder, IGraphicsRendererCore, IDisposable Inheritance object DisposeBase ComponentBase RenderFeature RootRenderFeature ImmediateDebugRenderFeature Implements IComponent IReferencable ICollectorHolder IGraphicsRendererCore IDisposable Inherited Members RootRenderFeature.RenderData RootRenderFeature.RenderObjects RootRenderFeature.GetRenderNode(RenderNodeReference) RootRenderFeature.GetViewObjectNode(ViewObjectNodeReference) RootRenderFeature.GetObjectNode(ObjectNodeReference) RootRenderFeature.CreateViewObjectNode(RenderView, RenderObject) RootRenderFeature.OnAddRenderObject(RenderObject) RootRenderFeature.OnRemoveRenderObject(RenderObject) RootRenderFeature.Reset() RootRenderFeature.PrepareDataArrays() RootRenderFeature.ComputeDataArrayExpectedSize(DataType) RootRenderFeature.Index RootRenderFeature.SortKey RootRenderFeature.ObjectNodeReferences RootRenderFeature.RenderNodes RootRenderFeature.RenderStageSelectors RenderFeature.Initialize(RenderContext) RenderFeature.Destroy() RenderFeature.Collect() RenderFeature.PrepareEffectPermutations(RenderDrawContext) RenderFeature.Draw(RenderDrawContext, RenderView, RenderViewStage) RenderFeature.OnRenderSystemChanged() RenderFeature.Context RenderFeature.RenderSystem RenderFeature.Initialized RenderFeature.Enabled ComponentBase.Tags ComponentBase.OnNameChanged() ComponentBase.ToString() ComponentBase.Name DisposeBase.Dispose() DisposeBase.OnAddReference() DisposeBase.OnReleaseReference() DisposeBase.IsDisposed Constructors ImmediateDebugRenderFeature() public ImmediateDebugRenderFeature() Properties SupportedRenderObjectType Gets the type of render object supported by this RootRenderFeature. public override Type SupportedRenderObjectType { get; } Property Value Type Methods Draw(RenderDrawContext, RenderView, RenderViewStage, int, int) Performs GPU updates and/or draw. public override void Draw(RenderDrawContext context, RenderView renderView, RenderViewStage renderViewStage, int startIndex, int endIndex) Parameters context RenderDrawContext renderView RenderView renderViewStage RenderViewStage startIndex int endIndex int Extract() Extract data from entities, should be as fast as possible to not block simulation loop. It should be mostly copies, and the actual processing should be part of Prepare(). public override void Extract() Flush(RenderDrawContext) Releases temporary resources and cleans the state. Should be called once after all Draw(RenderDrawContext, RenderView, RenderViewStage) calls have finished. public override void Flush(RenderDrawContext context) Parameters context RenderDrawContext InitializeCore() Initializes this instance. Query for specific cbuffer (either new one, like PerMaterial, or parts of an existing one, like PerObject=>Skinning) protected override void InitializeCore() Prepare(RenderDrawContext) Performs most of the work (computation and resource preparation). Later game simulation might be running during that step. public override void Prepare(RenderDrawContext context) Parameters context RenderDrawContext Unload() public override void Unload()"
  },
  "api/DebugShapes.ImmediateDebugRenderObject.html": {
    "href": "api/DebugShapes.ImmediateDebugRenderObject.html",
    "title": "Class ImmediateDebugRenderObject | Stride Community Toolkit",
    "keywords": "Class ImmediateDebugRenderObject Namespace DebugShapes Assembly Stride.CommunityToolkit.dll public class ImmediateDebugRenderObject : RenderObject Inheritance object RenderObject ImmediateDebugRenderObject Inherited Members RenderObject.Enabled RenderObject.RenderGroup RenderObject.BoundingBox RenderObject.RenderFeature RenderObject.ObjectNode RenderObject.StaticObjectNode RenderObject.VisibilityObjectNode RenderObject.ActiveRenderStages RenderObject.StateSortKey RenderObject.Index RenderObject.Source Methods DrawCapsule(ref Vector3, float, float, ref Quaternion, ref Color, bool) public void DrawCapsule(ref Vector3 position, float height, float radius, ref Quaternion rotation, ref Color color, bool depthTest = true) Parameters position Vector3 height float radius float rotation Quaternion color Color depthTest bool DrawCircle(ref Vector3, float, ref Quaternion, ref Color, bool) public void DrawCircle(ref Vector3 position, float radius, ref Quaternion rotation, ref Color color, bool depthTest = true) Parameters position Vector3 radius float rotation Quaternion color Color depthTest bool DrawCone(ref Vector3, float, float, ref Quaternion, ref Color, bool) public void DrawCone(ref Vector3 position, float height, float radius, ref Quaternion rotation, ref Color color, bool depthTest = true) Parameters position Vector3 height float radius float rotation Quaternion color Color depthTest bool DrawCube(ref Vector3, ref Vector3, ref Quaternion, ref Color, bool) public void DrawCube(ref Vector3 start, ref Vector3 end, ref Quaternion rotation, ref Color color, bool depthTest = true) Parameters start Vector3 end Vector3 rotation Quaternion color Color depthTest bool DrawCylinder(ref Vector3, float, float, ref Quaternion, ref Color, bool) public void DrawCylinder(ref Vector3 position, float height, float radius, ref Quaternion rotation, ref Color color, bool depthTest = true) Parameters position Vector3 height float radius float rotation Quaternion color Color depthTest bool DrawHalfSphere(ref Vector3, float, ref Quaternion, ref Color, bool) public void DrawHalfSphere(ref Vector3 position, float radius, ref Quaternion rotation, ref Color color, bool depthTest = true) Parameters position Vector3 radius float rotation Quaternion color Color depthTest bool DrawLine(ref Vector3, ref Vector3, ref Color, bool) public void DrawLine(ref Vector3 start, ref Vector3 end, ref Color color, bool depthTest = true) Parameters start Vector3 end Vector3 color Color depthTest bool DrawQuad(ref Vector3, ref Vector2, ref Quaternion, ref Color, bool) public void DrawQuad(ref Vector3 position, ref Vector2 size, ref Quaternion rotation, ref Color color, bool depthTest = true) Parameters position Vector3 size Vector2 rotation Quaternion color Color depthTest bool DrawSphere(ref Vector3, float, ref Color, bool) public void DrawSphere(ref Vector3 position, float radius, ref Color color, bool depthTest = true) Parameters position Vector3 radius float color Color depthTest bool"
  },
  "api/DebugShapes.ImmediateDebugRenderStageSelector.html": {
    "href": "api/DebugShapes.ImmediateDebugRenderStageSelector.html",
    "title": "Class ImmediateDebugRenderStageSelector | Stride Community Toolkit",
    "keywords": "Class ImmediateDebugRenderStageSelector Namespace DebugShapes Assembly Stride.CommunityToolkit.dll public class ImmediateDebugRenderStageSelector : RenderStageSelector Inheritance object RenderStageSelector ImmediateDebugRenderStageSelector Properties OpaqueRenderStage public RenderStage OpaqueRenderStage { get; set; } Property Value RenderStage RenderGroup public RenderGroupMask RenderGroup { get; set; } Property Value RenderGroupMask TransparentRenderStage public RenderStage TransparentRenderStage { get; set; } Property Value RenderStage Methods Process(RenderObject) public override void Process(RenderObject renderObject) Parameters renderObject RenderObject"
  },
  "api/DebugShapes.ImmediateDebugRenderSystem.html": {
    "href": "api/DebugShapes.ImmediateDebugRenderSystem.html",
    "title": "Class ImmediateDebugRenderSystem | Stride Community Toolkit",
    "keywords": "Class ImmediateDebugRenderSystem Namespace DebugShapes Assembly Stride.CommunityToolkit.dll public class ImmediateDebugRenderSystem : GameSystemBase, IDisposable, ICollectorHolder, IGameSystemBase, IComponent, IReferencable, IUpdateable, IDrawable, IContentable Inheritance object DisposeBase ComponentBase GameSystemBase ImmediateDebugRenderSystem Implements IDisposable ICollectorHolder IGameSystemBase IComponent IReferencable IUpdateable IDrawable IContentable Inherited Members GameSystemBase.BeginDraw() GameSystemBase.Draw(GameTime) GameSystemBase.EndDraw() GameSystemBase.Initialize() GameSystemBase.InitGraphicsDeviceService() GameSystemBase.OnDrawOrderChanged(object, EventArgs) GameSystemBase.OnUpdateOrderChanged(object, EventArgs) GameSystemBase.LoadContent() GameSystemBase.UnloadContent() GameSystemBase.Game GameSystemBase.Services GameSystemBase.Content GameSystemBase.GraphicsDevice GameSystemBase.Visible GameSystemBase.DrawOrder GameSystemBase.Enabled GameSystemBase.UpdateOrder GameSystemBase.DrawOrderChanged GameSystemBase.VisibleChanged GameSystemBase.EnabledChanged GameSystemBase.UpdateOrderChanged ComponentBase.Tags ComponentBase.Destroy() ComponentBase.OnNameChanged() ComponentBase.ToString() ComponentBase.Name DisposeBase.Dispose() DisposeBase.OnAddReference() DisposeBase.OnReleaseReference() DisposeBase.IsDisposed Constructors ImmediateDebugRenderSystem(IServiceRegistry, RenderGroup) public ImmediateDebugRenderSystem(IServiceRegistry registry, RenderGroup renderGroup = RenderGroup.Group31) Parameters registry IServiceRegistry renderGroup RenderGroup Properties MaxPrimitives public int MaxPrimitives { get; set; } Property Value int MaxPrimitivesWithLifetime public int MaxPrimitivesWithLifetime { get; set; } Property Value int PrimitiveColor public Color PrimitiveColor { get; set; } Property Value Color RenderGroup public RenderGroup RenderGroup { get; set; } Property Value RenderGroup Methods DrawArrow(Vector3, Vector3, float, float, Color, float, bool, bool) public void DrawArrow(Vector3 from, Vector3 to, float coneHeight = 0.25, float coneRadius = 0.125, Color color = default, float duration = 0, bool depthTest = true, bool solid = false) Parameters from Vector3 to Vector3 coneHeight float coneRadius float color Color duration float depthTest bool solid bool DrawBounds(Vector3, Vector3, Quaternion, Color, float, bool, bool) public void DrawBounds(Vector3 start, Vector3 end, Quaternion rotation = default, Color color = default, float duration = 0, bool depthTest = true, bool solid = false) Parameters start Vector3 end Vector3 rotation Quaternion color Color duration float depthTest bool solid bool DrawCapsule(Vector3, float, float, Quaternion, Color, float, bool, bool) public void DrawCapsule(Vector3 position, float height, float radius, Quaternion rotation = default, Color color = default, float duration = 0, bool depthTest = true, bool solid = false) Parameters position Vector3 height float radius float rotation Quaternion color Color duration float depthTest bool solid bool DrawCircle(Vector3, float, Quaternion, Color, float, bool, bool) public void DrawCircle(Vector3 position, float radius, Quaternion rotation = default, Color color = default, float duration = 0, bool depthTest = true, bool solid = false) Parameters position Vector3 radius float rotation Quaternion color Color duration float depthTest bool solid bool DrawCone(Vector3, float, float, Quaternion, Color, float, bool, bool) public void DrawCone(Vector3 position, float height, float radius, Quaternion rotation = default, Color color = default, float duration = 0, bool depthTest = true, bool solid = false) Parameters position Vector3 height float radius float rotation Quaternion color Color duration float depthTest bool solid bool DrawCube(Vector3, Vector3, Quaternion, Color, float, bool, bool) public void DrawCube(Vector3 start, Vector3 size, Quaternion rotation = default, Color color = default, float duration = 0, bool depthTest = true, bool solid = false) Parameters start Vector3 size Vector3 rotation Quaternion color Color duration float depthTest bool solid bool DrawCylinder(Vector3, float, float, Quaternion, Color, float, bool, bool) public void DrawCylinder(Vector3 position, float height, float radius, Quaternion rotation = default, Color color = default, float duration = 0, bool depthTest = true, bool solid = false) Parameters position Vector3 height float radius float rotation Quaternion color Color duration float depthTest bool solid bool DrawHalfSphere(Vector3, float, Color, Quaternion, float, bool, bool) public void DrawHalfSphere(Vector3 position, float radius, Color color = default, Quaternion rotation = default, float duration = 0, bool depthTest = true, bool solid = false) Parameters position Vector3 radius float color Color rotation Quaternion duration float depthTest bool solid bool DrawLine(Vector3, Vector3, Color, float, bool) public void DrawLine(Vector3 start, Vector3 end, Color color = default, float duration = 0, bool depthTest = true) Parameters start Vector3 end Vector3 color Color duration float depthTest bool DrawLines(Vector3[], Color?, float, bool) public void DrawLines(Vector3[] vertices, Color? color = null, float duration = 0, bool depthTest = true) Parameters vertices Vector3[] color Color? duration float depthTest bool DrawQuad(Vector3, Vector2, Quaternion, Color, float, bool, bool) public void DrawQuad(Vector3 position, Vector2 size, Quaternion rotation = default, Color color = default, float duration = 0, bool depthTest = true, bool solid = false) Parameters position Vector3 size Vector2 rotation Quaternion color Color duration float depthTest bool solid bool DrawRay(Vector3, Vector3, Color, float, bool) public void DrawRay(Vector3 start, Vector3 dir, Color color = default, float duration = 0, bool depthTest = true) Parameters start Vector3 dir Vector3 color Color duration float depthTest bool DrawSphere(Vector3, float, Color, float, bool, bool) public void DrawSphere(Vector3 position, float radius, Color color = default, float duration = 0, bool depthTest = true, bool solid = false) Parameters position Vector3 radius float color Color duration float depthTest bool solid bool Update(GameTime) This method is called when this game component is updated. public override void Update(GameTime gameTime) Parameters gameTime GameTime The current timing."
  },
  "api/DebugShapes.html": {
    "href": "api/DebugShapes.html",
    "title": "Namespace DebugShapes | Stride Community Toolkit",
    "keywords": "Namespace DebugShapes Classes ImmediateDebugPrimitives ImmediateDebugRenderFeature ImmediateDebugRenderObject ImmediateDebugRenderStageSelector ImmediateDebugRenderSystem"
  },
  "api/Stride.CommunityToolkit.Bepu.Body2DComponent.html": {
    "href": "api/Stride.CommunityToolkit.Bepu.Body2DComponent.html",
    "title": "Class Body2DComponent | Stride Community Toolkit",
    "keywords": "Class Body2DComponent Namespace Stride.CommunityToolkit.Bepu Assembly Stride.CommunityToolkit.dll [ComponentCategory(\"Bepu\")] public class Body2DComponent : BodyComponent, IIdentifiable Inheritance object EntityComponent ContainerComponent BodyComponent Body2DComponent Implements IIdentifiable Inherited Members BodyComponent.ApplyImpulse(Vector3, Vector3) BodyComponent.ApplyAngularImpulse(Vector3) BodyComponent.ApplyLinearImpulse(Vector3) BodyComponent.DetachInner() BodyComponent.RegisterContactHandler() BodyComponent.UnregisterContactHandler() BodyComponent.IsContactHandlerRegistered() BodyComponent.Kinematic BodyComponent.IgnoreGlobalGravity BodyComponent.SleepThreshold BodyComponent.MinimumTimestepCountUnderThreshold BodyComponent.InterpolationMode BodyComponent.ContinuousDetectionMode BodyComponent.Awake BodyComponent.LinearVelocity BodyComponent.AngularVelocity BodyComponent.Position BodyComponent.Orientation BodyComponent.BodyInertia BodyComponent.SpeculativeMargin BodyComponent.ContinuousDetection BodyComponent.MaterialProperties BodyComponent.Pose ContainerComponent.TryUpdateMaterialProperties() ContainerComponent.Simulation ContainerComponent.ShapeIndex ContainerComponent.Collider ContainerComponent.ContactEventHandler ContainerComponent.SimulationIndex ContainerComponent.SpringFrequency ContainerComponent.SpringDampingRatio ContainerComponent.FrictionCoefficient ContainerComponent.MaximumRecoveryVelocity ContainerComponent.CollisionMask ContainerComponent.FilterByDistance ContainerComponent.CenterOfMass EntityComponent.Entity EntityComponent.Id EntityComponent.EnsureEntity Methods AccessBodyReference(Vector3) public void AccessBodyReference(Vector3 value) Parameters value Vector3 AttachInner(RigidPose, BodyInertia, TypedIndex) protected override void AttachInner(RigidPose containerPose, BodyInertia shapeInertia, TypedIndex shapeIndex) Parameters containerPose RigidPose shapeInertia BodyInertia shapeIndex TypedIndex"
  },
  "api/Stride.CommunityToolkit.Bepu.Simulation2DComponent.html": {
    "href": "api/Stride.CommunityToolkit.Bepu.Simulation2DComponent.html",
    "title": "Class Simulation2DComponent | Stride Community Toolkit",
    "keywords": "Class Simulation2DComponent Namespace Stride.CommunityToolkit.Bepu Assembly Stride.CommunityToolkit.dll [ComponentCategory(\"Bepu\")] public class Simulation2DComponent : SimulationUpdateComponent, IIdentifiable, ICollectorHolder Inheritance object EntityComponent ScriptComponent StartupScript SyncScript SimulationUpdateComponent Simulation2DComponent Implements IIdentifiable ICollectorHolder Inherited Members SimulationUpdateComponent.Start() SimulationUpdateComponent.Cancel() SimulationUpdateComponent.SimulationIndex SimulationUpdateComponent.BepuSimulation ScriptComponent.LiveScriptingMask ScriptComponent.ScriptGlobalProfilingKey ScriptComponent.PriorityUpdated() ScriptComponent.ProfilingKey ScriptComponent.Audio ScriptComponent.SpriteAnimation ScriptComponent.Services ScriptComponent.Game ScriptComponent.Content ScriptComponent.GameProfiler ScriptComponent.GraphicsDevice ScriptComponent.Input ScriptComponent.Script ScriptComponent.SceneSystem ScriptComponent.EffectSystem ScriptComponent.DebugText ScriptComponent.Streaming ScriptComponent.Log ScriptComponent.Priority ScriptComponent.IsLiveReloading ScriptComponent.Collector EntityComponent.Entity EntityComponent.Id EntityComponent.EnsureEntity Extension Methods ScriptComponentExtensions.DeltaTime(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent, string) ScriptComponentExtensions.GetFirstCamera(ScriptComponent) ScriptComponentExtensions.GetFirstGCCamera(ScriptComponent) ScriptComponentExtensions.GetGCCamera(ScriptComponent) ScriptComponentExtensions.GetGCCamera(ScriptComponent, string) Methods AfterSimulationUpdate(float) public override void AfterSimulationUpdate(float simTimeStep) Parameters simTimeStep float SimulationUpdate(float) public override void SimulationUpdate(float simTimeStep) Parameters simTimeStep float Update() Called every frame. public override void Update()"
  },
  "api/Stride.CommunityToolkit.Bepu.html": {
    "href": "api/Stride.CommunityToolkit.Bepu.html",
    "title": "Namespace Stride.CommunityToolkit.Bepu | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Bepu Classes Body2DComponent Simulation2DComponent"
  },
  "api/Stride.CommunityToolkit.Engine.AnimationComponentExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Engine.AnimationComponentExtensions.html",
    "title": "Class AnimationComponentExtensions | Stride Community Toolkit",
    "keywords": "Class AnimationComponentExtensions Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll public static class AnimationComponentExtensions Inheritance object AnimationComponentExtensions Methods PlayAnimation(AnimationComponent, string) Plays the specified animation on the animation component if it is not already playing. public static void PlayAnimation(this AnimationComponent animationComponent, string name) Parameters animationComponent AnimationComponent The AnimationComponent on which to play the animation. name string The name of the animation to be played. Remarks This method first checks if the animation with the given name is already playing. If not, it starts playing the animation. It's useful for preventing the interruption or restart of an animation that is currently in progress."
  },
  "api/Stride.CommunityToolkit.Engine.CameraComponentExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Engine.CameraComponentExtensions.html",
    "title": "Class CameraComponentExtensions | Stride Community Toolkit",
    "keywords": "Class CameraComponentExtensions Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll public static class CameraComponentExtensions Inheritance object CameraComponentExtensions Methods GetPickRay(CameraComponent, Vector2) Calculates a ray from the camera through a point on the screen in world space. public static Ray GetPickRay(this CameraComponent camera, Vector2 screenPosition) Parameters camera CameraComponent The camera component used for the calculation. screenPosition Vector2 The position on the screen, typically the mouse position, normalized between (0,0) and (1,1). Returns Ray A Ray starting from the camera and pointing into the scene through the specified screen position. Remarks This method is useful for implementing features like object picking where you want to select or interact with objects in the 3D world based on screen coordinates. LogicDirectionToWorldDirection(CameraComponent, Vector2) Converts a 2D logical direction into a 3D world direction relative to the camera's orientation. public static Vector3 LogicDirectionToWorldDirection(this CameraComponent camera, Vector2 logicDirection) Parameters camera CameraComponent The camera component used for the calculation. logicDirection Vector2 The 2D logical direction (e.g., input from a joystick or keyboard), typically normalized between -1 and 1. Returns Vector3 The corresponding 3D world direction vector. Remarks This method is useful for converting 2D input commands into 3D movements in the world, taking into account the camera's current orientation. LogicDirectionToWorldDirection(CameraComponent, Vector2, Vector3) Converts a 2D logical direction into a 3D world direction relative to the camera's orientation, using a specified up vector. public static Vector3 LogicDirectionToWorldDirection(this CameraComponent camera, Vector2 logicDirection, Vector3 upVector) Parameters camera CameraComponent The camera component used for the calculation. logicDirection Vector2 The 2D logical direction (e.g., input from a joystick or keyboard), typically normalized between -1 and 1. upVector Vector3 The up vector to be used for the calculation, defining the vertical direction in world space. Returns Vector3 The corresponding 3D world direction vector. Remarks This method is useful for converting 2D input commands into 3D movements in the world, taking into account the camera's current orientation and a custom vertical orientation. Raycast(CameraComponent, ScriptComponent, Vector2, CollisionFilterGroups, CollisionFilterGroupFlags) Performs a raycasting operation from the specified CameraComponent's position through the specified screen position in world coordinates, and returns information about the hit result. public static HitResult Raycast(this CameraComponent camera, ScriptComponent component, Vector2 screenPosition, CollisionFilterGroups collisionGroups = CollisionFilterGroups.DefaultFilter, CollisionFilterGroupFlags collisionFilterGroupFlags = CollisionFilterGroupFlags.DefaultFilter) Parameters camera CameraComponent The CameraComponent from which the ray should be cast. component ScriptComponent The ScriptComponent which has the Simulation to run the Cast in. screenPosition Vector2 The screen position (in world coordinates) where the ray should be cast through. collisionGroups CollisionFilterGroups Optional. The collision filter group to consider during the raycasting. Default is CollisionFilterGroups.DefaultFilter. collisionFilterGroupFlags CollisionFilterGroupFlags Optional. The collision filter group flags to consider during the raycasting. Default is CollisionFilterGroupFlags.DefaultFilter. Returns HitResult A HitResult containing information about the hit result, including the hit location and other collision data. Raycast(CameraComponent, Simulation, Vector2, CollisionFilterGroups, CollisionFilterGroupFlags) public static HitResult Raycast(this CameraComponent camera, Simulation simulation, Vector2 screenPosition, CollisionFilterGroups collisionGroups = CollisionFilterGroups.DefaultFilter, CollisionFilterGroupFlags collisionFilterGroupFlags = CollisionFilterGroupFlags.DefaultFilter) Parameters camera CameraComponent simulation Simulation screenPosition Vector2 collisionGroups CollisionFilterGroups collisionFilterGroupFlags CollisionFilterGroupFlags Returns HitResult RaycastMouse(CameraComponent, ScriptComponent, CollisionFilterGroups, CollisionFilterGroupFlags) Performs a raycasting operation from the specified CameraComponent's position through the mouse cursor position in screen coordinates, and returns information about the hit result. public static HitResult RaycastMouse(this CameraComponent camera, ScriptComponent component, CollisionFilterGroups collisionGroups = CollisionFilterGroups.DefaultFilter, CollisionFilterGroupFlags collisionFilterGroupFlags = CollisionFilterGroupFlags.DefaultFilter) Parameters camera CameraComponent The CameraComponent from which the ray should be cast. component ScriptComponent The ScriptComponent from which the Input.MousePosition should be taken. collisionGroups CollisionFilterGroups Optional. The collision filter group to consider during the raycasting. Default is CollisionFilterGroups.DefaultFilter. collisionFilterGroupFlags CollisionFilterGroupFlags Optional. The collision filter group flags to consider during the raycasting. Default is CollisionFilterGroupFlags.DefaultFilter. Returns HitResult A HitResult containing information about the hit result, including the hit location and other collision data. RaycastMouse(CameraComponent, Simulation, Vector2, CollisionFilterGroups, CollisionFilterGroupFlags) public static HitResult RaycastMouse(this CameraComponent camera, Simulation simulation, Vector2 screenPosition, CollisionFilterGroups collisionGroups = CollisionFilterGroups.DefaultFilter, CollisionFilterGroupFlags collisionFilterGroupFlags = CollisionFilterGroupFlags.DefaultFilter) Parameters camera CameraComponent simulation Simulation screenPosition Vector2 collisionGroups CollisionFilterGroups collisionFilterGroupFlags CollisionFilterGroupFlags Returns HitResult ScreenPointToRay(CameraComponent, Vector2) Calculates the near and far vectors for a ray that starts at the camera and passes through a given screen point. The ray is in world space, starting at the near plane of the camera and extending through the specified pixel coordinates on the screen. public static (Vector4 VectorNear, Vector4 VectorFar) ScreenPointToRay(this CameraComponent camera, Vector2 screenPosition) Parameters camera CameraComponent The camera component used to calculate the ray. screenPosition Vector2 The screen position (in normalized coordinates) through which the ray passes. Returns (Vector4 VectorNear, Vector4 VectorFar) A tuple containing the near vector (VectorNear) and the far vector (VectorFar) of the ray in world space. ScreenToWorldPoint(CameraComponent, ref Vector3) Converts the screen position to a point in world coordinates. public static Vector3 ScreenToWorldPoint(this CameraComponent cameraComponent, ref Vector3 position) Parameters cameraComponent CameraComponent position Vector3 The screen position in normalized X, Y coordinates. Top-left is (0,0), bottom-right is (1,1). Z is in world units from near camera plane. Returns Vector3 Position in world coordinates. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. Exceptions ArgumentNullException If the cameraComponent argument is null. ScreenToWorldRaySegment(CameraComponent, Vector2) Converts the screen position to a RaySegment in world coordinates. public static RaySegment ScreenToWorldRaySegment(this CameraComponent cameraComponent, Vector2 position) Parameters cameraComponent CameraComponent position Vector2 Returns RaySegment RaySegment, starting at near plain and ending at the far plain. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. Exceptions ArgumentNullException If the cameraComponent argument is null. ScreenToWorldRaySegment(CameraComponent, ref Vector2, out RaySegment) Converts the screen position to a RaySegment in world coordinates. public static void ScreenToWorldRaySegment(this CameraComponent cameraComponent, ref Vector2 position, out RaySegment result) Parameters cameraComponent CameraComponent position Vector2 result RaySegment RaySegment, starting at near plain and ending at the far plain. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. WorldToClipSpace(CameraComponent, ref Vector3) Converts the world position to clip space coordinates relative to camera. public static Vector3 WorldToClipSpace(this CameraComponent cameraComponent, ref Vector3 position) Parameters cameraComponent CameraComponent The camera component used for the transformation. position Vector3 The position in world space to be transformed. Returns Vector3 The position in clip space. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. WorldToScreenPoint(CameraComponent, ref Vector3) Converts the world position to screen space coordinates relative to cameraComponent. public static Vector3 WorldToScreenPoint(this CameraComponent cameraComponent, ref Vector3 position) Parameters cameraComponent CameraComponent The camera component used to perform the calculation. position Vector3 The world space position to be converted to screen space. Returns Vector3 The screen position in normalized X, Y coordinates. Top-left is (0,0), bottom-right is (1,1). Z is in world units from near camera plane. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. Exceptions ArgumentNullException If the cameraComponent argument is null. WorldToScreenPoint(CameraComponent, ref Vector3, GraphicsDevice) Converts the world position to screen space coordinates relative to cameraComponent and the window size of the graphicsDevice. public static Vector2 WorldToScreenPoint(this CameraComponent cameraComponent, ref Vector3 position, GraphicsDevice graphicsDevice) Parameters cameraComponent CameraComponent The camera component used to perform the calculation. position Vector3 The world space position to be converted to screen space. graphicsDevice GraphicsDevice The graphics device providing information about the window size. Returns Vector2 The screen position as normalized X * graphicsDevice width, normalized Y * graphicsDevice height. Z is always 0. Remarks This method does not update the ViewMatrix or ProjectionMatrix before performing the transformation. If the CameraComponent or it's containing Entity TransformComponenthas been modified since the last frame you may need to call the Update() method first. Exceptions ArgumentNullException If the cameraComponent argument is null."
  },
  "api/Stride.CommunityToolkit.Engine.CameraDefaults.html": {
    "href": "api/Stride.CommunityToolkit.Engine.CameraDefaults.html",
    "title": "Class CameraDefaults | Stride Community Toolkit",
    "keywords": "Class CameraDefaults Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll public static class CameraDefaults Inheritance object CameraDefaults Fields Initial2DPosition public static readonly Vector3 Initial2DPosition Field Value Vector3 Initial2DRotation public static readonly Vector3 Initial2DRotation Field Value Vector3 Initial3DPosition Specifies the initial position for a camera within the game or scene. This position is set as (6, 6, 6) by default. public static readonly Vector3 Initial3DPosition Field Value Vector3 Initial3DRotation Specifies the initial rotation (in degrees) for a camera within the game or scene. This rotation is set as (45, -30, 0) by default, representing rotations around the X, Y, and Z axes respectively. public static readonly Vector3 Initial3DRotation Field Value Vector3 MainCameraName Main camera name used be default in Stride public const string MainCameraName = \"Main\" Field Value string"
  },
  "api/Stride.CommunityToolkit.Engine.EntityExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Engine.EntityExtensions.html",
    "title": "Class EntityExtensions | Stride Community Toolkit",
    "keywords": "Class EntityExtensions Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll Provides extension methods for Entity to simplify common operations. public static class EntityExtensions Inheritance object EntityExtensions Methods Add2DCameraController(Entity) public static void Add2DCameraController(this Entity entity) Parameters entity Entity Add3DCameraController(Entity) Adds an interactive camera script Basic3DCameraController to the specified entity, enabling camera movement and rotation through various input methods. public static void Add3DCameraController(this Entity entity) Parameters entity Entity The entity to which the interactive camera script will be added. Remarks The camera entity can be moved using W, A, S, D, Q and E, arrow keys, a gamepad's left stick or dragging/scaling using multi-touch. Rotation is achieved using the Numpad, the mouse while holding the right mouse button, a gamepad's right stick, or dragging using single-touch. AddGizmo(Entity, GraphicsDevice, Color?, Color?, Color?, bool, bool) Adds a TranslationGizmo to the specified entity with optional custom colors. public static void AddGizmo(this Entity entity, GraphicsDevice graphicsDevice, Color? redColor = null, Color? greenColor = null, Color? blueColor = null, bool showAxisName = false, bool rotateAxisNames = true) Parameters entity Entity The entity to which the gizmo will be added. graphicsDevice GraphicsDevice The graphics device used for rendering the gizmo. redColor Color? Optional custom color for the X-axis of the gizmo. If not specified, a default color is used. greenColor Color? Optional custom color for the Y-axis of the gizmo. If not specified, a default color is used. blueColor Color? Optional custom color for the Z-axis of the gizmo. If not specified, a default color is used. showAxisName bool rotateAxisNames bool Examples This example shows how to add a gizmo to an entity with the default colors: var entity = new Entity(); // Assume 'game' is an existing Game instance entity.AddGizmo(game.GraphicsDevice); AddLightDirectionalGizmo(Entity, GraphicsDevice, Color?) Adds a directional light gizmo to the specified entity for visual representation and manipulation in the editor or during runtime. public static void AddLightDirectionalGizmo(this Entity entity, GraphicsDevice graphicsDevice, Color? color = null) Parameters entity Entity The entity to which the directional light gizmo will be added. graphicsDevice GraphicsDevice The graphics device used to render the gizmo. color Color? Optional color for the gizmo. If not specified, a default color is used. Examples This example shows how to add a light directional gizmo to an entity with the default colors: var entity = new Entity(); // Assume 'game' is an existing Game instance entity.AddLightDirectionalGizmo(game.GraphicsDevice); Remarks This method is useful for visually representing the direction and orientation of a directional light in a scene. The gizmo can be used during runtime to provide a visual reference for the light's direction. FindEntity(Entity, string) Searches for an entity by name within the top-level entities of the current scene. public static Entity? FindEntity(this Entity entity, string name) Parameters entity Entity The reference entity used to access the scene. name string The name of the entity to find. Returns Entity The first entity matching the specified name, or null if no match is found. This search does not include child entities. FindEntityRecursive(Entity, string) Searches for an entity by name within the top-level entities of the current scene. public static Entity? FindEntityRecursive(this Entity parent, string name) Parameters parent Entity The reference entity used to access the scene. name string The name of the entity to find. Returns Entity The first entity matching the specified name, or null if no match is found. This search does not include child entities. GetComponentInChildren<T>(Entity) Recursively searches for the first component of the specified type in the entity's children. public static T? GetComponentInChildren<T>(this Entity entity) Parameters entity Entity Returns T Type Parameters T GetComponent<T>(Entity) Retrieves the first component of the specified type from the entity. public static T? GetComponent<T>(this Entity entity) Parameters entity Entity Returns T The first component of the specified type, or null if no such component exists. Type Parameters T The type of component to retrieve. GetComponents<T>(Entity) Retrieves all components of the specified type from the entity. public static IEnumerable<T> GetComponents<T>(this Entity entity) Parameters entity Entity Returns IEnumerable<T> An IEnumerable of components of the specified type. Type Parameters T The type of components to retrieve. Remove(Entity) Removes the entity from its current scene by setting its Scene property to null. public static void Remove(this Entity entity) Parameters entity Entity The entity to be removed from its current scene. TryGetComponent<T>(Entity, out T?) Tries to retrieve a component of type T from the given entity. public static bool TryGetComponent<T>(this Entity entity, out T? result) Parameters entity Entity The entity from which to retrieve the component. result T When this method returns, contains the first component of type Returns bool true if a component of type T is found in the entity; otherwise, false. Type Parameters T The type of component to retrieve. WorldPosition(Entity, bool) An easier way to get the previous frames world position rather than getting TranslationVector from WorldMatrix public static Vector3 WorldPosition(this Entity entity, bool updateTransforms = true) Parameters entity Entity The Entity to get the World Position updateTransforms bool If true it will get the current frames world matrix Returns Vector3 The Vector3 as the World Position of the Entity"
  },
  "api/Stride.CommunityToolkit.Engine.GameExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Engine.GameExtensions.html",
    "title": "Class GameExtensions | Stride Community Toolkit",
    "keywords": "Class GameExtensions Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll Extensions for IGame public static class GameExtensions Inheritance object GameExtensions Methods Add2DCamera(Game, string?, Vector3?, Vector3?) public static Entity Add2DCamera(this Game game, string? cameraName = \"Main\", Vector3? initialPosition = null, Vector3? initialRotation = null) Parameters game Game cameraName string initialPosition Vector3? initialRotation Vector3? Returns Entity Add2DGround(Game, string?, Vector2?) public static Entity Add2DGround(this Game game, string? entityName = \"Ground\", Vector2? size = null) Parameters game Game entityName string size Vector2? Returns Entity Add3DCamera(Game, string?, Vector3?, Vector3?, CameraProjectionMode) Adds a camera entity to the game's root scene with customizable position and rotation, and default camera name \"Main\" public static Entity Add3DCamera(this Game game, string? cameraName = \"Main\", Vector3? initialPosition = null, Vector3? initialRotation = null, CameraProjectionMode projectionMode = CameraProjectionMode.Perspective) Parameters game Game The Game instance to which the camera entity will be added. cameraName string Optional name for the camera entity and camera slot. If null, the entity will not be named. initialPosition Vector3? Initial position for the camera entity. If null, the camera will be positioned at the default position (6, 6, 6). initialRotation Vector3? Initial rotation for the camera entity specified in degrees. If null, the camera will be rotated to face towards the origin with default angles (Yaw: 45, Pitch: -30, Roll: 0). projectionMode CameraProjectionMode Returns Entity The created Entity object representing the camera. Remarks The camera entity will be created with a perspective projection mode and will be added to the game's root scene. It will also be assigned to the first available camera slot in the GraphicsCompositor. Add3DGround(Game, string?, Vector2?, bool) Adds a ground with default Size 10,10. public static Entity Add3DGround(this Game game, string? entityName = \"Ground\", Vector2? size = null, bool includeCollider = true) Parameters game Game entityName string size Vector2? includeCollider bool Adds a collider Returns Entity Add3DGroundWithBepu(Game, string?, Vector2?, bool) public static Entity Add3DGroundWithBepu(this Game game, string? entityName = \"Ground\", Vector2? size = null, bool includeCollider = true) Parameters game Game entityName string size Vector2? includeCollider bool Returns Entity AddAllDirectionLighting(Game, float, bool) Adds directional lighting from multiple angles to the current scene, enhancing scene illumination. public static void AddAllDirectionLighting(this Game game, float intensity, bool showLightGizmo = true) Parameters game Game The game instance to which the lighting will be added. intensity float The intensity of the light sources. showLightGizmo bool Specifies whether to display a gizmo for the light in the editor. Default is true. Remarks This method creates six directional lights positioned around a central point, each aiming from a unique angle to simulate uniform lighting from all directions. The lights are added at predefined positions and rotations to cover the scene evenly. AddDirectionalLight(Game, string?) Adds a directional light entity to the game's root scene with optional customization. public static Entity AddDirectionalLight(this Game game, string? entityName = null) Parameters game Game The Game instance to which the directional light will be added. entityName string Optional name for the new directional light entity. If null, the entity will not be named. Returns Entity The created Entity object representing the directional light. Remarks This method creates a directional light with the following default settings: - Intensity: 20.0f - Position: (0, 2.0f, 0) - Rotation: X-axis rotated by -30 degrees and Y-axis rotated by -180 degrees. - Shadow Enabled: True - Shadow Size: Large - Shadow Filter: PCF (Percentage Closer Filtering) with a filter size of 5x5 The entity will be added to the game's root scene. You can customize the light properties by accessing the returned Entity object. AddGraphicsCompositor(Game) Adds a default GraphicsCompositor with enabled post-effects to the specified Game instance and sets it as the game's SceneSystem GraphicsCompositor. public static GraphicsCompositor AddGraphicsCompositor(this Game game) Parameters game Game The Game instance to which the GraphicsCompositor will be added. Returns GraphicsCompositor The newly configured GraphicsCompositor instance with enabled post-effects. AddGroundGizmo(Game, Vector3?, bool, bool) public static void AddGroundGizmo(this Game game, Vector3? position = null, bool showAxisName = false, bool rotateAxisNames = true) Parameters game Game position Vector3? showAxisName bool rotateAxisNames bool AddInfinite3DGround(Game, string?, Vector2?, bool) public static Entity AddInfinite3DGround(this Game game, string? entityName = \"Ground\", Vector2? size = null, bool includeCollider = true) Parameters game Game entityName string size Vector2? includeCollider bool Returns Entity AddProfiler(Game, string?) Adds a profiler to the game, which can be toggled on/off with Left Shift + Left Ctrl + P, and provides other keyboard shortcuts. Changing the filtering mode with F1, altering the sorting mode with F2, navigating result pages with F3 and F4, and adjusting the refresh interval with the plus and minus keys. public static Entity AddProfiler(this Game game, string? entityName = null) Parameters game Game The game to which the profiler will be added. entityName string Optional name for the entity to which the GameProfiler script will be attached. Returns Entity The entity to which the GameProfiler script was attached. Remarks This extension method creates an entity and attaches a GameProfiler script to it, enabling in-game profiling. The profiler's behaviour can be interacted with using various keyboard shortcuts as described in the GameProfiler class. Create2DPrimitive(IGame, Primitive2DModelType, Primitive2DCreationOptions?) public static Entity Create2DPrimitive(this IGame game, Primitive2DModelType type, Primitive2DCreationOptions? options = null) Parameters game IGame type Primitive2DModelType options Primitive2DCreationOptions Returns Entity Create2DPrimitiveWithBepu(IGame, Primitive2DModelType, Primitive2DCreationOptionsWithBepu?) public static Entity Create2DPrimitiveWithBepu(this IGame game, Primitive2DModelType type, Primitive2DCreationOptionsWithBepu? options = null) Parameters game IGame type Primitive2DModelType options Primitive2DCreationOptionsWithBepu Returns Entity Create3DPrimitive(IGame, PrimitiveModelType, Primitive3DCreationOptions?) Creates a primitive 3D model entity of the specified type with optional customizations. public static Entity Create3DPrimitive(this IGame game, PrimitiveModelType type, Primitive3DCreationOptions? options = null) Parameters game IGame The game instance. type PrimitiveModelType The type of primitive model to create. options Primitive3DCreationOptions The options for creating the primitive model. If null, default options are used. Returns Entity A new entity representing the specified primitive model. Remarks The options parameter allows specifying various settings such as entity name, material, collider inclusion, size, render group, and 2D flag. Dimensions in the Vector3 for size are used in the order X, Y, Z. If size is null, default dimensions are used for the model. If no collider is included, the entity is returned without it. Create3DPrimitiveWithBepu(IGame, PrimitiveModelType, Primitive3DCreationOptionsWithBepu?) public static Entity Create3DPrimitiveWithBepu(this IGame game, PrimitiveModelType type, Primitive3DCreationOptionsWithBepu? options = null) Parameters game IGame type PrimitiveModelType options Primitive3DCreationOptionsWithBepu Returns Entity CreateMaterial(IGame, Color?, float, float) Creates a basic material with optional color, specular reflection, and microsurface smoothness values. public static Material CreateMaterial(this IGame game, Color? color = null, float specular = 1, float microSurface = 0.65) Parameters game IGame The game instance used to access the graphics device. color Color? The color of the material. Defaults to null, which will use the _defaultMaterialColor. specular float The specular reflection factor of the material. Defaults to 1.0f. microSurface float The microsurface smoothness value of the material. Defaults to 0.65f. Returns Material A new material instance with the specified or default attributes. DeltaTime(IGame) Gets the time elapsed since the last game update in seconds as a single-precision floating-point number. public static float DeltaTime(this IGame gameTime) Parameters gameTime IGame The IGame interface providing access to game timing information. Returns float The time elapsed since the last game update in seconds. DeltaTimeAccurate(IGame) Gets the time elapsed since the last game update in seconds as a double-precision floating-point number. public static double DeltaTimeAccurate(this IGame gameTime) Parameters gameTime IGame The IGame interface providing access to game timing information. Returns double The time elapsed since the last game update in seconds with double precision. FPS(Game) Retrieves the current frames per second (FPS) rate of the running game. public static float FPS(this Game game) Parameters game Game The game instance from which to obtain the FPS rate. Returns float The current FPS rate of the game. Run(Game, GameContext?, Action<Game>?, Action<Game>?) Initializes the game, starts the game loop, and handles game events. public static void Run(this Game game, GameContext? context = null, Action<Game>? start = null, Action<Game>? update = null) Parameters game Game The Game instance to initialize and run. context GameContext Optional GameContext to be used. Defaults to null. start Action<Game> Optional action to execute at the start of the game. Takes the game as a parameter. update Action<Game> Optional action to execute during each game loop iteration. Takes the game as a parameter. Remarks This method performs the following actions: Schedules the root script for execution. Initiates the game loop by calling Run(GameContext). Invokes the provided start and update delegates. Run(Game, GameContext?, Action<Scene>?, Action<Scene, GameTime>?) Initializes the game, starts the game loop, and handles game events. public static void Run(this Game game, GameContext? context = null, Action<Scene>? start = null, Action<Scene, GameTime>? update = null) Parameters game Game The Game instance to initialize and run. context GameContext Optional GameContext to be used. Defaults to null. start Action<Scene> Optional action to execute at the start of the game. Takes the root scene as a parameter. update Action<Scene, GameTime> Optional action to execute during each game loop iteration. Takes the root scene and game time as parameters. Remarks This method performs the following actions: Schedules the root script for execution. Initiates the game loop by calling Run(GameContext). Invokes the provided start and update delegates. SetMaxFPS(IGame, int) Sets the maximum frames per second (FPS) rate for the game. Set to 0 for max possible FPS. public static void SetMaxFPS(this IGame game, int targetFPS) Parameters game IGame targetFPS int SetupBase(Game) Sets up essential components for the game including a GraphicsCompositor, a camera, and a directional light. public static void SetupBase(this Game game) Parameters game Game The Game instance that will receive the base setup. Remarks This method performs the following operations: Adds a default GraphicsCompositor to the game's SceneSystem and applies a clean UI stage. Adds a camera to the game. Adds a directional light to the game. SetupBase2DScene(Game) public static void SetupBase2DScene(this Game game) Parameters game Game SetupBase2DSceneWithBepu(Game) public static void SetupBase2DSceneWithBepu(this Game game) Parameters game Game SetupBase3DScene(Game) Sets up a default 3D scene for the game, similar to creating an empty project through the editor. public static void SetupBase3DScene(this Game game) Parameters game Game The Game instance for which the base 3D scene will be set up. Remarks This method performs the following setup operations in sequence: Adds a default GraphicsCompositor to the game's SceneSystem and applies a clean UI stage. Adds a camera to the game and sets it up with a MouseLookCamera component. Adds a directional light to the game scene. Adds ground geometry to the game scene. SetupBase3DSceneWithBepu(Game) public static void SetupBase3DSceneWithBepu(this Game game) Parameters game Game ShowColliders(Game) Enables the visualization of collider shapes in the game scene. This feature is useful for debugging physics-related issues. public static void ShowColliders(this Game game) Parameters game Game The current game instance. Remarks This method activates the rendering of collider shapes within the physics simulation. It helps to visually inspect and debug the positioning and behaviour of colliders at runtime."
  },
  "api/Stride.CommunityToolkit.Engine.ModelComponentExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Engine.ModelComponentExtensions.html",
    "title": "Class ModelComponentExtensions | Stride Community Toolkit",
    "keywords": "Class ModelComponentExtensions Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll public static class ModelComponentExtensions Inheritance object ModelComponentExtensions Methods GetMeshHWL(ModelComponent) Calculates the height, width, and length of the model represented by the ModelComponent. public static Vector3 GetMeshHWL(this ModelComponent modelComponent) Parameters modelComponent ModelComponent The ModelComponent whose model dimensions are to be calculated. Returns Vector3 A Vector3 representing the height, width, and length of the model. Remarks The dimensions are calculated based on the model's bounding box. The returned Vector3 contains the height (Y-axis), width (X-axis), and length (Z-axis) of the bounding box. GetMeshHeight(ModelComponent) Calculates the height of the model represented by the ModelComponent. public static float GetMeshHeight(this ModelComponent modelComponent) Parameters modelComponent ModelComponent The ModelComponent whose model height is to be calculated. Returns float The height of the model along the Y-axis. Remarks The height is calculated based on the model's bounding box, which encompasses its maximum extent in 3D space. GetMeshVerticesAndIndices(ModelComponent, IGame) Retrieves the vertices and indices from the ModelComponent's mesh data. public static (List<Vector3> vertices, List<int> indices) GetMeshVerticesAndIndices(this ModelComponent model, IGame game) Parameters model ModelComponent The ModelComponent from which to extract mesh data. game IGame The game instance, used to access graphics context for data extraction. Returns (List<Vector3> vertices, List<int> indices) A tuple containing two lists: the first list holds the vertices (as Vector3), and the second list holds the indices (as int). Remarks This method extracts raw vertex and index data from the meshes in the provided ModelComponent. It's useful for operations that require direct access to mesh data, such as custom rendering, collision detection, or physics simulations. Note that this method extracts combined vertex and index data from all meshes in the ModelComponent."
  },
  "api/Stride.CommunityToolkit.Engine.Primitive2DCreationOptions.html": {
    "href": "api/Stride.CommunityToolkit.Engine.Primitive2DCreationOptions.html",
    "title": "Class Primitive2DCreationOptions | Stride Community Toolkit",
    "keywords": "Class Primitive2DCreationOptions Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll public class Primitive2DCreationOptions : PrimitiveCreationOptions Inheritance object PrimitiveCreationOptions Primitive2DCreationOptions Inherited Members PrimitiveCreationOptions.EntityName PrimitiveCreationOptions.Material PrimitiveCreationOptions.IncludeCollider PrimitiveCreationOptions.RenderGroup Properties Depth public float Depth { get; set; } Property Value float PhysicsComponent Gets or sets the physics component to be added to the entity. Defaults to a new instance of RigidbodyComponent. public PhysicsComponent? PhysicsComponent { get; set; } Property Value PhysicsComponent Size Gets or sets the size of the primitive model. If null, default dimensions are used. public Vector2? Size { get; set; } Property Value Vector2?"
  },
  "api/Stride.CommunityToolkit.Engine.Primitive2DCreationOptionsWithBepu.html": {
    "href": "api/Stride.CommunityToolkit.Engine.Primitive2DCreationOptionsWithBepu.html",
    "title": "Class Primitive2DCreationOptionsWithBepu | Stride Community Toolkit",
    "keywords": "Class Primitive2DCreationOptionsWithBepu Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll public class Primitive2DCreationOptionsWithBepu : PrimitiveCreationOptions Inheritance object PrimitiveCreationOptions Primitive2DCreationOptionsWithBepu Inherited Members PrimitiveCreationOptions.EntityName PrimitiveCreationOptions.Material PrimitiveCreationOptions.IncludeCollider PrimitiveCreationOptions.RenderGroup Properties Component Gets or sets the physics component to be added to the entity. public ContainerComponent Component { get; set; } Property Value ContainerComponent Depth public float Depth { get; set; } Property Value float Size Gets or sets the size of the primitive model. If null, default dimensions are used. public Vector2? Size { get; set; } Property Value Vector2?"
  },
  "api/Stride.CommunityToolkit.Engine.Primitive3DCreationOptions.html": {
    "href": "api/Stride.CommunityToolkit.Engine.Primitive3DCreationOptions.html",
    "title": "Class Primitive3DCreationOptions | Stride Community Toolkit",
    "keywords": "Class Primitive3DCreationOptions Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll Provides options for creating a primitive entity in a 3D scene. public class Primitive3DCreationOptions : PrimitiveCreationOptions Inheritance object PrimitiveCreationOptions Primitive3DCreationOptions Inherited Members PrimitiveCreationOptions.EntityName PrimitiveCreationOptions.Material PrimitiveCreationOptions.IncludeCollider PrimitiveCreationOptions.RenderGroup Properties PhysicsComponent Gets or sets the physics component to be added to the entity. Defaults to a new instance of RigidbodyComponent. public PhysicsComponent? PhysicsComponent { get; set; } Property Value PhysicsComponent Size Gets or sets the size of the primitive model. If null, default dimensions are used. public Vector3? Size { get; set; } Property Value Vector3?"
  },
  "api/Stride.CommunityToolkit.Engine.Primitive3DCreationOptionsWithBepu.html": {
    "href": "api/Stride.CommunityToolkit.Engine.Primitive3DCreationOptionsWithBepu.html",
    "title": "Class Primitive3DCreationOptionsWithBepu | Stride Community Toolkit",
    "keywords": "Class Primitive3DCreationOptionsWithBepu Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll Provides options for creating a primitive entity in a 3D scene. public class Primitive3DCreationOptionsWithBepu : PrimitiveCreationOptions Inheritance object PrimitiveCreationOptions Primitive3DCreationOptionsWithBepu Inherited Members PrimitiveCreationOptions.EntityName PrimitiveCreationOptions.Material PrimitiveCreationOptions.IncludeCollider PrimitiveCreationOptions.RenderGroup Properties Component Gets or sets the physics component to be added to the entity. public ContainerComponent Component { get; set; } Property Value ContainerComponent Size Gets or sets the size of the primitive model. If null, default dimensions are used. public Vector3? Size { get; set; } Property Value Vector3?"
  },
  "api/Stride.CommunityToolkit.Engine.PrimitiveCreationOptions.html": {
    "href": "api/Stride.CommunityToolkit.Engine.PrimitiveCreationOptions.html",
    "title": "Class PrimitiveCreationOptions | Stride Community Toolkit",
    "keywords": "Class PrimitiveCreationOptions Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll public abstract class PrimitiveCreationOptions Inheritance object PrimitiveCreationOptions Derived Primitive2DCreationOptions Primitive2DCreationOptionsWithBepu Primitive3DCreationOptions Primitive3DCreationOptionsWithBepu Properties EntityName Gets or sets the name of the entity. public string? EntityName { get; set; } Property Value string IncludeCollider Determines whether to include a collider component in the entity. Defaults to true. public bool IncludeCollider { get; set; } Property Value bool Material Gets or sets the material to be applied to the primitive model. public Material? Material { get; set; } Property Value Material RenderGroup Gets or sets the render group for the entity. Defaults to RenderGroup.Group0. public RenderGroup RenderGroup { get; set; } Property Value RenderGroup"
  },
  "api/Stride.CommunityToolkit.Engine.SceneExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Engine.SceneExtensions.html",
    "title": "Class SceneExtensions | Stride Community Toolkit",
    "keywords": "Class SceneExtensions Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll public static class SceneExtensions Inheritance object SceneExtensions Methods GetCamera(Scene) Gets the first camera in the scene. public static CameraComponent? GetCamera(this Scene scene) Parameters scene Scene Returns CameraComponent GetCamera(Scene, string) Gets the first camera in the scene with the specified Entity name. public static CameraComponent? GetCamera(this Scene scene, string name) Parameters scene Scene name string Returns CameraComponent"
  },
  "api/Stride.CommunityToolkit.Engine.ScriptComponentExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Engine.ScriptComponentExtensions.html",
    "title": "Class ScriptComponentExtensions | Stride Community Toolkit",
    "keywords": "Class ScriptComponentExtensions Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll public static class ScriptComponentExtensions Inheritance object ScriptComponentExtensions Methods DeltaTime(ScriptComponent) Retrieves the time elapsed since the last game update in seconds. public static float DeltaTime(this ScriptComponent scriptComponent) Parameters scriptComponent ScriptComponent The script component used to access game timing information. Returns float The delta time in seconds as a single-precision floating-point number. GetCamera(ScriptComponent) Retrieves the camera named \"Main\" from the GraphicsCompositor. Note that the camera might not be available during the first 2-3 frames. [Obsolete(\"Use GetGCCamera instead or use Scene.GetCamera\")] public static CameraComponent? GetCamera(this ScriptComponent scriptComponent) Parameters scriptComponent ScriptComponent The script component from which to access the GraphicsCompositor. Returns CameraComponent The CameraComponent named \"Main\", if found; otherwise, null. Remarks Ensure that the GraphicsCompositor is initialized with cameras; otherwise, this method will fail. GetCamera(ScriptComponent, string) Retrieves the camera from the GraphicsCompositor with the specified name. Note that the camera might not be available during the first 2-3 frames. [Obsolete(\"Use GetGCCamera instead or use Scene.GetCamera\")] public static CameraComponent? GetCamera(this ScriptComponent scriptComponent, string cameraName) Parameters scriptComponent ScriptComponent The script component from which to access the GraphicsCompositor. cameraName string The name of the camera to retrieve. Returns CameraComponent The CameraComponent with the given name, if found; otherwise, null. Remarks Ensure that the GraphicsCompositor is initialized with cameras; otherwise, this method will fail. GetFirstCamera(ScriptComponent) Gets the first camera from the GraphicsCompositor. Note that the camera might not be available during the first 2-3 frames. [Obsolete(\"Use GetFirstGCCamera instead or use Scene.GetCamera\")] public static CameraComponent GetFirstCamera(this ScriptComponent scriptComponent) Parameters scriptComponent ScriptComponent The script component from which to access the GraphicsCompositor. Returns CameraComponent The CameraComponent with the given name, if found; otherwise, null. Remarks Ensure that the GraphicsCompositor is initialized with cameras; otherwise, this method will fail. GetFirstGCCamera(ScriptComponent) Gets the first camera from the GraphicsCompositor. Note that the camera might not be available during the first 2-3 frames. public static CameraComponent GetFirstGCCamera(this ScriptComponent scriptComponent) Parameters scriptComponent ScriptComponent The script component from which to access the GraphicsCompositor. Returns CameraComponent The CameraComponent with the given name, if found; otherwise, null. Remarks Ensure that the GraphicsCompositor is initialized with cameras; otherwise, this method will fail. GetGCCamera(ScriptComponent) Retrieves the camera named \"Main\" from the GraphicsCompositor. Note that the camera might not be available during the first 2-3 frames. public static CameraComponent? GetGCCamera(this ScriptComponent scriptComponent) Parameters scriptComponent ScriptComponent The script component from which to access the GraphicsCompositor. Returns CameraComponent The CameraComponent named \"Main\", if found; otherwise, null. Remarks Ensure that the GraphicsCompositor is initialized with cameras; otherwise, this method will fail. GetGCCamera(ScriptComponent, string) Retrieves the camera from the GraphicsCompositor with the specified name. Note that the camera might not be available during the first 2-3 frames. public static CameraComponent? GetGCCamera(this ScriptComponent scriptComponent, string cameraName) Parameters scriptComponent ScriptComponent The script component from which to access the GraphicsCompositor. cameraName string The name of the camera to retrieve. Returns CameraComponent The CameraComponent with the given name, if found; otherwise, null. Remarks Ensure that the GraphicsCompositor is initialized with cameras; otherwise, this method will fail."
  },
  "api/Stride.CommunityToolkit.Engine.ScriptSystemExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Engine.ScriptSystemExtensions.html",
    "title": "Class ScriptSystemExtensions | Stride Community Toolkit",
    "keywords": "Class ScriptSystemExtensions Namespace Stride.CommunityToolkit.Engine Assembly Stride.CommunityToolkit.dll public static class ScriptSystemExtensions Inheritance object ScriptSystemExtensions Methods Delay(ScriptSystem, float) Waits for a specified amount of time. public static Task Delay(this ScriptSystem script, float seconds) Parameters script ScriptSystem The script system. seconds float The amount of time to be delayed. Returns Task A Task that represents the time delay. DelayWarped(ScriptSystem, float) Waits for a specified amount of time while taking into account the Update Time factor. public static Task DelayWarped(this ScriptSystem script, float seconds) Parameters script ScriptSystem The script system. seconds float The amount of time to be delayed. Returns Task A Task that represents the time delay. ExecuteInTime(ScriptSystem, float, Action<float>) Continuously executes an action every frame during a specified amount of time. public static Task ExecuteInTime(this ScriptSystem script, float seconds, Action<float> action) Parameters script ScriptSystem The script system. seconds float The duration in seconds. action Action<float> The action that will be executed every frame. Returns Task A Task that represents the execution. ExecuteInWarpedTime(ScriptSystem, float, Action<float>) Continuously executes an action every frame during a specified amount of time while taking into account the Update Time factor. public static Task ExecuteInWarpedTime(this ScriptSystem script, float seconds, Action<float> action) Parameters script ScriptSystem The script system. seconds float The duration in seconds. action Action<float> The action that will be executed every frame. Returns Task A Task that represents the execution."
  },
  "api/Stride.CommunityToolkit.Engine.html": {
    "href": "api/Stride.CommunityToolkit.Engine.html",
    "title": "Namespace Stride.CommunityToolkit.Engine | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Engine Classes AnimationComponentExtensions CameraComponentExtensions CameraDefaults EntityExtensions Provides extension methods for Entity to simplify common operations. GameExtensions Extensions for IGame ModelComponentExtensions Primitive2DCreationOptions Primitive2DCreationOptionsWithBepu Primitive3DCreationOptions Provides options for creating a primitive entity in a 3D scene. Primitive3DCreationOptionsWithBepu Provides options for creating a primitive entity in a 3D scene. PrimitiveCreationOptions SceneExtensions ScriptComponentExtensions ScriptSystemExtensions"
  },
  "api/Stride.CommunityToolkit.Extensions.TextureCanvasExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Extensions.TextureCanvasExtensions.html",
    "title": "Class TextureCanvasExtensions | Stride Community Toolkit",
    "keywords": "Class TextureCanvasExtensions Namespace Stride.CommunityToolkit.Extensions Assembly Stride.CommunityToolkit.dll public static class TextureCanvasExtensions Inheritance object TextureCanvasExtensions Methods CreateTextureCanvas(IServiceRegistry, Size2?, PixelFormat) public static TextureCanvas CreateTextureCanvas(this IServiceRegistry services, Size2? size, PixelFormat pixelFormat = PixelFormat.R8G8B8A8_UNorm) Parameters services IServiceRegistry size Size2? pixelFormat PixelFormat Returns TextureCanvas CreateTextureCanvas(IGame, Size2?, PixelFormat) public static TextureCanvas CreateTextureCanvas(this IGame game, Size2? size, PixelFormat pixelFormat = PixelFormat.R8G8B8A8_UNorm) Parameters game IGame size Size2? pixelFormat PixelFormat Returns TextureCanvas CreateTextureCanvas(RenderContext, Size2?, PixelFormat) public static TextureCanvas CreateTextureCanvas(this RenderContext renderContext, Size2? size, PixelFormat pixelFormat = PixelFormat.R8G8B8A8_UNorm) Parameters renderContext RenderContext size Size2? pixelFormat PixelFormat Returns TextureCanvas"
  },
  "api/Stride.CommunityToolkit.Extensions.TextureExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Extensions.TextureExtensions.html",
    "title": "Class TextureExtensions | Stride Community Toolkit",
    "keywords": "Class TextureExtensions Namespace Stride.CommunityToolkit.Extensions Assembly Stride.CommunityToolkit.dll public static class TextureExtensions Inheritance object TextureExtensions Methods FindAssetSourceDir(string, string) Retrieves the full filename of the Source of an asset. workDir should be your Assets directory. public static string FindAssetSourceDir(string urlName, string workDir) Parameters urlName string workDir string Returns string ReFormat(Texture, GraphicsContext, PixelFormat) Reformats the pixels of a given texture via a rendering to texture approach. public static Texture? ReFormat(this Texture texture, GraphicsContext graphicsContext, PixelFormat pixelFormat = PixelFormat.R8G8B8A8_UNorm) Parameters texture Texture graphicsContext GraphicsContext pixelFormat PixelFormat Returns Texture Resize(Texture, int, int, GraphicsContext, PixelFormat) Resizes and reformats a given texture by rendering it to a new texture with the specified dimensions and pixel format. This is useful for processing textures loaded through Content.Load<Texture>(), which may be compressed and default to a smaller size like 32x32 pixels. To properly resize a compressed texture, ensure it's decompressed by loading the source file from disk before applying this method. public static Texture? Resize(this Texture texture, int width, int height, GraphicsContext graphicsContext, PixelFormat pixelFormat = PixelFormat.R8G8B8A8_UNorm) Parameters texture Texture The original texture to resize. width int The desired width of the resized texture. height int The desired height of the resized texture. graphicsContext GraphicsContext The graphics context to use for rendering. pixelFormat PixelFormat The pixel format for the resized texture (default is PixelFormat.R8G8B8A8_UNorm). Returns Texture A new texture with the specified width, height, and pixel format, or null if the operation fails or the original texture has invalid dimensions."
  },
  "api/Stride.CommunityToolkit.Extensions.html": {
    "href": "api/Stride.CommunityToolkit.Extensions.html",
    "title": "Namespace Stride.CommunityToolkit.Extensions | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Extensions Classes TextureCanvasExtensions TextureExtensions"
  },
  "api/Stride.CommunityToolkit.Graphics.GraphicsDeviceExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Graphics.GraphicsDeviceExtensions.html",
    "title": "Class GraphicsDeviceExtensions | Stride Community Toolkit",
    "keywords": "Class GraphicsDeviceExtensions Namespace Stride.CommunityToolkit.Graphics Assembly Stride.CommunityToolkit.dll public static class GraphicsDeviceExtensions Inheritance object GraphicsDeviceExtensions Methods GetWindowSize(GraphicsDevice) Retrieves the current window size of the GraphicsDevice as a Int2. public static Int2 GetWindowSize(this GraphicsDevice graphics) Parameters graphics GraphicsDevice The GraphicsDevice for which the window size should be retrieved. Returns Int2 An Int2 representing the current window size, where X is the width and Y is the height."
  },
  "api/Stride.CommunityToolkit.Graphics.html": {
    "href": "api/Stride.CommunityToolkit.Graphics.html",
    "title": "Namespace Stride.CommunityToolkit.Graphics | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Graphics Classes GraphicsDeviceExtensions"
  },
  "api/Stride.CommunityToolkit.Physics.HeightmapExtensions.FloatRGBAConverter.html": {
    "href": "api/Stride.CommunityToolkit.Physics.HeightmapExtensions.FloatRGBAConverter.html",
    "title": "Struct HeightmapExtensions.FloatRGBAConverter | Stride Community Toolkit",
    "keywords": "Struct HeightmapExtensions.FloatRGBAConverter Namespace Stride.CommunityToolkit.Physics Assembly Stride.CommunityToolkit.dll Float from bytes and back, like the Union structure from c++ public struct HeightmapExtensions.FloatRGBAConverter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() Constructors FloatRGBAConverter(byte, byte, byte, byte) public FloatRGBAConverter(byte r, byte g, byte b, byte a) Parameters r byte g byte b byte a byte FloatRGBAConverter(float) public FloatRGBAConverter(float @float) Parameters float float Fields A public byte A Field Value byte B public byte B Field Value byte Float public float Float Field Value float G public byte G Field Value byte R public byte R Field Value byte"
  },
  "api/Stride.CommunityToolkit.Physics.HeightmapExtensions.VertexTypePosTexNormColor.html": {
    "href": "api/Stride.CommunityToolkit.Physics.HeightmapExtensions.VertexTypePosTexNormColor.html",
    "title": "Struct HeightmapExtensions.VertexTypePosTexNormColor | Stride Community Toolkit",
    "keywords": "Struct HeightmapExtensions.VertexTypePosTexNormColor Namespace Stride.CommunityToolkit.Physics Assembly Stride.CommunityToolkit.dll Custom vertex type so that we can generate tangents for supporting normal maps public struct HeightmapExtensions.VertexTypePosTexNormColor : IEquatable<HeightmapExtensions.VertexTypePosTexNormColor>, IVertex Implements IEquatable<HeightmapExtensions.VertexTypePosTexNormColor> IVertex Constructors VertexTypePosTexNormColor(Vector3, Vector3, Vector3, Vector2, Vector4) public VertexTypePosTexNormColor(Vector3 position, Vector3 normal, Vector3 tangent, Vector2 texCoord1, Vector4 color1) Parameters position Vector3 normal Vector3 tangent Vector3 texCoord1 Vector2 color1 Vector4 Fields Color public Vector4 Color Field Value Vector4 Layout public static readonly VertexDeclaration Layout Field Value VertexDeclaration Normal public Vector3 Normal Field Value Vector3 Position public Vector3 Position Field Value Vector3 Size public static readonly int Size Field Value int Tangent public Vector3 Tangent Field Value Vector3 TexCoord public Vector2 TexCoord Field Value Vector2 Methods Equals(VertexTypePosTexNormColor) Indicates whether the current object is equal to another object of the same type. public bool Equals(HeightmapExtensions.VertexTypePosTexNormColor other) Parameters other HeightmapExtensions.VertexTypePosTexNormColor An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. FlipWinding() Flip the vertex winding. public void FlipWinding() GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetLayout() Gets the layout of the vertex. public VertexDeclaration GetLayout() Returns VertexDeclaration ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(VertexTypePosTexNormColor, VertexTypePosTexNormColor) public static bool operator ==(HeightmapExtensions.VertexTypePosTexNormColor left, HeightmapExtensions.VertexTypePosTexNormColor right) Parameters left HeightmapExtensions.VertexTypePosTexNormColor right HeightmapExtensions.VertexTypePosTexNormColor Returns bool operator !=(VertexTypePosTexNormColor, VertexTypePosTexNormColor) public static bool operator !=(HeightmapExtensions.VertexTypePosTexNormColor left, HeightmapExtensions.VertexTypePosTexNormColor right) Parameters left HeightmapExtensions.VertexTypePosTexNormColor right HeightmapExtensions.VertexTypePosTexNormColor Returns bool"
  },
  "api/Stride.CommunityToolkit.Physics.HeightmapExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Physics.HeightmapExtensions.html",
    "title": "Class HeightmapExtensions | Stride Community Toolkit",
    "keywords": "Class HeightmapExtensions Namespace Stride.CommunityToolkit.Physics Assembly Stride.CommunityToolkit.dll public static class HeightmapExtensions Inheritance object HeightmapExtensions Fields HeightMultiplier Used to distinguish between Grey scale heightmaps HeightMultiplier=255.0f (yields a byte 0-255) or float heightmaps HeightMultiplier=10000.0f (based on a short -32,768 to 32,767, sum yields 65,535 levels for much smoother maps). public const float HeightMultiplier = 255 Field Value float Methods AsStrideColor(short) public static Color AsStrideColor(this short val) Parameters val short Returns Color GetHeightAt(Heightmap, int, int) public static float GetHeightAt(this Heightmap heightmap, int x, int y) Parameters heightmap Heightmap x int y int Returns float GetHeightIndex(Heightmap, int, int) public static int GetHeightIndex(this Heightmap heightmap, int x, int y) Parameters heightmap Heightmap x int y int Returns int GetNormal(Heightmap, int, int) public static Vector3 GetNormal(this Heightmap heightmap, int x, int y) Parameters heightmap Heightmap x int y int Returns Vector3 GetTangent(Heightmap, int, int) public static Vector3 GetTangent(this Heightmap heightmap, int x, int z) Parameters heightmap Heightmap x int z int Returns Vector3 IntersectsRay(Heightmap, Ray, out Vector3, float, float) public static bool IntersectsRay(this Heightmap heightmap, Ray ray, out Vector3 point, float m_QuadSideWidthX = 1, float m_QuadSideWidthZ = 1) Parameters heightmap Heightmap ray Ray point Vector3 m_QuadSideWidthX float m_QuadSideWidthZ float Returns bool IsValidCoordinate(Heightmap, int, int) public static bool IsValidCoordinate(this Heightmap heightmap, int x, int y) Parameters heightmap Heightmap x int y int Returns bool ToFloats(Heightmap) public static float[] ToFloats(this Heightmap heightmap) Parameters heightmap Heightmap Returns float[] ToMesh(Heightmap, GraphicsDevice, float, float, float, out Vector3[], int) Creates the terrain mesh from a given heightmap. Tessellation divides the quad numbers. public static Mesh ToMesh(this Heightmap heightmap, GraphicsDevice graphicsDevice, float m_QuadSideWidthX, float m_QuadSideWidthZ, float TEXTURE_REPEAT, out Vector3[] terrainPoints, int tessellation) Parameters heightmap Heightmap graphicsDevice GraphicsDevice m_QuadSideWidthX float m_QuadSideWidthZ float TEXTURE_REPEAT float terrainPoints Vector3[] tessellation int Returns Mesh ToTexture(Heightmap, GraphicsDevice, CommandList) public static Texture ToTexture(this Heightmap heightmap, GraphicsDevice graphicsDevice, CommandList commandList) Parameters heightmap Heightmap graphicsDevice GraphicsDevice commandList CommandList Returns Texture ToWorldPoints(Heightmap, float, float) public static Vector3[] ToWorldPoints(this Heightmap heightmap, float m_QuadSideWidthX, float m_QuadSideWidthZ) Parameters heightmap Heightmap m_QuadSideWidthX float m_QuadSideWidthZ float Returns Vector3[]"
  },
  "api/Stride.CommunityToolkit.Physics.SimulationExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Physics.SimulationExtensions.html",
    "title": "Class SimulationExtensions | Stride Community Toolkit",
    "keywords": "Class SimulationExtensions Namespace Stride.CommunityToolkit.Physics Assembly Stride.CommunityToolkit.dll public static class SimulationExtensions Inheritance object SimulationExtensions Methods Raycast(Simulation, Entity, Vector3, float, CollisionFilterGroupFlags, EFlags) A Raycast method based on the example in the fps demo public static HitResult Raycast(this Simulation simulation, Entity entityPosition, Vector3 direction, float length = 1, CollisionFilterGroupFlags collisionFlags = CollisionFilterGroupFlags.AllFilter, EFlags eFlags = EFlags.None) Parameters simulation Simulation entityPosition Entity direction Vector3 length float collisionFlags CollisionFilterGroupFlags eFlags EFlags Returns HitResult Raycast(Simulation, Entity, float, CollisionFilterGroupFlags, EFlags) A Raycast method based on the example in the fps demo Make sure you are using the actual rotating Entity otherwise you will waste hours like I did debugging a non issue public static HitResult Raycast(this Simulation simulation, Entity entityPosition, float length = 1, CollisionFilterGroupFlags collisionFlags = CollisionFilterGroupFlags.AllFilter, EFlags eFlags = EFlags.None) Parameters simulation Simulation entityPosition Entity length float collisionFlags CollisionFilterGroupFlags eFlags EFlags Returns HitResult"
  },
  "api/Stride.CommunityToolkit.Physics.html": {
    "href": "api/Stride.CommunityToolkit.Physics.html",
    "title": "Namespace Stride.CommunityToolkit.Physics | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Physics Classes HeightmapExtensions SimulationExtensions Structs HeightmapExtensions.FloatRGBAConverter Float from bytes and back, like the Union structure from c++ HeightmapExtensions.VertexTypePosTexNormColor Custom vertex type so that we can generate tangents for supporting normal maps"
  },
  "api/Stride.CommunityToolkit.Rendering.Compositing.GraphicsCompositorExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Compositing.GraphicsCompositorExtensions.html",
    "title": "Class GraphicsCompositorExtensions | Stride Community Toolkit",
    "keywords": "Class GraphicsCompositorExtensions Namespace Stride.CommunityToolkit.Rendering.Compositing Assembly Stride.CommunityToolkit.dll public static class GraphicsCompositorExtensions Inheritance object GraphicsCompositorExtensions Methods AddCleanUIStage(GraphicsCompositor) Adds a UI render stage and white/clean text effect to the given GraphicsCompositor. This alters the GraphicsCompositor's PostProcessingEffects, RenderStage, and RenderFeature. public static GraphicsCompositor AddCleanUIStage(this GraphicsCompositor graphicsCompositor) Parameters graphicsCompositor GraphicsCompositor The GraphicsCompositor to modify. Returns GraphicsCompositor Returns the modified GraphicsCompositor instance, allowing for method chaining. Examples game.AddGraphicsCompositor().AddCleanUIStage(); AddImmediateDebugRenderFeature(GraphicsCompositor) public static void AddImmediateDebugRenderFeature(this GraphicsCompositor graphicsCompositor) Parameters graphicsCompositor GraphicsCompositor AddSceneRenderer(GraphicsCompositor, SceneRendererBase) Adds a new scene renderer to the given GraphicsCompositor's game. If the game is already a collection of scene renderers, the new scene renderer is added to that collection. Otherwise, a new scene renderer collection is created to house both the existing game and the new scene renderer. public static GraphicsCompositor AddSceneRenderer(this GraphicsCompositor graphicsCompositor, SceneRendererBase sceneRenderer) Parameters graphicsCompositor GraphicsCompositor The GraphicsCompositor to which the scene renderer will be added. sceneRenderer SceneRendererBase The new SceneRendererBase instance that will be added to the GraphicsCompositor's game. Returns GraphicsCompositor Returns the modified GraphicsCompositor instance, allowing for method chaining. Remarks This method will either add the scene renderer to an existing SceneRendererCollection or create a new one to house both the existing game and the new scene renderer. In either case, the GraphicsCompositor's game will end up with the new scene renderer added. TryGetRenderStage(GraphicsCompositor, string, out RenderStage) public static bool TryGetRenderStage(this GraphicsCompositor graphicsCompositor, string effectName, out RenderStage renderFeature) Parameters graphicsCompositor GraphicsCompositor effectName string renderFeature RenderStage Returns bool"
  },
  "api/Stride.CommunityToolkit.Rendering.Compositing.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Compositing.html",
    "title": "Namespace Stride.CommunityToolkit.Rendering.Compositing | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Rendering.Compositing Classes GraphicsCompositorExtensions"
  },
  "api/Stride.CommunityToolkit.Rendering.Gizmos.AxialGizmo.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Gizmos.AxialGizmo.html",
    "title": "Class AxialGizmo | Stride Community Toolkit",
    "keywords": "Class AxialGizmo Namespace Stride.CommunityToolkit.Rendering.Gizmos Assembly Stride.CommunityToolkit.dll public abstract class AxialGizmo Inheritance object AxialGizmo Derived TranslationGizmo Constructors AxialGizmo(GraphicsDevice, Color?, Color?, Color?) protected AxialGizmo(GraphicsDevice graphicsDevice, Color? redColor = null, Color? greenColor = null, Color? blueColor = null) Parameters graphicsDevice GraphicsDevice redColor Color? greenColor Color? blueColor Color? Fields GizmoDefaultSize protected const float GizmoDefaultSize = 133 Field Value float GizmoExtremitySize protected const float GizmoExtremitySize = 0.15 Field Value float GizmoOriginScale protected const float GizmoOriginScale = 1.33 Field Value float GizmoPlaneLength protected const float GizmoPlaneLength = 0.25 Field Value float GizmoTessellation protected const int GizmoTessellation = 64 Field Value int Properties BlueUniformMaterial A uniform blue material protected Material? BlueUniformMaterial { get; } Property Value Material DefaultOriginMaterial protected Material? DefaultOriginMaterial { get; } Property Value Material GraphicsDevice Gets the graphics device. protected GraphicsDevice GraphicsDevice { get; } Property Value GraphicsDevice The graphics device. GreenUniformMaterial A uniform green material protected Material? GreenUniformMaterial { get; } Property Value Material RedUniformMaterial A uniform red material protected Material? RedUniformMaterial { get; } Property Value Material RenderGroup Gets or sets the entity group of the Gizmo public RenderGroup RenderGroup { get; protected set; } Property Value RenderGroup Methods Create() protected virtual Entity? Create() Returns Entity CreateEmissiveColorMaterial(Color) Creates an emissive color material. protected Material CreateEmissiveColorMaterial(Color color) Parameters color Color The color of the material Returns Material the material GetBlueColor() protected Color GetBlueColor() Returns Color GetGreenColor() protected Color GetGreenColor() Returns Color GetRedColor() protected Color GetRedColor() Returns Color"
  },
  "api/Stride.CommunityToolkit.Rendering.Gizmos.GizmoEmissiveColorMaterial.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Gizmos.GizmoEmissiveColorMaterial.html",
    "title": "Class GizmoEmissiveColorMaterial | Stride Community Toolkit",
    "keywords": "Class GizmoEmissiveColorMaterial Namespace Stride.CommunityToolkit.Rendering.Gizmos Assembly Stride.CommunityToolkit.dll public static class GizmoEmissiveColorMaterial Inheritance object GizmoEmissiveColorMaterial Methods Create(GraphicsDevice, Color, float) public static Material Create(GraphicsDevice device, Color color, float intensity = 1) Parameters device GraphicsDevice color Color intensity float Returns Material UpdateColor(GraphicsDevice, Material, Color, float) public static void UpdateColor(GraphicsDevice device, Material material, Color color, float intensity = 1) Parameters device GraphicsDevice material Material color Color intensity float"
  },
  "api/Stride.CommunityToolkit.Rendering.Gizmos.GizmoUniformColorMaterial.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Gizmos.GizmoUniformColorMaterial.html",
    "title": "Class GizmoUniformColorMaterial | Stride Community Toolkit",
    "keywords": "Class GizmoUniformColorMaterial Namespace Stride.CommunityToolkit.Rendering.Gizmos Assembly Stride.CommunityToolkit.dll public static class GizmoUniformColorMaterial Inheritance object GizmoUniformColorMaterial Methods Create(GraphicsDevice, Color) public static Material Create(GraphicsDevice device, Color color) Parameters device GraphicsDevice color Color Returns Material UpdateColor(GraphicsDevice, Material, Color) public static void UpdateColor(GraphicsDevice device, Material material, Color color) Parameters device GraphicsDevice material Material color Color"
  },
  "api/Stride.CommunityToolkit.Rendering.Gizmos.Letter3D.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Gizmos.Letter3D.html",
    "title": "Class Letter3D | Stride Community Toolkit",
    "keywords": "Class Letter3D Namespace Stride.CommunityToolkit.Rendering.Gizmos Assembly Stride.CommunityToolkit.dll public class Letter3D Inheritance object Letter3D Constructors Letter3D(GraphicsDevice, bool) public Letter3D(GraphicsDevice graphicsDevice, bool rotateAxisNames) Parameters graphicsDevice GraphicsDevice rotateAxisNames bool Methods CreateLetterX() public Entity CreateLetterX() Returns Entity CreateLetterY() public Entity CreateLetterY() Returns Entity CreateLetterZ() public Entity CreateLetterZ() Returns Entity"
  },
  "api/Stride.CommunityToolkit.Rendering.Gizmos.LightDirectionalGizmo.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Gizmos.LightDirectionalGizmo.html",
    "title": "Class LightDirectionalGizmo | Stride Community Toolkit",
    "keywords": "Class LightDirectionalGizmo Namespace Stride.CommunityToolkit.Rendering.Gizmos Assembly Stride.CommunityToolkit.dll public class LightDirectionalGizmo Inheritance object LightDirectionalGizmo Constructors LightDirectionalGizmo(GraphicsDevice, Color?) public LightDirectionalGizmo(GraphicsDevice graphicsDevice, Color? color = null) Parameters graphicsDevice GraphicsDevice color Color? Fields GizmoTessellation protected const int GizmoTessellation = 64 Field Value int Methods Create(Entity) public Entity Create(Entity root) Parameters root Entity Returns Entity"
  },
  "api/Stride.CommunityToolkit.Rendering.Gizmos.TranslationGizmo.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Gizmos.TranslationGizmo.html",
    "title": "Class TranslationGizmo | Stride Community Toolkit",
    "keywords": "Class TranslationGizmo Namespace Stride.CommunityToolkit.Rendering.Gizmos Assembly Stride.CommunityToolkit.dll public class TranslationGizmo : AxialGizmo Inheritance object AxialGizmo TranslationGizmo Inherited Members AxialGizmo.RenderGroup AxialGizmo.GraphicsDevice AxialGizmo.GizmoTessellation AxialGizmo.GizmoExtremitySize AxialGizmo.GizmoOriginScale AxialGizmo.GizmoPlaneLength AxialGizmo.GizmoDefaultSize AxialGizmo.DefaultOriginMaterial AxialGizmo.RedUniformMaterial AxialGizmo.GreenUniformMaterial AxialGizmo.BlueUniformMaterial AxialGizmo.Create() AxialGizmo.CreateEmissiveColorMaterial(Color) AxialGizmo.GetRedColor() AxialGizmo.GetGreenColor() AxialGizmo.GetBlueColor() Constructors TranslationGizmo(GraphicsDevice) public TranslationGizmo(GraphicsDevice graphicsDevice) Parameters graphicsDevice GraphicsDevice TranslationGizmo(GraphicsDevice, Color?, Color?, Color?) public TranslationGizmo(GraphicsDevice graphicsDevice, Color? xColor = null, Color? yColor = null, Color? zColor = null) Parameters graphicsDevice GraphicsDevice xColor Color? yColor Color? zColor Color? Methods Create(Entity, bool, bool) public void Create(Entity entity, bool showAxisName = false, bool rotateAxisNames = true) Parameters entity Entity showAxisName bool rotateAxisNames bool Create(Scene) public Entity Create(Scene scene) Parameters scene Scene Returns Entity CreateUniformColorMaterial(Color) protected Material CreateUniformColorMaterial(Color color) Parameters color Color Returns Material GetAxisDefaultMaterial(int) protected Material? GetAxisDefaultMaterial(int axisIndex) Parameters axisIndex int Returns Material"
  },
  "api/Stride.CommunityToolkit.Rendering.Gizmos.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Gizmos.html",
    "title": "Namespace Stride.CommunityToolkit.Rendering.Gizmos | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Rendering.Gizmos Classes AxialGizmo GizmoEmissiveColorMaterial GizmoUniformColorMaterial Letter3D LightDirectionalGizmo TranslationGizmo"
  },
  "api/Stride.CommunityToolkit.Rendering.ProceduralModels.Primitive2DModelType.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.ProceduralModels.Primitive2DModelType.html",
    "title": "Enum Primitive2DModelType | Stride Community Toolkit",
    "keywords": "Enum Primitive2DModelType Namespace Stride.CommunityToolkit.Rendering.ProceduralModels Assembly Stride.CommunityToolkit.dll public enum Primitive2DModelType Fields Capsule = 0 Circle = 1 Polygon = 2 Quad = 3 Rectangle = 4 Square = 5 Triangle = 6"
  },
  "api/Stride.CommunityToolkit.Rendering.ProceduralModels.PrimitiveModelType.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.ProceduralModels.PrimitiveModelType.html",
    "title": "Enum PrimitiveModelType | Stride Community Toolkit",
    "keywords": "Enum PrimitiveModelType Namespace Stride.CommunityToolkit.Rendering.ProceduralModels Assembly Stride.CommunityToolkit.dll Specifies the type of primitive model to be created. Available options: Sphere, Cube, Cylinder, Torus, Plane, InfinitePlane, Teapot, Cone, Capsule. Source Stride.Assets.Presentation.Preview. public enum PrimitiveModelType Fields Capsule = 0 Cone = 1 Cube = 2 Cylinder = 3 InfinitePlane = 4 Plane = 5 RectangularPrism = 6 Sphere = 7 Teapot = 8 Torus = 9 TriangularPrism = 10 Remarks This enumeration provides a variety of basic geometric shapes that can be utilized for creating 3D models in the game."
  },
  "api/Stride.CommunityToolkit.Rendering.ProceduralModels.Procedural2DModelBuilder.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.ProceduralModels.Procedural2DModelBuilder.html",
    "title": "Class Procedural2DModelBuilder | Stride Community Toolkit",
    "keywords": "Class Procedural2DModelBuilder Namespace Stride.CommunityToolkit.Rendering.ProceduralModels Assembly Stride.CommunityToolkit.dll public static class Procedural2DModelBuilder Inheritance object Procedural2DModelBuilder Methods Build(Primitive2DModelType, Vector2?, float) Generates a procedural model based on the specified type and size. public static PrimitiveProceduralModelBase Build(Primitive2DModelType type, Vector2? size = null, float depth = 0) Parameters type Primitive2DModelType The type of primitive model to create. size Vector2? The size parameters for the model, or null to use default size values. The dimensions in the Vector3 are used in the order X, Y, Z. depth float Returns PrimitiveProceduralModelBase A primitive procedural model of the specified type, with dimensions specified by size or default dimensions if size is null. Remarks If size is null, default dimensions are used for the model."
  },
  "api/Stride.CommunityToolkit.Rendering.ProceduralModels.Procedural3DModelBuilder.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.ProceduralModels.Procedural3DModelBuilder.html",
    "title": "Class Procedural3DModelBuilder | Stride Community Toolkit",
    "keywords": "Class Procedural3DModelBuilder Namespace Stride.CommunityToolkit.Rendering.ProceduralModels Assembly Stride.CommunityToolkit.dll public static class Procedural3DModelBuilder Inheritance object Procedural3DModelBuilder Methods Build(PrimitiveModelType, Vector3?) Generates a procedural model based on the specified type and size. public static PrimitiveProceduralModelBase Build(PrimitiveModelType type, Vector3? size = null) Parameters type PrimitiveModelType The type of primitive model to create. size Vector3? The size parameters for the model, or null to use default size values. The dimensions in the Vector3 are used in the order X, Y, Z. Returns PrimitiveProceduralModelBase A primitive procedural model of the specified type, with dimensions specified by size or default dimensions if size is null. Remarks If size is null, default dimensions are used for the model."
  },
  "api/Stride.CommunityToolkit.Rendering.ProceduralModels.SquareProceduralModel.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.ProceduralModels.SquareProceduralModel.html",
    "title": "Class SquareProceduralModel | Stride Community Toolkit",
    "keywords": "Class SquareProceduralModel Namespace Stride.CommunityToolkit.Rendering.ProceduralModels Assembly Stride.CommunityToolkit.dll public class SquareProceduralModel : PrimitiveProceduralModelBase, IProceduralModel Inheritance object PrimitiveProceduralModelBase SquareProceduralModel Implements IProceduralModel Inherited Members PrimitiveProceduralModelBase.Scale PrimitiveProceduralModelBase.SetMaterial(string, Material) PrimitiveProceduralModelBase.Generate(IServiceRegistry) PrimitiveProceduralModelBase.Generate(IServiceRegistry, Model) PrimitiveProceduralModelBase.UvScale PrimitiveProceduralModelBase.LocalOffset PrimitiveProceduralModelBase.NumberOfTextureCoordinates PrimitiveProceduralModelBase.MaterialInstance PrimitiveProceduralModelBase.MaterialInstances Properties Size public Vector2 Size { get; set; } Property Value Vector2 Methods CreatePrimitiveMeshData() protected override GeometricMeshData<VertexPositionNormalTexture> CreatePrimitiveMeshData() Returns GeometricMeshData<VertexPositionNormalTexture> New(Vector2, float, float, bool) public static GeometricMeshData<VertexPositionNormalTexture> New(Vector2 size, float uScale = 1, float vScale = 1, bool toLeftHanded = false) Parameters size Vector2 uScale float vScale float toLeftHanded bool Returns GeometricMeshData<VertexPositionNormalTexture>"
  },
  "api/Stride.CommunityToolkit.Rendering.ProceduralModels.TriangleProceduralModel.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.ProceduralModels.TriangleProceduralModel.html",
    "title": "Class TriangleProceduralModel | Stride Community Toolkit",
    "keywords": "Class TriangleProceduralModel Namespace Stride.CommunityToolkit.Rendering.ProceduralModels Assembly Stride.CommunityToolkit.dll public class TriangleProceduralModel : PrimitiveProceduralModelBase, IProceduralModel Inheritance object PrimitiveProceduralModelBase TriangleProceduralModel Implements IProceduralModel Inherited Members PrimitiveProceduralModelBase.Scale PrimitiveProceduralModelBase.SetMaterial(string, Material) PrimitiveProceduralModelBase.Generate(IServiceRegistry) PrimitiveProceduralModelBase.Generate(IServiceRegistry, Model) PrimitiveProceduralModelBase.UvScale PrimitiveProceduralModelBase.LocalOffset PrimitiveProceduralModelBase.NumberOfTextureCoordinates PrimitiveProceduralModelBase.MaterialInstance PrimitiveProceduralModelBase.MaterialInstances Properties Size public Vector2 Size { get; set; } Property Value Vector2 Methods CreatePrimitiveMeshData() protected override GeometricMeshData<VertexPositionNormalTexture> CreatePrimitiveMeshData() Returns GeometricMeshData<VertexPositionNormalTexture> New(Vector2, float, float, bool) public static GeometricMeshData<VertexPositionNormalTexture> New(Vector2 size, float uScale = 1, float vScale = 1, bool toLeftHanded = false) Parameters size Vector2 uScale float vScale float toLeftHanded bool Returns GeometricMeshData<VertexPositionNormalTexture>"
  },
  "api/Stride.CommunityToolkit.Rendering.ProceduralModels.TriangularPrismProceduralModel.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.ProceduralModels.TriangularPrismProceduralModel.html",
    "title": "Class TriangularPrismProceduralModel | Stride Community Toolkit",
    "keywords": "Class TriangularPrismProceduralModel Namespace Stride.CommunityToolkit.Rendering.ProceduralModels Assembly Stride.CommunityToolkit.dll A triangular prism with a triangular face visible from the side. public class TriangularPrismProceduralModel : PrimitiveProceduralModelBase, IProceduralModel Inheritance object PrimitiveProceduralModelBase TriangularPrismProceduralModel Implements IProceduralModel Inherited Members PrimitiveProceduralModelBase.Scale PrimitiveProceduralModelBase.SetMaterial(string, Material) PrimitiveProceduralModelBase.Generate(IServiceRegistry) PrimitiveProceduralModelBase.Generate(IServiceRegistry, Model) PrimitiveProceduralModelBase.UvScale PrimitiveProceduralModelBase.LocalOffset PrimitiveProceduralModelBase.NumberOfTextureCoordinates PrimitiveProceduralModelBase.MaterialInstance PrimitiveProceduralModelBase.MaterialInstances Properties Size public Vector3 Size { get; set; } Property Value Vector3 Methods CreatePrimitiveMeshData() protected override GeometricMeshData<VertexPositionNormalTexture> CreatePrimitiveMeshData() Returns GeometricMeshData<VertexPositionNormalTexture> New(Vector3, float, float, bool) Creates a triangular prism. public static GeometricMeshData<VertexPositionNormalTexture> New(Vector3 size, float uScale = 1, float vScale = 1, bool toLeftHanded = false) Parameters size Vector3 uScale float vScale float toLeftHanded bool Returns GeometricMeshData<VertexPositionNormalTexture> A triangular prism."
  },
  "api/Stride.CommunityToolkit.Rendering.ProceduralModels.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.ProceduralModels.html",
    "title": "Namespace Stride.CommunityToolkit.Rendering.ProceduralModels | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Rendering.ProceduralModels Classes Procedural2DModelBuilder Procedural3DModelBuilder SquareProceduralModel TriangleProceduralModel TriangularPrismProceduralModel A triangular prism with a triangular face visible from the side. Enums Primitive2DModelType PrimitiveModelType Specifies the type of primitive model to be created. Available options: Sphere, Cube, Cylinder, Torus, Plane, InfinitePlane, Teapot, Cone, Capsule. Source Stride.Assets.Presentation.Preview."
  },
  "api/Stride.CommunityToolkit.Rendering.Utilities.IndexingType.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Utilities.IndexingType.html",
    "title": "Enum IndexingType | Stride Community Toolkit",
    "keywords": "Enum IndexingType Namespace Stride.CommunityToolkit.Rendering.Utilities Assembly Stride.CommunityToolkit.dll public enum IndexingType Fields Int16 = 2 Use a short for vertex indices Int32 = 4 Use a int for vertex indices None = 0 Do not use vertex indexing"
  },
  "api/Stride.CommunityToolkit.Rendering.Utilities.MeshBuilder.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Utilities.MeshBuilder.html",
    "title": "Class MeshBuilder | Stride Community Toolkit",
    "keywords": "Class MeshBuilder Namespace Stride.CommunityToolkit.Rendering.Utilities Assembly Stride.CommunityToolkit.dll A utility class for building meshes by defining vertex elements with different data types and primitives types. public class MeshBuilder : IDisposable Inheritance object MeshBuilder Implements IDisposable Properties IndexCount The current index count public int IndexCount { get; } Property Value int IndexType The selected index type (default: None) public IndexingType IndexType { get; init; } Property Value IndexingType PrimitiveType The selected primitive type (default: TriangleList) public PrimitiveType PrimitiveType { get; init; } Property Value PrimitiveType VertexCount The current vertex count public int VertexCount { get; } Property Value int VertexElements The vertex elements including offsets public IReadOnlyList<VertexElementWithOffset> VertexElements { get; } Property Value IReadOnlyList<VertexElementWithOffset> Methods AddIndex(int) Adds a new vertex index public void AddIndex(int vertexIndex) Parameters vertexIndex int The vertex index Exceptions ArgumentOutOfRangeException The vertex index was outside the range of the currently added vertices ArgumentOutOfRangeException The vertex index was outside the range of the selected indexing mode InvalidOperationException The mesh builder isn't configured to use indices AddVertex() Adds a new vertex public int AddVertex() Returns int The vertex index (Can be used in GetElement<T>(int, int) and SetElement<T>(int, int, T)) Clear() Clears all buffers and elements configured in this instance public void Clear() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetElement<T>(int) Gets the value for the specified element index public T GetElement<T>(int elementIndex) where T : unmanaged Parameters elementIndex int The element index Returns T The element at the element index Type Parameters T The element type to retrieve Remarks This overload always target's the last vertex index and is a convenience version of GetElement<T>(int, int) Exceptions ArgumentOutOfRangeException The vertex index was outside the range of the currently added vertices ArgumentOutOfRangeException The element index was outside the range of the currently added elements ArgumentException The size of T does not match the type used when defining this element GetElement<T>(int, int) Gets the value for the specified element index public T GetElement<T>(int vertexIndex, int elementIndex) where T : unmanaged Parameters vertexIndex int The vertex index elementIndex int The element index Returns T The element at the element index Type Parameters T The element type to retrieve Exceptions ArgumentOutOfRangeException The vertex index was outside the range of the currently added vertices ArgumentOutOfRangeException The element index was outside the range of the currently added elements ArgumentException The size of T does not match the type used when defining this element SetElement<T>(int, int, T) Sets the value for the specified element index public void SetElement<T>(int vertexIndex, int elementIndex, T value) where T : unmanaged Parameters vertexIndex int The vertex index elementIndex int The element index value T The value to set Type Parameters T The element type to retrieve Exceptions ArgumentOutOfRangeException The vertex index was outside the range of the currently added vertices ArgumentOutOfRangeException The element index was outside the range of the currently added elements ArgumentException The size of T does not match the type used when defining this element SetElement<T>(int, T) Sets the value for the specified element index public void SetElement<T>(int elementIndex, T value) where T : unmanaged Parameters elementIndex int The element index value T The value to set Type Parameters T The element type to retrieve Remarks This overload always target's the last vertex index and is a convenience version of SetElement<T>(int, int, T) Exceptions ArgumentOutOfRangeException The vertex index was outside the range of the currently added vertices ArgumentOutOfRangeException The element index was outside the range of the currently added elements ArgumentException The size of T does not match the type used when defining this element ToMeshDraw(GraphicsDevice, bool) Creates a new mesh draw instance public MeshDraw ToMeshDraw(GraphicsDevice device, bool clear = true) Parameters device GraphicsDevice The graphics device clear bool Determines if the mesh builder should be reset after this call Returns MeshDraw A mesh draw instance Exceptions InvalidOperationException The primitive type was not set to a valid value WithBiTangent<T>(int, string, PixelFormat) Registers a new vertex element public int WithBiTangent<T>(int semanticIndex = 0, string semanticName = \"BITANGENT\", PixelFormat pixelFormat = PixelFormat.None) where T : unmanaged Parameters semanticIndex int The semantic index semanticName string The semantic name pixelFormat PixelFormat The pixel format (use None to auto-detect) Returns int The element index used in GetElement<T>(int) and SetElement<T>(int, T) Type Parameters T The type of the position element WithColor<T>(int, string, PixelFormat) Registers a new vertex element public int WithColor<T>(int semanticIndex = 0, string semanticName = \"COLOR\", PixelFormat pixelFormat = PixelFormat.None) where T : unmanaged Parameters semanticIndex int The semantic index semanticName string The semantic name pixelFormat PixelFormat The pixel format (use None to auto-detect) Returns int The element index used in GetElement<T>(int) and SetElement<T>(int, T) Type Parameters T The type of the position element WithElement<T>(int, string, PixelFormat) Registers a new vertex element public int WithElement<T>(int semanticIndex, string semanticName, PixelFormat pixelFormat = PixelFormat.None) where T : unmanaged Parameters semanticIndex int The semantic index semanticName string The semantic name pixelFormat PixelFormat The pixel format (use None to auto-detect) Returns int The element index used in GetElement<T>(int) and SetElement<T>(int, T) Type Parameters T The type of the position element WithIndexType(IndexingType) Changes the selected indexing type. public void WithIndexType(IndexingType indexingType) Parameters indexingType IndexingType The selected indexing type Exceptions InvalidOperationException If vertices were already added changing the indexing type is no longer allowed WithNormal<T>(int, string, PixelFormat) Registers a new vertex element public int WithNormal<T>(int semanticIndex = 0, string semanticName = \"NORMAL\", PixelFormat pixelFormat = PixelFormat.None) where T : unmanaged Parameters semanticIndex int The semantic index semanticName string The semantic name pixelFormat PixelFormat The pixel format (use None to auto-detect) Returns int The element index used in GetElement<T>(int) and SetElement<T>(int, T) Type Parameters T The type of the position element WithPositionTransformed<T>(int, string, PixelFormat) Registers a new vertex element public int WithPositionTransformed<T>(int semanticIndex = 0, string semanticName = \"SV_POSITION\", PixelFormat pixelFormat = PixelFormat.None) where T : unmanaged Parameters semanticIndex int The semantic index semanticName string The semantic name pixelFormat PixelFormat The pixel format (use None to auto-detect) Returns int The element index used in GetElement<T>(int) and SetElement<T>(int, T) Type Parameters T The type of the position element WithPosition<T>(int, string, PixelFormat) Registers a new vertex element public int WithPosition<T>(int semanticIndex = 0, string semanticName = \"POSITION\", PixelFormat pixelFormat = PixelFormat.None) where T : unmanaged Parameters semanticIndex int The semantic index semanticName string The semantic name pixelFormat PixelFormat The pixel format (use None to auto-detect) Returns int The element index used in GetElement<T>(int) and SetElement<T>(int, T) Type Parameters T The type of the position element WithPrimitiveType(PrimitiveType) Changes the selected primitive type. public void WithPrimitiveType(PrimitiveType primitiveType) Parameters primitiveType PrimitiveType The selected primitive type Exceptions InvalidOperationException If vertices were already added changing the primitive type is no longer allowed WithTangent<T>(int, string, PixelFormat) Registers a new vertex element public int WithTangent<T>(int semanticIndex = 0, string semanticName = \"TANGENT\", PixelFormat pixelFormat = PixelFormat.None) where T : unmanaged Parameters semanticIndex int The semantic index semanticName string The semantic name pixelFormat PixelFormat The pixel format (use None to auto-detect) Returns int The element index used in GetElement<T>(int) and SetElement<T>(int, T) Type Parameters T The type of the position element WithTextureCoordinate<T>(int, string, PixelFormat) Registers a new vertex element public int WithTextureCoordinate<T>(int semanticIndex = 0, string semanticName = \"TEXCOORD\", PixelFormat pixelFormat = PixelFormat.None) where T : unmanaged Parameters semanticIndex int The semantic index semanticName string The semantic name pixelFormat PixelFormat The pixel format (use None to auto-detect) Returns int The element index used in GetElement<T>(int) and SetElement<T>(int, T) Type Parameters T The type of the position element"
  },
  "api/Stride.CommunityToolkit.Rendering.Utilities.TextureCanvas.Anchor.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Utilities.TextureCanvas.Anchor.html",
    "title": "Enum TextureCanvas.Anchor | Stride Community Toolkit",
    "keywords": "Enum TextureCanvas.Anchor Namespace Stride.CommunityToolkit.Rendering.Utilities Assembly Stride.CommunityToolkit.dll Anchor positions when drawing to a TextureCanvas public enum TextureCanvas.Anchor Fields Bottom = 7 Adjust the position so the bottom-edge center of the source and target rect are aligned. BottomLeft = 6 Adjust the position so the bottom-left corner of the source and target rect are aligned. BottomRight = 8 Adjust the position so the bottom-right corner of the source and target rect are aligned. Center = 4 Adjust the position so the center of the source and target rect are aligned. Left = 3 Adjust the position so the left-edge center of the source and target rect are aligned. Right = 5 Adjust the position so the right-edge center of the source and target rect are aligned. Top = 1 Adjust the position so the top-edge center of the source and target rect are aligned. TopLeft = 0 Adjust the position so the top-left corner of the source and target rect are aligned. TopRight = 2 Adjust the position so the top-right corner of the source and target rect are aligned."
  },
  "api/Stride.CommunityToolkit.Rendering.Utilities.TextureCanvas.Stretch.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Utilities.TextureCanvas.Stretch.html",
    "title": "Enum TextureCanvas.Stretch | Stride Community Toolkit",
    "keywords": "Enum TextureCanvas.Stretch Namespace Stride.CommunityToolkit.Rendering.Utilities Assembly Stride.CommunityToolkit.dll Stretch modes when textures to a TextureCanvas public enum TextureCanvas.Stretch Fields Contain = 2 The texture is resized to fit in the destination dimensions while it preserves its native aspect ratio. Cover = 3 The texture is resized to fill the destination dimensions while it preserves its native aspect ratio. If the aspect ratio of the destination rectangle differs from the source, the source texture is clipped to fit in the destination dimensions. None = 0 The texture preserves its original size. Overflowing content is cropped. Stretch = 1 The texture is resized to fill the destination dimensions. The aspect ratio is not preserved."
  },
  "api/Stride.CommunityToolkit.Rendering.Utilities.TextureCanvas.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Utilities.TextureCanvas.html",
    "title": "Class TextureCanvas | Stride Community Toolkit",
    "keywords": "Class TextureCanvas Namespace Stride.CommunityToolkit.Rendering.Utilities Assembly Stride.CommunityToolkit.dll A helper class for simple image processing public class TextureCanvas : IDisposable Inheritance object TextureCanvas Implements IDisposable Constructors TextureCanvas(RenderContext, Size2?, PixelFormat) public TextureCanvas(RenderContext renderContext, Size2? size, PixelFormat pixelFormat = PixelFormat.R8G8B8A8_UNorm) Parameters renderContext RenderContext size Size2? pixelFormat PixelFormat Properties ByteSize Calculates the texture size in bytes public int ByteSize { get; } Property Value int PixelFormat Gets or sets the current pixel format public PixelFormat PixelFormat { get; set; } Property Value PixelFormat Remarks Setting a different pixel format may cause a resample of the already drawn back buffer or call the setter before you start drawing. You may consider using Resample(Size2, PixelFormat, SamplingPattern) if you also want to change the size in a single operation. Size Gets or sets the current texture size public Size2 Size { get; set; } Property Value Size2 Remarks Setting a different size may cause a resample of the already drawn back buffer or call the setter before you start drawing. You may consider using Resample(Size2, PixelFormat, SamplingPattern) if you also want to change the pixel format in a single operation. Methods Apply(ImageEffect, params Texture?[]?) Applies an image effect to the buffer texture public void Apply(ImageEffect effect, params Texture?[]? inputs) Parameters effect ImageEffect The image effect to apply inputs Texture[] The input textures Remarks Null, Empty arrays or array entries with null as a value will be replaced by the current drawing buffer The output will always be replaced by the TextureCanvas as a single output. BrightFilter(float, float, Color3?) Applies a BrightFilter effect. public void BrightFilter(float threshold = 0.2, float steepness = 1, Color3? colorMultiplier = null) Parameters threshold float The threshold relative to the white point steepness float the smooth-step steepness for bright pass filtering. colorMultiplier Color3? Modulates bright areas with the provided color. It affects the color of sub-sequent bloom, light-streak effects Clear() Clears the current drawing context and releases internal texture buffers public void Clear() CoCMapBlur(int) Applies a CoCMapBlur effect. public void CoCMapBlur(int radius = 4) Parameters radius int The radius. Colorize(Color4) Applies a color multiply effect. public void Colorize(Color4 colorMultiplier) Parameters colorMultiplier Color4 The color multiplier Combine(Texture?[]?, float[]?, Color3[]?) Applies a ColorCombiner effect. public void Combine(Texture?[]? textures = null, float[]? factors = null, Color3[]? colorMultipliers = null) Parameters textures Texture[] The textures combine (use null to use the current drawing buffer as a texture input) factors float[] The factors used to multiply the colors. colorMultipliers Color3[] The color multiplier of each texture. Default is White Remarks Null, Empty arrays or array entries with null as a value will be replaced by the current drawing buffer Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() DrawRect(Rectangle, Stretch, Anchor, SamplingPattern) public void DrawRect(Rectangle destinationRect, TextureCanvas.Stretch stretch = Stretch.Stretch, TextureCanvas.Anchor anchor = Anchor.TopLeft, SamplingPattern samplingPattern = SamplingPattern.Linear) Parameters destinationRect Rectangle stretch TextureCanvas.Stretch anchor TextureCanvas.Anchor samplingPattern SamplingPattern DrawTexture(Texture, Rectangle, Rectangle, Color4?, Stretch, Anchor, SamplingPattern) Draws a texture to the TextureCanvas public void DrawTexture(Texture sourceTexture, Rectangle sourceRect, Rectangle destinationRect, Color4? colorMultiplier = null, TextureCanvas.Stretch stretch = Stretch.Stretch, TextureCanvas.Anchor anchor = Anchor.TopLeft, SamplingPattern samplingPattern = SamplingPattern.Linear) Parameters sourceTexture Texture The source texture to draw sourceRect Rectangle The sub rectangle of the source texture to draw destinationRect Rectangle The sub rectangle of the target texture colorMultiplier Color4? The color multiplier. Default is White stretch TextureCanvas.Stretch The stretch mode anchor TextureCanvas.Anchor The anchor mode samplingPattern SamplingPattern The sampling pattern DrawTexture(Texture, Rectangle, Color4?, Stretch, Anchor, SamplingPattern) Draws a texture to the TextureCanvas public void DrawTexture(Texture sourceTexture, Rectangle destinationRect, Color4? colorMultiplier = null, TextureCanvas.Stretch stretch = Stretch.Stretch, TextureCanvas.Anchor anchor = Anchor.TopLeft, SamplingPattern samplingPattern = SamplingPattern.Linear) Parameters sourceTexture Texture The source texture to draw destinationRect Rectangle The sub rectangle of the target texture in percentages colorMultiplier Color4? The color multiplier. Default is White stretch TextureCanvas.Stretch The stretch mode anchor TextureCanvas.Anchor The anchor mode samplingPattern SamplingPattern The sampling pattern DrawTexture(Texture, RectangleF, RectangleF, Color4?, Stretch, Anchor, SamplingPattern) Draws a texture to the TextureCanvas using rectangles with percentage values public void DrawTexture(Texture sourceTexture, RectangleF relativeSourceRect, RectangleF relativeDestinationRect, Color4? colorMultiplier = null, TextureCanvas.Stretch stretch = Stretch.Stretch, TextureCanvas.Anchor anchor = Anchor.TopLeft, SamplingPattern samplingPattern = SamplingPattern.Linear) Parameters sourceTexture Texture The source texture to draw relativeSourceRect RectangleF The sub rectangle of the source texture to draw in percentages relativeDestinationRect RectangleF The sub rectangle of the target texture in percentages colorMultiplier Color4? The color multiplier. Default is White stretch TextureCanvas.Stretch The stretch mode anchor TextureCanvas.Anchor The anchor mode samplingPattern SamplingPattern The sampling pattern DrawTexture(Texture, RectangleF, Color4?, Stretch, Anchor, SamplingPattern) Draws a texture to the TextureCanvas using a rectangle with percentage values public void DrawTexture(Texture sourceTexture, RectangleF relativeDestinationRect, Color4? colorMultiplier = null, TextureCanvas.Stretch stretch = Stretch.Stretch, TextureCanvas.Anchor anchor = Anchor.TopLeft, SamplingPattern samplingPattern = SamplingPattern.Linear) Parameters sourceTexture Texture The source texture to draw relativeDestinationRect RectangleF The sub rectangle of the target texture in percentages colorMultiplier Color4? The color multiplier. Default is White stretch TextureCanvas.Stretch The stretch mode anchor TextureCanvas.Anchor The anchor mode samplingPattern SamplingPattern The sampling pattern DrawTexture(Texture, Color4?, Stretch, Anchor, SamplingPattern) Draws a texture to the drawing context public void DrawTexture(Texture sourceTexture, Color4? colorMultiplier = null, TextureCanvas.Stretch stretch = Stretch.Stretch, TextureCanvas.Anchor anchor = Anchor.TopLeft, SamplingPattern samplingPattern = SamplingPattern.Linear) Parameters sourceTexture Texture The source texture to draw colorMultiplier Color4? The color multiplier. Default is White stretch TextureCanvas.Stretch The stretch mode anchor TextureCanvas.Anchor The anchor mode samplingPattern SamplingPattern The sampling pattern GaussianBlur(int, float) Applies a GaussianBlur effect. public void GaussianBlur(int radius = 4, float sigmaRatio = 2) Parameters radius int The radius. sigmaRatio float The sigma ratio. The sigma ratio is used to calculate the sigma based on the radius: The actual formula is sigma = radius / SigmaRatio. The default value is 2.0f. GetData() Copies the current texture data to a byte array public byte[] GetData() Returns byte[] GetData(byte[]) Copies the current texture data to a byte array public void GetData(byte[] data) Parameters data byte[] The data array to store the data Load(byte[]) Replaces the current TextureCanvas with a texture loaded from a byte[] public void Load(byte[] data) Parameters data byte[] The byte[] containing file data Remarks This method also replaces the current size and pixel format. Use Resample(Size2, PixelFormat, SamplingPattern) to change it afterwards. Load(Stream) Replaces the current TextureCanvas with a texture loaded from a Stream public void Load(Stream stream) Parameters stream Stream The Stream containing file data Remarks This method also replaces the current size and pixel format. Use Resample(Size2, PixelFormat, SamplingPattern) to change it afterwards. Load(string) Replaces the current TextureCanvas with a texture loaded from the local file system public void Load(string path) Parameters path string The file path Remarks This method also replaces the current size and pixel format. Use Resample(Size2, PixelFormat, SamplingPattern) to change it afterwards. Recolorize(Color4?) Applies a grey scale effect by copying the red channel to blue and green and optionally also recolors the resulting image. public void Recolorize(Color4? colorMultiplier = null) Parameters colorMultiplier Color4? The color multiplier. Default is White Resample(Size2, PixelFormat, SamplingPattern) Resamples the texture in a different size or pixel format public void Resample(Size2 size, PixelFormat pixelFormat, SamplingPattern samplingPattern = SamplingPattern.Linear) Parameters size Size2 The new size pixelFormat PixelFormat The new pixel format samplingPattern SamplingPattern The sampling pattern SetData(byte[], int, int, PixelFormat) Replaces the current TextureCanvas with a texture loaded from a byte[] containing pixel data public void SetData(byte[] data, int width, int height, PixelFormat pixelFormat) Parameters data byte[] The byte[] containing pixel data width int The width of the new texture height int The height of the new texture pixelFormat PixelFormat The pixel format of the new texture Remarks This method also replaces the current size and pixel format. Use Resample(Size2, PixelFormat, SamplingPattern) to change it afterwards. Store(Stream, ImageFileType) Stores the current texture to a Stream in the selected file format public void Store(Stream stream, ImageFileType fileType) Parameters stream Stream The target stream fileType ImageFileType The file type to write Store(string, ImageFileType?) Stores the current texture to a file in the local file system. public void Store(string path, ImageFileType? fileType = null) Parameters path string The target file path fileType ImageFileType? The file type to write or null for automatic inference based on the file extension ToTexture(TextureFlags) Copies the current texture data to a new texture public Texture ToTexture(TextureFlags flags = TextureFlags.ShaderResource) Parameters flags TextureFlags Returns Texture Transform(IEnumerable<ColorTransform>?, IEnumerable<ColorTransform>?, IEnumerable<ColorTransform>?) Applies a ColorTransformGroup effect. public void Transform(IEnumerable<ColorTransform>? transforms = null, IEnumerable<ColorTransform>? preTransforms = null, IEnumerable<ColorTransform>? postTransforms = null) Parameters transforms IEnumerable<ColorTransform> The color transforms to apply preTransforms IEnumerable<ColorTransform> The color pre-transforms to apply postTransforms IEnumerable<ColorTransform> The color post-transforms to apply"
  },
  "api/Stride.CommunityToolkit.Rendering.Utilities.html": {
    "href": "api/Stride.CommunityToolkit.Rendering.Utilities.html",
    "title": "Namespace Stride.CommunityToolkit.Rendering.Utilities | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Rendering.Utilities Classes MeshBuilder A utility class for building meshes by defining vertex elements with different data types and primitives types. TextureCanvas A helper class for simple image processing Enums IndexingType TextureCanvas.Anchor Anchor positions when drawing to a TextureCanvas TextureCanvas.Stretch Stretch modes when textures to a TextureCanvas"
  },
  "api/Stride.CommunityToolkit.Scripts.Basic2DCameraController.html": {
    "href": "api/Stride.CommunityToolkit.Scripts.Basic2DCameraController.html",
    "title": "Class Basic2DCameraController | Stride Community Toolkit",
    "keywords": "Class Basic2DCameraController Namespace Stride.CommunityToolkit.Scripts Assembly Stride.CommunityToolkit.dll Provides an interactive 2D camera controller for navigating 2D scenes in Stride. This controller supports movement in the XY-plane using keyboard inputs (W, A, S, D, arrow keys), zooming in and out with the mouse wheel, and moving the camera based on mouse position near screen edges. Additional features include a speed boost when holding shift and the ability to reset the camera to a default position and zoom level using the 'H' key. public class Basic2DCameraController : SyncScript, IIdentifiable, ICollectorHolder Inheritance object EntityComponent ScriptComponent StartupScript SyncScript Basic2DCameraController Implements IIdentifiable ICollectorHolder Inherited Members StartupScript.Start() ScriptComponent.LiveScriptingMask ScriptComponent.ScriptGlobalProfilingKey ScriptComponent.PriorityUpdated() ScriptComponent.Cancel() ScriptComponent.ProfilingKey ScriptComponent.Audio ScriptComponent.SpriteAnimation ScriptComponent.Services ScriptComponent.Game ScriptComponent.Content ScriptComponent.GameProfiler ScriptComponent.GraphicsDevice ScriptComponent.Input ScriptComponent.Script ScriptComponent.SceneSystem ScriptComponent.EffectSystem ScriptComponent.DebugText ScriptComponent.Streaming ScriptComponent.Log ScriptComponent.Priority ScriptComponent.IsLiveReloading ScriptComponent.Collector EntityComponent.Entity EntityComponent.Id EntityComponent.EnsureEntity Extension Methods ScriptComponentExtensions.DeltaTime(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent, string) ScriptComponentExtensions.GetFirstCamera(ScriptComponent) ScriptComponentExtensions.GetFirstGCCamera(ScriptComponent) ScriptComponentExtensions.GetGCCamera(ScriptComponent) ScriptComponentExtensions.GetGCCamera(ScriptComponent, string) Remarks The camera moves at a default speed which can be increased with shift keys. Zooming is performed by changing the OrthographicSize of the camera. The camera can be moved towards the edges of the screen when the mouse cursor is close to them. The 'H' key resets the camera to its default position and orthographic size. Default settings: FarClipPlane=1000, NearClipPlane=0.1f, OrthographicSize=10. Methods Update() Called every frame. public override void Update()"
  },
  "api/Stride.CommunityToolkit.Scripts.Basic3DCameraController.html": {
    "href": "api/Stride.CommunityToolkit.Scripts.Basic3DCameraController.html",
    "title": "Class Basic3DCameraController | Stride Community Toolkit",
    "keywords": "Class Basic3DCameraController Namespace Stride.CommunityToolkit.Scripts Assembly Stride.CommunityToolkit.dll A script that allows to move and rotate an entity through keyboard, mouse and touch input to provide basic camera navigation. public class Basic3DCameraController : SyncScript, IIdentifiable, ICollectorHolder Inheritance object EntityComponent ScriptComponent StartupScript SyncScript Basic3DCameraController Implements IIdentifiable ICollectorHolder Inherited Members ScriptComponent.LiveScriptingMask ScriptComponent.ScriptGlobalProfilingKey ScriptComponent.PriorityUpdated() ScriptComponent.Cancel() ScriptComponent.ProfilingKey ScriptComponent.Audio ScriptComponent.SpriteAnimation ScriptComponent.Services ScriptComponent.Game ScriptComponent.Content ScriptComponent.GameProfiler ScriptComponent.GraphicsDevice ScriptComponent.Input ScriptComponent.Script ScriptComponent.SceneSystem ScriptComponent.EffectSystem ScriptComponent.DebugText ScriptComponent.Streaming ScriptComponent.Log ScriptComponent.Priority ScriptComponent.IsLiveReloading ScriptComponent.Collector EntityComponent.Entity EntityComponent.Id EntityComponent.EnsureEntity Extension Methods ScriptComponentExtensions.DeltaTime(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent, string) ScriptComponentExtensions.GetFirstCamera(ScriptComponent) ScriptComponentExtensions.GetFirstGCCamera(ScriptComponent) ScriptComponentExtensions.GetGCCamera(ScriptComponent) ScriptComponentExtensions.GetGCCamera(ScriptComponent, string) Remarks The entity can be moved using W, A, S, D, Q and E, arrow keys, a gamepad's left stick or dragging/scaling using multi-touch. Rotation is achieved using the Numpad, the mouse while holding the right mouse button, a gamepad's right stick, or dragging using single-touch. This functionality is inspired by Stride.Assets.Presentation, Assets->Scripts->Camera Properties Gamepad public bool Gamepad { get; set; } Property Value bool KeyboardMovementSpeed public Vector3 KeyboardMovementSpeed { get; set; } Property Value Vector3 KeyboardRotationSpeed public Vector2 KeyboardRotationSpeed { get; set; } Property Value Vector2 MouseRotationSpeed public Vector2 MouseRotationSpeed { get; set; } Property Value Vector2 SpeedFactor public float SpeedFactor { get; set; } Property Value float TouchMovementSpeed public Vector3 TouchMovementSpeed { get; set; } Property Value Vector3 TouchRotationSpeed public Vector2 TouchRotationSpeed { get; set; } Property Value Vector2 Methods Start() Called before the script enters it's update loop. public override void Start() Update() Called every frame. public override void Update()"
  },
  "api/Stride.CommunityToolkit.Scripts.GameProfiler.html": {
    "href": "api/Stride.CommunityToolkit.Scripts.GameProfiler.html",
    "title": "Class GameProfiler | Stride Community Toolkit",
    "keywords": "Class GameProfiler Namespace Stride.CommunityToolkit.Scripts Assembly Stride.CommunityToolkit.dll Provides in-game profiling functionality, allowing the monitoring and analysis of game performance in real time. This script facilitates the toggling of profiling, setting display preferences, and navigating through profiling data. public class GameProfiler : AsyncScript, IIdentifiable, ICollectorHolder Inheritance object EntityComponent ScriptComponent AsyncScript GameProfiler Implements IIdentifiable ICollectorHolder Inherited Members AsyncScript.PriorityUpdated() AsyncScript.CancellationToken ScriptComponent.LiveScriptingMask ScriptComponent.ScriptGlobalProfilingKey ScriptComponent.Cancel() ScriptComponent.ProfilingKey ScriptComponent.Audio ScriptComponent.SpriteAnimation ScriptComponent.Services ScriptComponent.Game ScriptComponent.Content ScriptComponent.GameProfiler ScriptComponent.GraphicsDevice ScriptComponent.Input ScriptComponent.Script ScriptComponent.SceneSystem ScriptComponent.EffectSystem ScriptComponent.DebugText ScriptComponent.Streaming ScriptComponent.Log ScriptComponent.Priority ScriptComponent.IsLiveReloading ScriptComponent.Collector EntityComponent.Entity EntityComponent.Id EntityComponent.EnsureEntity Extension Methods ScriptComponentExtensions.DeltaTime(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent, string) ScriptComponentExtensions.GetFirstCamera(ScriptComponent) ScriptComponentExtensions.GetFirstGCCamera(ScriptComponent) ScriptComponentExtensions.GetGCCamera(ScriptComponent) ScriptComponentExtensions.GetGCCamera(ScriptComponent, string) Remarks This class provides keyboard shortcuts for toggling the profiler on/off with Shift + Ctrl + P, changing the filtering mode with F1, altering the sorting mode with F2, navigating result pages with F3 and F4, and adjusting the refresh interval with the plus and minus keys. Properties Enabled Enables or disable the game profiling public bool Enabled { get; set; } Property Value bool FilteringMode Gets or sets the type of the profiling to display: CPU or GPU [Display(0, \"Filter\", null)] public GameProfilingResults FilteringMode { get; set; } Property Value GameProfilingResults RefreshTime The time between two refreshes of the profiling information in milliseconds. [Display(2, \"Refresh interval (ms)\", null)] public double RefreshTime { get; set; } Property Value double ResultPage Gets or sets the current profiling result page to display. [Display(3, \"Display page\", null)] public uint ResultPage { get; set; } Property Value uint SortingMode Gets or set the sorting mode of the profiling entries [Display(1, \"Sort by\", null)] public GameProfilingSorting SortingMode { get; set; } Property Value GameProfilingSorting TextColor The color of the text displayed during profiling [Display(4, \"Text color\", null)] public Color TextColor { get; set; } Property Value Color Methods Execute() Called once, as a microthread public override Task Execute() Returns Task"
  },
  "api/Stride.CommunityToolkit.Scripts.GizmoBillboardLetterScript.html": {
    "href": "api/Stride.CommunityToolkit.Scripts.GizmoBillboardLetterScript.html",
    "title": "Class GizmoBillboardLetterScript | Stride Community Toolkit",
    "keywords": "Class GizmoBillboardLetterScript Namespace Stride.CommunityToolkit.Scripts Assembly Stride.CommunityToolkit.dll public class GizmoBillboardLetterScript : SyncScript, IIdentifiable, ICollectorHolder Inheritance object EntityComponent ScriptComponent StartupScript SyncScript GizmoBillboardLetterScript Implements IIdentifiable ICollectorHolder Inherited Members StartupScript.Start() ScriptComponent.LiveScriptingMask ScriptComponent.ScriptGlobalProfilingKey ScriptComponent.PriorityUpdated() ScriptComponent.Cancel() ScriptComponent.ProfilingKey ScriptComponent.Audio ScriptComponent.SpriteAnimation ScriptComponent.Services ScriptComponent.Game ScriptComponent.Content ScriptComponent.GameProfiler ScriptComponent.GraphicsDevice ScriptComponent.Input ScriptComponent.Script ScriptComponent.SceneSystem ScriptComponent.EffectSystem ScriptComponent.DebugText ScriptComponent.Streaming ScriptComponent.Log ScriptComponent.Priority ScriptComponent.IsLiveReloading ScriptComponent.Collector EntityComponent.Entity EntityComponent.Id EntityComponent.EnsureEntity Extension Methods ScriptComponentExtensions.DeltaTime(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent) ScriptComponentExtensions.GetCamera(ScriptComponent, string) ScriptComponentExtensions.GetFirstCamera(ScriptComponent) ScriptComponentExtensions.GetFirstGCCamera(ScriptComponent) ScriptComponentExtensions.GetGCCamera(ScriptComponent) ScriptComponentExtensions.GetGCCamera(ScriptComponent, string) Properties DefaultRotation public int DefaultRotation { get; set; } Property Value int Methods Update() Called every frame. public override void Update() UpdateLetterRotation(Vector3) public void UpdateLetterRotation(Vector3 cameraPosition) Parameters cameraPosition Vector3"
  },
  "api/Stride.CommunityToolkit.Scripts.RaySegment.html": {
    "href": "api/Stride.CommunityToolkit.Scripts.RaySegment.html",
    "title": "Struct RaySegment | Stride Community Toolkit",
    "keywords": "Struct RaySegment Namespace Stride.CommunityToolkit.Scripts Assembly Stride.CommunityToolkit.dll Represents a three dimensional line based on a 2 points in space. [DataContract] public struct RaySegment : IEquatable<RaySegment>, IFormattable Implements IEquatable<RaySegment> IFormattable Constructors RaySegment(Vector3, Vector3) Initializes a new instance of the RaySegment struct. public RaySegment(Vector3 start, Vector3 end) Parameters start Vector3 The position in three dimensional space where the ray starts. end Vector3 The position in three dimensional space where the ray ends. Properties End The position in three dimensional space where the ray ends. public Vector3 End { readonly get; init; } Property Value Vector3 Length Length of RaySegment public float Length { get; } Property Value float Start The position in three dimensional space where the ray starts. public Vector3 Start { readonly get; init; } Property Value Vector3 Methods Equals(RaySegment) Determines whether the specified Vector4 is equal to this instance. public bool Equals(RaySegment value) Parameters value RaySegment The Vector4 to compare with this instance. Returns bool true if the specified Vector4 is equal to this instance; otherwise, false. Equals(object?) Determines whether the specified object is equal to this instance. public override bool Equals(object? value) Parameters value object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. ToString(IFormatProvider) Returns a string that represents this instance. public string ToString(IFormatProvider formatProvider) Parameters formatProvider IFormatProvider The format provider. Returns string A string that represents this instance. ToString(string) Returns a string that represents this instance. public string ToString(string format) Parameters format string The format. Returns string A string that represents this instance. ToString(string?, IFormatProvider?) Returns a string that represents this instance. public string ToString(string? format, IFormatProvider? formatProvider) Parameters format string The format. formatProvider IFormatProvider The format provider. Returns string A string that represents this instance. Operators operator ==(RaySegment, RaySegment) Tests for equality between two objects. public static bool operator ==(RaySegment left, RaySegment right) Parameters left RaySegment The first value to compare. right RaySegment The second value to compare. Returns bool true if left has the same value as right; otherwise, false. explicit operator Ray(RaySegment) Performs an explicit conversion from RaySegment to Ray. public static explicit operator Ray(RaySegment raySegment) Parameters raySegment RaySegment The RaySegment to convert Returns Ray The result of the conversion. operator !=(RaySegment, RaySegment) Tests for inequality between two objects. public static bool operator !=(RaySegment left, RaySegment right) Parameters left RaySegment The first value to compare. right RaySegment The second value to compare. Returns bool true if left has a different value than right; otherwise, false."
  },
  "api/Stride.CommunityToolkit.Scripts.html": {
    "href": "api/Stride.CommunityToolkit.Scripts.html",
    "title": "Namespace Stride.CommunityToolkit.Scripts | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Scripts Classes Basic2DCameraController Provides an interactive 2D camera controller for navigating 2D scenes in Stride. This controller supports movement in the XY-plane using keyboard inputs (W, A, S, D, arrow keys), zooming in and out with the mouse wheel, and moving the camera based on mouse position near screen edges. Additional features include a speed boost when holding shift and the ability to reset the camera to a default position and zoom level using the 'H' key. Basic3DCameraController A script that allows to move and rotate an entity through keyboard, mouse and touch input to provide basic camera navigation. GameProfiler Provides in-game profiling functionality, allowing the monitoring and analysis of game performance in real time. This script facilitates the toggling of profiling, setting display preferences, and navigating through profiling data. GizmoBillboardLetterScript Structs RaySegment Represents a three dimensional line based on a 2 points in space."
  },
  "api/Stride.CommunityToolkit.Skyboxes.GameExtensions.html": {
    "href": "api/Stride.CommunityToolkit.Skyboxes.GameExtensions.html",
    "title": "Class GameExtensions | Stride Community Toolkit",
    "keywords": "Class GameExtensions Namespace Stride.CommunityToolkit.Skyboxes Assembly Stride.CommunityToolkit.Skyboxes.dll public static class GameExtensions Inheritance object GameExtensions Methods AddSkybox(Game, string?) Adds a skybox to the specified game scene, providing a background texture to create a more immersive environment. public static Entity AddSkybox(this Game game, string? entityName = null) Parameters game Game The game instance to which the skybox will be added. entityName string The name for the skybox entity. If null, a default name will be used. Returns Entity The created skybox entity. Remarks The skybox texture is loaded from the Resources folder, and is used to generate a skybox using the SkyboxGenerator. A new entity is created with a BackgroundComponent and a LightComponent, both configured for the skybox, and is added to the game scene. The default position of the skybox entity is set to (0.0f, 2.0f, -2.0f)."
  },
  "api/Stride.CommunityToolkit.Skyboxes.SkyboxGenerator.html": {
    "href": "api/Stride.CommunityToolkit.Skyboxes.SkyboxGenerator.html",
    "title": "Class SkyboxGenerator | Stride Community Toolkit",
    "keywords": "Class SkyboxGenerator Namespace Stride.CommunityToolkit.Skyboxes Assembly Stride.CommunityToolkit.Skyboxes.dll public static class SkyboxGenerator Inheritance object SkyboxGenerator Methods Generate(Skybox, SkyboxGeneratorContext, Texture) public static Skybox Generate(Skybox skybox, SkyboxGeneratorContext context, Texture skyboxTexture) Parameters skybox Skybox context SkyboxGeneratorContext skyboxTexture Texture Returns Skybox"
  },
  "api/Stride.CommunityToolkit.Skyboxes.SkyboxGeneratorContext.html": {
    "href": "api/Stride.CommunityToolkit.Skyboxes.SkyboxGeneratorContext.html",
    "title": "Class SkyboxGeneratorContext | Stride Community Toolkit",
    "keywords": "Class SkyboxGeneratorContext Namespace Stride.CommunityToolkit.Skyboxes Assembly Stride.CommunityToolkit.Skyboxes.dll Provides context for generating a skybox by encapsulating relevant services and rendering contexts. public class SkyboxGeneratorContext : ShaderGeneratorContext, IDisposable, IComponent, IReferencable, ICollectorHolder Inheritance object DisposeBase ComponentBase ShaderGeneratorContext SkyboxGeneratorContext Implements IDisposable IComponent IReferencable ICollectorHolder Inherited Members ShaderGeneratorContext.GetParameterKey(ParameterKey) ShaderGeneratorContext.GenerateTextureFromColor(Color) ShaderGeneratorContext.GetTextureKey(Texture, ObjectParameterKey<Texture>, Color?) ShaderGeneratorContext.GetSamplerKey(SamplerStateDescription, GraphicsDevice) ShaderGeneratorContext.GetTextureKey(ComputeTextureBase, MaterialComputeColorKeys) ShaderGeneratorContext.GetSamplerKey(ComputeColorParameterSampler) ShaderGeneratorContext.ResetParameterKeys() ShaderGeneratorContext.PushOverrides(MaterialOverrides) ShaderGeneratorContext.PopOverrides() ShaderGeneratorContext.FindAsset ShaderGeneratorContext.GetAssetFriendlyName ShaderGeneratorContext.Log ShaderGeneratorContext.Content ShaderGeneratorContext.Parameters ShaderGeneratorContext.CurrentOverrides ShaderGeneratorContext.ColorSpace ShaderGeneratorContext.IsNotPixelStage ShaderGeneratorContext.OptimizeMaterials ComponentBase.Tags ComponentBase.Destroy() ComponentBase.OnNameChanged() ComponentBase.ToString() ComponentBase.Name DisposeBase.Dispose() DisposeBase.OnAddReference() DisposeBase.OnReleaseReference() DisposeBase.IsDisposed Remarks This class is a simplified version tailored for code-only usage, inspired by the more complex SkyboxGeneratorContext class in the Stride.Assets.Skyboxes namespace. Constructors SkyboxGeneratorContext(Game) Initializes a new instance of the SkyboxGeneratorContext class using the provided game instance. public SkyboxGeneratorContext(Game game) Parameters game Game The game instance used to access necessary services and contexts. Properties GraphicsDevice Gets the graphics device. public GraphicsDevice GraphicsDevice { get; } Property Value GraphicsDevice RenderContext Gets the render context. public RenderContext RenderContext { get; } Property Value RenderContext RenderDrawContext Gets the render draw context. public RenderDrawContext RenderDrawContext { get; } Property Value RenderDrawContext Services Gets the service registry. public IServiceRegistry Services { get; } Property Value IServiceRegistry"
  },
  "api/Stride.CommunityToolkit.Skyboxes.html": {
    "href": "api/Stride.CommunityToolkit.Skyboxes.html",
    "title": "Namespace Stride.CommunityToolkit.Skyboxes | Stride Community Toolkit",
    "keywords": "Namespace Stride.CommunityToolkit.Skyboxes Classes GameExtensions SkyboxGenerator SkyboxGeneratorContext Provides context for generating a skybox by encapsulating relevant services and rendering contexts."
  },
  "api/Stride.DebugRendering.LinePrimitiveShaderKeys.html": {
    "href": "api/Stride.DebugRendering.LinePrimitiveShaderKeys.html",
    "title": "Class LinePrimitiveShaderKeys | Stride Community Toolkit",
    "keywords": "Class LinePrimitiveShaderKeys Namespace Stride.DebugRendering Assembly Stride.CommunityToolkit.dll public static class LinePrimitiveShaderKeys Inheritance object LinePrimitiveShaderKeys Fields ViewProjection public static readonly ValueParameterKey<Matrix> ViewProjection Field Value ValueParameterKey<Matrix>"
  },
  "api/Stride.DebugRendering.PrimitiveShaderKeys.html": {
    "href": "api/Stride.DebugRendering.PrimitiveShaderKeys.html",
    "title": "Class PrimitiveShaderKeys | Stride Community Toolkit",
    "keywords": "Class PrimitiveShaderKeys Namespace Stride.DebugRendering Assembly Stride.CommunityToolkit.dll public static class PrimitiveShaderKeys Inheritance object PrimitiveShaderKeys Fields Colors public static readonly ObjectParameterKey<Buffer> Colors Field Value ObjectParameterKey<Buffer> InstanceOffset public static readonly ValueParameterKey<int> InstanceOffset Field Value ValueParameterKey<int> LineWidthMultiplier public static readonly ValueParameterKey<float> LineWidthMultiplier Field Value ValueParameterKey<float> Transforms public static readonly ObjectParameterKey<Buffer> Transforms Field Value ObjectParameterKey<Buffer> ViewProjection public static readonly ValueParameterKey<Matrix> ViewProjection Field Value ValueParameterKey<Matrix>"
  },
  "api/Stride.DebugRendering.html": {
    "href": "api/Stride.DebugRendering.html",
    "title": "Namespace Stride.DebugRendering | Stride Community Toolkit",
    "keywords": "Namespace Stride.DebugRendering Classes LinePrimitiveShaderKeys PrimitiveShaderKeys"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Stride Community Toolkit API | Stride API",
    "keywords": "Stride Community Toolkit API Note The Stride Community Toolkit is currently in development. Documentation is incomplete and may contain errors. We published it early for your convenience, ahead of the toolkit's completion. Welcome to the Stride Community Toolkit API documentation. These pages contain detailed information about the Stride scripting API, grouped by namespace. The API documentation covers methods, properties, and other relevant information to help you effectively use the Stride engine in your projects."
  },
  "index.html": {
    "href": "index.html",
    "title": "Stride Community Toolkit Documentation | Stride Community Toolkit",
    "keywords": "Stride Community Toolkit Documentation Note The Stride Community Toolkit is currently in development. Documentation is incomplete and may contain errors. We published it early for your convenience, ahead of the toolkit's completion. 👋 Introduction The Stride Community Toolkit is a comprehensive set of C# helpers and extensions designed to enhance your experience with the Stride Game Engine. It simplifies and exemplifies routine development tasks 🛠️, enabling you to build applications for Stride using .NET 8 with ease 🎉. 🔧 Installation Available as a 📦 NuGet package, the Stride Community Toolkit can be easily integrated into new or existing Stride Game C# projects. For more information on how to get started, please refer to the Getting Started page. 🚀 Rapid Prototyping and Development This toolkit serves as our preferred solution for rapid 🏃 prototyping and accelerated game development. Unlike the more stable Stride Game Engine, the Stride Community Toolkit aims for a faster development momentum. As such, breaking changes are not only likely but should be expected. This approach allows us to quickly iterate and integrate new features and improvements. We believe this pace serves the needs of developers who are looking for cutting-edge tools and are comfortable with a more dynamic environment. 🛠️ Toolkit Repository The Stride Community Toolkit is an open-source, MIT licensed project hosted on GitHub and supported by the community. Access the source code or contribute 🤝 to the toolkit on its GitHub Repository. 🎮 Game Engine Repository Access the source code or contribute 🤝 to the Stride Game Engine on its GitHub Repository. Explore a comprehensive guide on the Stride Docs website. 📃 Documentation & Resources Explore a range of resources to help you get the most out of the Stride Community Toolkit: Manual: Get detailed guidance and best practices for using the toolkit. Tutorials: Step-by-step tutorials to help you learn various features of the toolkit. Release Notes: Stay updated with the latest changes and improvements. API Reference: In-depth API documentation for a deep dive into the toolkit's capabilities. These resources are designed to provide comprehensive information and support for developers at all levels, from beginners to advanced users. 👥 Contributors This section highlights the amazing contributors who have helped enhance the Stride Community Toolkit with their efforts. DotLogix: Utility MeshBuilder, TextureCanvas and docs Doprez: Extensions IXLLEGACYIXL: Extensions Vaclav Elias: Code only approach implementation, toolkit docs dfkeenan: Previous toolkit implementation Idomeneas1970: Heightmap extensions DockFrankenstein: Script System Extensions"
  },
  "manual/animation-extensions/index.html": {
    "href": "manual/animation-extensions/index.html",
    "title": "AnimationComponentExtensions.cs | Stride Manual",
    "keywords": "AnimationComponentExtensions.cs PlayAnimation() - Plays the specified animation on the animation component if it is not already playing"
  },
  "manual/camera-extensions/index.html": {
    "href": "manual/camera-extensions/index.html",
    "title": "CameraComponentExtensions.cs | Stride Manual",
    "keywords": "CameraComponentExtensions.cs These extensions provide powerful and convenient ways to interact with the camera, transforming coordinates between different spaces, performing raycasting, and handling user inputs for dynamic camera control. Whether you are implementing complex camera behaviors or simply looking to streamline common camera operations, these extensions are designed to make your development process more efficient and intuitive. Below is a list of available extension methods: GetPickRay() - Calculates a ray from the camera through a point on the screen in world space LogicDirectionToWorldDirection() - Converts a 2D logical direction into a 3D world direction relative to the camera's orientation LogicDirectionToWorldDirection() - Converts a 2D logical direction into a 3D world direction relative to the camera's orientation, using a specified up vector Raycast() - Performs a raycasting operation from the specified CameraComponent's position through the specified screen position in world coordinates, and returns information about the hit result RaycastMouse() - Performs a raycasting operation from the specified CameraComponent's position through the mouse cursor position in screen coordinates, and returns information about the hit result ScreenPointToRay() - Calculates the near and far vectors for a ray that starts at the camera and passes through a given screen point ScreenToWorldPoint() - Converts the screen position to a point in world coordinates ScreenToWorldRaySegment() - Converts the screen position to a RaySegment in world coordinates ScreenToWorldRaySegment() - Converts the screen position to a RaySegment in world coordinates WorldToClipSpace() - Converts the world position to clip space coordinates relative to camera WorldToScreenPoint() - Converts the world position to screen space coordinates relative to camera Each of these methods is designed to offer streamlined, high-level operations that simplify camera manipulation tasks, allowing you to focus on creating immersive and dynamic 3D environments."
  },
  "manual/code-only/create-project.html": {
    "href": "manual/code-only/create-project.html",
    "title": "Create Project | Stride Manual",
    "keywords": "Create Project Command Line and Visual Studio Code Instructions The following instructions will guide you through the process of creating a new Stride project using the command line. If you prefer to use Visual Studio Code, you can follow the same instructions in the Visual Studio Code Terminal. Prerequisites: Make sure you have all prerequisites installed. See the Prerequisites section for more information. Create a Console App: Follow the Microsoft tutorial to learn more about how to create a new console application. dotnet new console --framework net8.0 Add NuGet Package: Execute the following command to add the necessary NuGet package. dotnet add package Stride.CommunityToolkit --prerelease Update Program.cs: Paste the example code (below) into your Program.cs file. Build the Project (Optional): The dotnet build command is used to compile your Stride project, generating executable files and checking for any errors in your code. This step is optional as the subsequent dotnet run command will automatically build the project if it hasn't been built already. To manually build the project, execute the following command: dotnet build Run the Project: The dotnet run command will build (if necessary) and execute your project. Run the following command to start your Stride project: dotnet run Enjoy Stride: If everything is set up correctly, you should now be able to run and enjoy your Stride project. Visual Studio 2022 and Rider Instructions Create a C# Console Application: Open Visual Studio 2022 or Rider and create a new C# Console Application targeting .NET 8. Add NuGet Package: Search for and add the Stride.CommunityToolkit NuGet package, ensuring you opt for the pre-release version. This package will install all needed Stride NuGet packages Update Program.cs: Paste the example code (provided below) into your Program.cs file. Run the Project: Build and run your project using the IDE's run functionality. Enjoy Stride: If everything is set up correctly, you should now be able to run and enjoy your Stride project. Example Code The provided C# code example is designed to showcase the basic usage of the Stride Game Engine. using Stride.CommunityToolkit.Engine; using Stride.CommunityToolkit.Rendering.ProceduralModels; using Stride.Core.Mathematics; using Stride.Engine; using var game = new Game(); game.Run(start: Start); void Start(Scene rootScene) { game.SetupBase3DScene(); var entity = game.Create3DPrimitive(PrimitiveModelType.Capsule); entity.Transform.Position = new Vector3(0, 8, 0); entity.Scene = rootScene; } using var game = new Game(); creates a new instance of the Game class. The game.Run(start: Start); line starts the game, and it specifies that the Start method should be called when the game begins. void Start(Scene rootScene) is the method that is called when the game starts. It takes in a Scene object, which represents the game scene that is currently being played. Inside the Start method, game.SetupBase3DScene(); sets up a basic 3D scene. var entity = game.Create3DPrimitive(PrimitiveModelType.Capsule); creates a new primitive entity of type Capsule, and assigns it to the entity variable. entity.Transform.Position = new Vector3(0, 8, 0); sets the position of the entity in the 3D space. The position is set to (0, 8, 0), which means the capsule is placed 8 units above the ground. entity.Scene = rootScene; adds the entity to the root scene of the game. The Create3DPrimitive() method creates a Capsule with rigid body physics. Because the capsule is placed 8 units above the ground, it will fall due to gravity. Note that it's important to remove the capsule from memory once it's no longer visible in the scene, to free up resources and ensure the CPU isn't unnecessarily calculating physics for it Additional Examples Explore more examples listed in the menu on the left, categorized by the programming language and level of complexity. These examples provide a deeper understanding of how to work with a code-only project in Stride, showcasing various functionalities and implementations. The examples are organized under the following sections: C# Basic Examples: Contains basic examples demonstrating fundamental concepts using C#. C# Advanced Examples: Features more advanced scenarios and implementations using C#. F# Basic Examples: Basic examples showcasing fundamental concepts using F#. VB Basic Examples: Demonstrates fundamental concepts using Visual Basic. To view an example, click on its name in the menu, and you will be navigated to a page with a detailed explanation and code snippets."
  },
  "manual/code-only/examples/advance-examples.html": {
    "href": "manual/code-only/examples/advance-examples.html",
    "title": "Code Only Advance Examples | Stride Manual",
    "keywords": "Code Only Advance Examples This page provides a brief overview of the advance examples available for code-only projects in Stride. You can explore each example in detail. Each linked example page contains detailed code snippets and explanations. Examples Overview Myra UI - Draggable Window, GetService(): Demonstrates how to use Myra UI by creating a simple draggable window, displaying a health bar, and accessing registered services. Image Processing: Interactive Console Application For those who prefer a more interactive approach, we provide a console application that allows you to run these examples directly. This console app, available in the Stride.CommunityToolkit.Examples project, offers an interactive menu for selecting and running the examples. Here's a glimpse of the interactive menu provided by the console application: Stride Community Toolkit Examples [1] Basic Example - Capsule with rigid body [2] Basic Example - Capsule with rigid body in F# [3] Basic Example - Capsule with rigid body in Visual Basic [4] Basic Example - Give me a cube [5] Basic Example - Stride UI - Canvas - Capsule with rigid body and Window [6] Basic Example - Stride UI - Grid - Save and load game state [7] Basic Example - Procedural Geometry [8] Advance Example - Myra UI - Draggable Window, GetService() [9] Advance Example - Image Processing [Q] Quit Enter choice and press ENTER to continue"
  },
  "manual/code-only/examples/basic-examples-fs.html": {
    "href": "manual/code-only/examples/basic-examples-fs.html",
    "title": "F# Code Only Basic Examples | Stride Manual",
    "keywords": "F# Code Only Basic Examples This page provides a brief overview of the basic examples available for code-only projects in Stride. You can explore each example in detail. Each linked example page contains detailed code snippets and explanations. Examples Overview Capsule with rigid body: Demonstrates how to create a 3D capsule entity and position it in a scene. Interactive Console Application For those who prefer a more interactive approach, we provide a console application that allows you to run these examples directly. This console app, available in the Stride.CommunityToolkit.Examples project, offers an interactive menu for selecting and running the examples. Here's a glimpse of the interactive menu provided by the console application: Stride Community Toolkit Examples [1] Basic Example - Capsule with rigid body [2] Basic Example - Capsule with rigid body in F# [3] Basic Example - Capsule with rigid body in Visual Basic [4] Basic Example - Give me a cube [5] Basic Example - Stride UI - Canvas - Capsule with rigid body and Window [6] Basic Example - Stride UI - Grid - Save and load game state [7] Basic Example - Procedural Geometry [8] Advance Example - Myra UI - Draggable Window, GetService() [9] Advance Example - Image Processing [Q] Quit Enter choice and press ENTER to continue"
  },
  "manual/code-only/examples/basic-examples-vb.html": {
    "href": "manual/code-only/examples/basic-examples-vb.html",
    "title": "Visual Basic Code Only Basic Examples | Stride Manual",
    "keywords": "Visual Basic Code Only Basic Examples This page provides a brief overview of the basic examples available for code-only projects in Stride. You can explore each example in detail. Each linked example page contains detailed code snippets and explanations. Examples Overview Capsule with rigid body: Demonstrates how to create a 3D capsule entity and position it in a scene. Interactive Console Application For those who prefer a more interactive approach, we provide a console application that allows you to run these examples directly. This console app, available in the Stride.CommunityToolkit.Examples project, offers an interactive menu for selecting and running the examples. Here's a glimpse of the interactive menu provided by the console application: Stride Community Toolkit Examples [1] Basic Example - Capsule with rigid body [2] Basic Example - Capsule with rigid body in F# [3] Basic Example - Capsule with rigid body in Visual Basic [4] Basic Example - Give me a cube [5] Basic Example - Stride UI - Canvas - Capsule with rigid body and Window [6] Basic Example - Stride UI - Grid - Save and load game state [7] Basic Example - Procedural Geometry [8] Advance Example - Myra UI - Draggable Window, GetService() [9] Advance Example - Image Processing [Q] Quit Enter choice and press ENTER to continue"
  },
  "manual/code-only/examples/basic-examples.html": {
    "href": "manual/code-only/examples/basic-examples.html",
    "title": "C# Code Only Basic Examples | Stride Manual",
    "keywords": "C# Code Only Basic Examples This page provides a brief overview of the basic examples available for code-only projects in Stride. You can explore each example in detail. Each linked example page contains detailed code snippets and explanations. Examples Overview Capsule with rigid body: Demonstrates how to create a 3D capsule entity and position it in a scene. Give me a cube: A variation of the above example, positioning a 3D cube in a scene. Stride UI - Capsule with rigid body and Window: Demonstrates how to create a 3D capsule entity and position it in a scene, and how to create a simple window displaying a text message. Procedural geometry: Demonstrates how to create procedural geometry meshes such as a triangle, plane, and circle, and how to add them to a scene. Interactive Console Application For those who prefer a more interactive approach, we provide a console application that allows you to run these examples directly. This console app, available in the Stride.CommunityToolkit.Examples project, offers an interactive menu for selecting and running the examples. Here's a glimpse of the interactive menu provided by the console application: Stride Community Toolkit Examples [1] Basic Example - Capsule with rigid body [2] Basic Example - Capsule with rigid body in F# [3] Basic Example - Capsule with rigid body in Visual Basic [4] Basic Example - Give me a cube [5] Basic Example - Stride UI - Canvas - Capsule with rigid body and Window [6] Basic Example - Stride UI - Grid - Save and load game state [7] Basic Example - Procedural Geometry [8] Advance Example - Myra UI - Draggable Window, GetService() [9] Advance Example - Image Processing [Q] Quit Enter choice and press ENTER to continue"
  },
  "manual/code-only/examples/capsule-with-rigid-body-fs.html": {
    "href": "manual/code-only/examples/capsule-with-rigid-body-fs.html",
    "title": "Capsule with rigid body in F# | Stride Manual",
    "keywords": "Capsule with rigid body in F# This code example demonstrates how to initialize a game, set up a basic 3D scene, create a 3D capsule entity, set its position, and add it to the scene using the extensions provided by the toolkit. The CreatePrimitive() method, a part of the toolkit, automatically equips the capsule entity with a rigid body and a collider. This example serves as a simple starting point for building a game with Stride, leveraging the utilities provided by the toolkit to simplify common game development tasks. View on GitHub. open Stride.CommunityToolkit.Engine; open Stride.CommunityToolkit.Skyboxes; open Stride.CommunityToolkit.Rendering.ProceduralModels; open Stride.Core.Mathematics; open Stride.Engine; let game = new Game() let Start rootScene = game.SetupBase3DScene() game.AddSkybox() |> ignore game.AddProfiler() |> ignore let firstBox = game.Create3DPrimitive(PrimitiveModelType.Capsule); firstBox.Transform.Position <- new Vector3(0f, 2.5f, 0f) firstBox.Scene <- rootScene [<EntryPoint>] let main argv = game.Run(start = Start) 0 let game = new Game() Creates a new instance of the Game class, serving as the central part of the Stride engine for managing game loop, scenes, and entities. let Start rootScene = Defines a function named Start that takes a Scene object named rootScene as an argument. game.SetupBase3DScene() Sets up a basic 3D scene with a default camera, lighting, and skybox. game.AddProfiler() |> ignore Adds a profiler to the game and discards the unneeded return value. let firstBox = game.CreatePrimitive(PrimitiveModelType.Capsule); Creates a new 3D capsule primitive entity. firstBox.Transform.Position <- new Vector3(0f, 2.5f, 0f) Sets the 3D position of the created entity. firstBox.Scene <- rootScene Adds the entity to the rootScene. [<EntryPoint>] Specifies that the following main function is the entry point of the application. let main argv = Defines the main function, which will be the entry point for the application. game.Run(start = Start) Initiates the game loop by passing the Start function as the start delegate. 0 Indicates a successful program execution."
  },
  "manual/code-only/examples/capsule-with-rigid-body-vb.html": {
    "href": "manual/code-only/examples/capsule-with-rigid-body-vb.html",
    "title": "Capsule with rigid body in Visual Basic | Stride Manual",
    "keywords": "Capsule with rigid body in Visual Basic This code example demonstrates how to initialize a game, set up a basic 3D scene, create a 3D capsule entity, set its position, and add it to the scene using the extensions provided by the toolkit. The CreatePrimitive() method, a part of the toolkit, automatically equips the capsule entity with a rigid body and a collider. This example serves as a simple starting point for building a game with Stride, leveraging the utilities provided by the toolkit to simplify common game development tasks. View on GitHub. Imports Stride.CommunityToolkit.Engine Imports Stride.CommunityToolkit.Rendering.ProceduralModels Imports Stride.CommunityToolkit.Skyboxes Imports Stride.Core.Mathematics Imports Stride.Engine Imports GameExtensions = Stride.CommunityToolkit.Engine.GameExtensions Module Program Private game As New Game() Sub Main() GameExtensions.Run(game, Nothing, AddressOf StartGame) End Sub Private Sub StartGame(rootScene As Scene) game.SetupBase3DScene() game.AddSkybox() game.AddProfiler() Dim entity = game.Create3DPrimitive(PrimitiveModelType.Capsule) entity.Transform.Position = New Vector3(0, 8, 0) entity.Scene = rootScene End Sub End Module Private game As New Game() This line of code creates a new instance of the Game class. The Game class is central to the Stride engine, managing the overall game loop, scenes, and updates to the entities. GameExtensions.Run(game, Nothing, AddressOf StartGame) This line initiates the game loop. The Run method, from GameExtensions, is responsible for starting the game and it takes a reference to the StartGame method as a parameter. This method is called once when the game starts. The Nothing argument here is for an optional parameter that is not being used in this case. game.SetupBase3DScene() This line sets up a basic 3D scene. It's a helper method provided to quickly set up a scene with a default camera, lighting, and skybox. Dim entity = game.CreatePrimitive(PrimitiveModelType.Capsule) Here, a new entity is created in the form of a 3D capsule primitive. The CreatePrimitive method is a helper method provided to create basic 3D shapes. entity.Transform.Position = New Vector3(0, 8, 0) This line sets the position of the created entity in the 3D space. The Position property of the Transform component determines the location of the entity. entity.Scene = rootScene Finally, the entity is added to the rootScene. The Scene property of an entity determines which scene it belongs to."
  },
  "manual/code-only/examples/capsule-with-rigid-body.html": {
    "href": "manual/code-only/examples/capsule-with-rigid-body.html",
    "title": "Capsule with rigid body | Stride Manual",
    "keywords": "Capsule with rigid body This code example demonstrates how to initialize a game, set up a basic 3D scene, create a 3D capsule entity, set its position, and add it to the scene using the extensions provided by the toolkit. The CreatePrimitive() method, a part of the toolkit, automatically equips the capsule entity with a rigid body and a collider. This example serves as a simple starting point for building a game with Stride, leveraging the utilities provided by the toolkit to simplify common game development tasks. View on GitHub. using Stride.CommunityToolkit.Engine; using Stride.CommunityToolkit.Rendering.ProceduralModels; using Stride.CommunityToolkit.Skyboxes; using Stride.Core.Mathematics; using Stride.Engine; using var game = new Game(); game.Run(start: (Scene rootScene) => { game.SetupBase3DScene(); game.AddSkybox(); var entity = game.Create3DPrimitive(PrimitiveModelType.Capsule); entity.Transform.Position = new Vector3(0, 8, 0); entity.Scene = rootScene; }); using var game = new Game(); This line of code creates a new instance of the Game class. The Game class is the central part of the Stride engine, managing the overall game loop, the scenes, and the updates to the entities. The using keyword ensures that the Dispose() method is called on the game object when it goes out of scope, ensuring that any resources it uses are properly cleaned up game.Run(start: (Scene rootScene) => This line initiates the game loop. The Run method is responsible for starting the game, and it takes a delegate as a parameter. This delegate is a function that is called once when the game starts. The rootScene parameter represents the main scene of your game. game.SetupBase3DScene(); This line sets up a basic 3D scene. It's a helper method provided to quickly set up a scene with a default camera, lighting, and skybox. var entity = game.CreatePrimitive(PrimitiveModelType.Capsule); Here, a new entity is created in the form of a 3D capsule primitive. The CreatePrimitive method is another helper method provided to create basic 3D shapes. entity.Transform.Position = new Vector3(0, 8, 0); This line sets the position of the created entity in the 3D space. The Position property of the Transform component determines the location of the entity. entity.Scene = rootScene; Finally, the entity is added to the rootScene. The Scene property of an entity determines which scene it belongs to."
  },
  "manual/code-only/examples/give-me-cube-body.html": {
    "href": "manual/code-only/examples/give-me-cube-body.html",
    "title": "Give me a cube | Stride Manual",
    "keywords": "Give me a cube This example demonstrates the essential steps to create a 3D cube in Stride. Just like the previous example, the cube entity comes automatically equipped with a rigid body and a collider, thanks to the CreatePrimitive() method. The cube is positioned at (1f, 0.5f, 3f) in the 3D world space. This example is perfect for those who are new to 3D game development with Stride. View on GitHub. using Stride.CommunityToolkit.Engine; using Stride.CommunityToolkit.Rendering.ProceduralModels; using Stride.CommunityToolkit.Skyboxes; using Stride.Core.Mathematics; using Stride.Engine; using var game = new Game(); game.Run(start: Start); void Start(Scene rootScene) { game.SetupBase3DScene(); game.AddSkybox(); var entity = game.Create3DPrimitive(PrimitiveModelType.Cube); entity.Transform.Position = new Vector3(1f, 0.5f, 3f); entity.Scene = rootScene; }"
  },
  "manual/code-only/examples/image-processing.html": {
    "href": "manual/code-only/examples/image-processing.html",
    "title": "Image processing | Stride Manual",
    "keywords": "Image processing View on GitHub. using Stride.CommunityToolkit.Engine; using Stride.CommunityToolkit.Extensions; using Stride.CommunityToolkit.Rendering.Utilities; using Stride.Core.Mathematics; using Stride.Engine; using Stride.Graphics; using Stride.Rendering.Images; using Stride.Rendering.Sprites; using Stride.UI; using Stride.UI.Controls; using Stride.UI.Panels; using System.Reflection; using var game = new Game(); game.Run(start: Start); static void Start(Game game) { game.Window.SetSize(new Int2(1000, 1080)); game.SetupBase(); var directory = Path.GetDirectoryName(Assembly.GetEntryAssembly()!.Location)!; var filePath = Path.Combine(directory, \"input.png\"); using var input = File.Open(filePath, FileMode.Open); var texture = Texture.Load(game.GraphicsDevice, input); var grid = new UniformGrid { Width = 1000, Height = 1000, Columns = 9, Rows = 9, Margin = new Thickness(8, 8, 8, 8) }; grid.Children.Add(CreateCard(texture)); for (var a = 0; a < 9; a++) { var anchor = (TextureCanvas.Anchor)a; for (var s = 0; s < 4; s++) { var stretch = (TextureCanvas.Stretch)s; using (var canvas = game.CreateTextureCanvas(new Size2(1024, 1024))) { canvas.DrawTexture(texture, new Rectangle(0, 128, 256, 256), new Rectangle(128, 256, 768, 512), null, stretch, anchor, SamplingPattern.Expanded); var card = CreateCard(canvas.ToTexture()); card.SetGridColumn(a); card.SetGridRow(s * 2 + 1); grid.Children.Add(card); } using (var canvas = game.CreateTextureCanvas(new Size2(1024, 1024))) { canvas.DrawTexture(texture, new Rectangle(0, 128, 256, 256), new Rectangle(256, 128, 512, 768), null, stretch, anchor); var card = CreateCard(canvas.ToTexture()); card.SetGridColumn(a); card.SetGridRow(s * 2 + 2); grid.Children.Add(card); } } } var entity = new Entity { Scene = game.SceneSystem.SceneInstance.RootScene }; entity.Add(new UIComponent { Page = new UIPage { RootElement = grid } }); } static Border CreateCard(Texture texture) { var card = new Border { BorderColor = new Color(25, 25, 25), BackgroundColor = new Color(120, 120, 120), BorderThickness = new Thickness(2, 2, 2, 2), Padding = new Thickness(8, 8, 8, 8), Margin = new Thickness(4, 4, 4, 4), Content = new StackPanel { Orientation = Orientation.Vertical, Children = { new ImageElement { Source = new SpriteFromTexture { Texture = texture } } } } }; return card; }"
  },
  "manual/code-only/examples/myra-ui-draggable-window-and-services.html": {
    "href": "manual/code-only/examples/myra-ui-draggable-window-and-services.html",
    "title": "Myra UI - Draggable Window, GetService() | Stride Manual",
    "keywords": "Myra UI - Draggable Window, GetService() This example showcases how to integrate Myra, an external UI library, into your game developed with Stride. Myra provides a rich set of widgets and functionalities to enhance the graphical user interface of your game. Key features in this example: Draggable Window: The example demonstrates how to implement a draggable window within the game using Myra's UI components. This draggable window serves as a movable and interactive element that can host other widgets, thus offering a dynamic interface experience for the player. Health Bar: This example features two distinct health bars. The first one is statically defined within the MainView class, while the second is dynamically added during runtime. Both bars can be customized to represent a variety of in-game attributes, such as player health, experience, or other performance metrics. Dynamic Initialization: The UI components, including the health bar, are initialized dynamically during the game's runtime. This allows for greater flexibility and responsiveness in the game's UI. Service Retrieval: The example illustrates the use of GetService() to retrieve services dynamically, thus fostering loose coupling between various components of the game. This practice promotes code reusability and easier maintenance. By following this example, you will gain insights into how to extend your game's capabilities by leveraging external libraries for UI and best practices for service retrieval and dynamic UI component initialization. View on GitHub. using Example04_MyraUI; using Stride.CommunityToolkit.Engine; using Stride.CommunityToolkit.Rendering.Compositing; using Stride.CommunityToolkit.Skyboxes; using Stride.Engine; using Stride.Games; using var game = new Game(); // State flag to track health bar visibility bool isHealthBarVisible = false; game.Run(start: Start, update: Update); void Start(Scene rootScene) { SetupBase3DScene(); } void Update(Scene rootScene, GameTime time) { InitializeHealthBar(); } void SetupBase3DScene() { game.AddGraphicsCompositor() .AddCleanUIStage() //optional .AddSceneRenderer(new MyraSceneRenderer()); game.Add3DCamera().Add3DCameraController(); game.AddDirectionalLight(); game.AddSkybox(); game.Add3DGround(); } /// <summary> /// Initializes the health bar if it is not already visible. /// </summary> void InitializeHealthBar() { if (isHealthBarVisible) return; var mainView = game.Services.GetService<MainView>(); if (mainView == null) return; // Create and add a new health bar to the main view mainView.Widgets.Add(UIUtils.CreateHealthBar(-50, \"#FFD961FF\")); isHealthBarVisible = true; } MyraSceneRenderer.cs This class provides functionality for rendering Myra-based user interfaces in a Stride game. using Myra; using Myra.Graphics2D.UI; using Stride.Engine; using Stride.Games; using Stride.Graphics; using Stride.Rendering; using Stride.Rendering.Compositing; namespace Example04_MyraUI; /// <summary> /// Provides functionality for rendering Myra-based user interfaces in a Stride game. /// </summary> /// <remarks> /// This renderer uses the Myra UI library to render the user interface and integrates it into the Stride rendering pipeline. /// </remarks> public class MyraSceneRenderer : SceneRendererBase { /// <summary> /// Gets or sets the root of all UI elements to be rendered. /// </summary> /// <remarks> /// The desktop serves as the root container for all UI elements rendered by Myra. /// </remarks> private Desktop? _desktop; /// <summary> /// Gets or sets the main view of the application UI. /// </summary> /// <remarks> /// The main view contains the primary UI elements that the user will interact with. /// </remarks> private MainView? _mainView; /// <summary> /// Initializes the core rendering properties. /// </summary> /// <remarks> /// This method sets up the Myra environment, configures the main view, and associates it with the desktop. /// </remarks> protected override void InitializeCore() { base.InitializeCore(); MyraEnvironment.Game = (Game)Services.GetService<IGame>(); InitializeMainView(); InitializeDesktop(); } /// <summary> /// Initializes the main view and adds it to the Stride services. /// </summary> private void InitializeMainView() { _mainView = new MainView(); Services.AddService(_mainView); } /// <summary> /// Initializes the desktop and sets the root view. /// </summary> private void InitializeDesktop() { _desktop = new Desktop { Root = _mainView }; } protected override void DrawCore(RenderContext context, RenderDrawContext drawContext) { // Clear depth buffer drawContext.CommandList.Clear(GraphicsDevice.Presenter.DepthStencilBuffer, DepthStencilClearOptions.DepthBuffer); // Render UI _desktop?.Render(); } } MainView.cs This class creates the main UI window MainView and the health bar using HorizontalProgressBar. using Myra.Graphics2D.UI; namespace Example04_MyraUI; /// <summary> /// Represents the main user interface view for the application. /// </summary> /// <remarks> /// The MainView class is responsible for creating and managing key UI elements such as a health bar and a test window. /// </remarks> public class MainView : Panel { /// <summary> /// Gets the health bar UI element. /// </summary> /// <remarks> /// The health bar shows the current health status. /// </remarks> public HorizontalProgressBar HealthBar { get; private set; } = null!; /// <summary> /// Gets the test window UI element. /// </summary> /// <remarks> /// The example window is used for demo purposes and contains a sample label. /// </remarks> public Window ExampleWindow { get; private set; } = null!; /// <summary> /// Initializes a new instance of the <see cref=\"MainView\"/> class. /// </summary> public MainView() { InitializeHealthBar(); InitializeTestWindow(); } /// <summary> /// Initializes the health bar UI element. /// </summary> private void InitializeHealthBar() => Widgets.Add(UIUtils.CreateHealthBar(-20, \"#4BD961FF\")); /// <summary> /// Initializes the test window UI element. /// </summary> private void InitializeTestWindow() { var label = new Label { VerticalSpacing = 10, Text = \"This is a Test! Hello from Myra! This is a draggable window and below two progress bars.\" }; ExampleWindow = new Window { Title = \"Hello From Myra\", Left = 590, Top = 200, Content = label }; Widgets.Add(ExampleWindow); } } UIUtils.cs This class contains helper methods to create UI elements, which are used in multiple places in the example. using Myra.Graphics2D.Brushes; using Myra.Graphics2D.UI; namespace Example04_MyraUI; /// <summary> /// Utility class to create custom UI widgets. /// </summary> public static class UIUtils { /// <summary> /// Creates a new <see cref=\"HorizontalProgressBar\"/> with the given top position and filler color. /// </summary> /// <param name=\"top\">The top position of the progress bar.</param> /// <param name=\"filler\">The filler color of the progress bar.</param> /// <returns>A new <see cref=\"HorizontalProgressBar\"/> instance.</returns> public static HorizontalProgressBar CreateHealthBar(int top, string filler) { return new HorizontalProgressBar { HorizontalAlignment = HorizontalAlignment.Left, VerticalAlignment = VerticalAlignment.Bottom, Value = 100, Filler = new SolidBrush(filler), Left = 20, Top = top, Width = 300, Height = 20, Background = new SolidBrush(\"#202020FF\") }; } } Other Examples Using Myra in Stride Engine Tutorial"
  },
  "manual/code-only/examples/procedural-geometry.html": {
    "href": "manual/code-only/examples/procedural-geometry.html",
    "title": "Procedural geometry | Stride Manual",
    "keywords": "Procedural geometry In this example, we delve into creating procedural geometry meshes including a triangle, a plane, and a circle, and integrate them into a Stride scene. Utilizing the MeshBuilder class from the toolkit, the process of crafting and rendering these geometries is streamlined. The MeshBuilder class is employed to define the layout and data for each mesh. For instance, the GiveMeATriangle, GiveMeAPlane, and GiveMeACircle methods demonstrate how to configure vertices, indices, and other properties to form a triangle, a plane, and a circle, respectively. The Update method demonstrates a dynamic adjustment to the circle's segments count over time, showcasing a simple animation effect. For more details of MeshBuilder, refer to our MeshBuilder manual. View on GitHub. using Stride.CommunityToolkit.Engine; using Stride.CommunityToolkit.Rendering.Utilities; using Stride.CommunityToolkit.Skyboxes; using Stride.Core.Mathematics; using Stride.Engine; using Stride.Games; using Stride.Graphics; using Stride.Rendering; using Stride.Rendering.Materials; using Stride.Rendering.Materials.ComputeColors; using var game = new Game(); Entity? circleEntity = null; game.Run(start: Start, update: Update); void Start(Scene rootScene) { game.SetupBase3DScene(); game.AddSkybox(); AddMesh(game.GraphicsDevice, rootScene, Vector3.Zero, GiveMeATriangle); AddMesh(game.GraphicsDevice, rootScene, Vector3.UnitX * 2, GiveMeAPlane); } void Update(Scene rootScene, GameTime gameTime) { var segments = (int)((Math.Cos(gameTime.Total.TotalMilliseconds / 500) + 1) / 2 * 47) + 3; circleEntity?.Remove(); circleEntity = AddMesh(game.GraphicsDevice, rootScene, Vector3.UnitX * -2, b => GiveMeACircle(b, segments)); } void GiveMeATriangle(MeshBuilder meshBuilder) { meshBuilder.WithIndexType(IndexingType.Int16); meshBuilder.WithPrimitiveType(PrimitiveType.TriangleList); var position = meshBuilder.WithPosition<Vector3>(); var color = meshBuilder.WithColor<Color>(); meshBuilder.AddVertex(); meshBuilder.SetElement(position, new Vector3(0, 0, 0)); meshBuilder.SetElement(color, Color.Red); meshBuilder.AddVertex(); meshBuilder.SetElement(position, new Vector3(1, 0, 0)); meshBuilder.SetElement(color, Color.Green); meshBuilder.AddVertex(); meshBuilder.SetElement(position, new Vector3(.5f, 1, 0)); meshBuilder.SetElement(color, Color.Blue); meshBuilder.AddIndex(0); meshBuilder.AddIndex(2); meshBuilder.AddIndex(1); } void GiveMeAPlane(MeshBuilder meshBuilder) { meshBuilder.WithIndexType(IndexingType.Int16); meshBuilder.WithPrimitiveType(PrimitiveType.TriangleList); var position = meshBuilder.WithPosition<Vector3>(); var color = meshBuilder.WithColor<Color>(); meshBuilder.AddVertex(); meshBuilder.SetElement(position, new Vector3(0, 0, 0)); meshBuilder.SetElement(color, Color.Red); meshBuilder.AddVertex(); meshBuilder.SetElement(position, new Vector3(0, 1, 0)); meshBuilder.SetElement(color, Color.Green); meshBuilder.AddVertex(); meshBuilder.SetElement(position, new Vector3(1, 1, 0)); meshBuilder.SetElement(color, Color.Blue); meshBuilder.AddVertex(); meshBuilder.SetElement(position, new Vector3(1, 0, 0)); meshBuilder.SetElement(color, Color.Yellow); meshBuilder.AddIndex(0); meshBuilder.AddIndex(1); meshBuilder.AddIndex(2); meshBuilder.AddIndex(0); meshBuilder.AddIndex(2); meshBuilder.AddIndex(3); } void GiveMeACircle(MeshBuilder meshBuilder, int segments) { meshBuilder.WithIndexType(IndexingType.Int16); meshBuilder.WithPrimitiveType(PrimitiveType.TriangleList); var position = meshBuilder.WithPosition<Vector3>(); var color = meshBuilder.WithColor<Color4>(); for (var i = 0; i < segments; i++) { var x = (float)Math.Sin(Math.Tau / segments * i) / 2; var y = (float)Math.Cos(Math.Tau / segments * i) / 2; var hsl = new ColorHSV(360f / segments * i, 1, 1, 1).ToColor(); meshBuilder.AddVertex(); meshBuilder.SetElement(position, new Vector3(x + .5f, y + .5f, 0)); meshBuilder.SetElement(color, hsl); } meshBuilder.AddVertex(); meshBuilder.SetElement(position, new Vector3(.5f, .5f, 0)); meshBuilder.SetElement(color, Color.Black.ToColor4()); for (var i = 0; i < segments; i++) { meshBuilder.AddIndex(segments); meshBuilder.AddIndex(i); meshBuilder.AddIndex((i + 1) % segments); } } Entity AddMesh(GraphicsDevice graphicsDevice, Scene rootScene, Vector3 position, Action<MeshBuilder> build) { using var meshBuilder = new MeshBuilder(); build(meshBuilder); var entity = new Entity { Scene = rootScene, Transform = { Position = position } }; var model = new Model { new MaterialInstance { Material = Material.New(graphicsDevice, new MaterialDescriptor { Attributes = new MaterialAttributes { DiffuseModel = new MaterialDiffuseLambertModelFeature(), Diffuse = new MaterialDiffuseMapFeature { DiffuseMap = new ComputeVertexStreamColor() }, } }) }, new Mesh { Draw = meshBuilder.ToMeshDraw(graphicsDevice), MaterialIndex = 0 } }; entity.Add(new ModelComponent { Model = model }); return entity; }"
  },
  "manual/code-only/examples/stride-ui-capsule-with-rigid-body.html": {
    "href": "manual/code-only/examples/stride-ui-capsule-with-rigid-body.html",
    "title": "Capsule with rigid body and window | Stride Manual",
    "keywords": "Capsule with rigid body and window In this example, we demonstrate how to set up a 3D scene that includes a capsule with a rigid body as well as a simple window displaying a text message. This example is organized into multiple methods for better readability and maintainability. It is structured as follows: Start(Scene rootScene) This is the entry point for setting up the scene. It calls other methods to set up the 3D scene, add the capsule, load the font, and add the window. AddCapsule(Scene rootScene) This method creates a 3D capsule and adds it to the scene at a specific position. LoadFont() This method loads the font that will be used for the UI window. AddWindow(Scene rootScene) This method calls CreateUIEntity() to create an entity with a UI component, and then adds this entity to the root scene. CreateUIEntity() This method creates an entity that has a UI component. The UI component includes a canvas as its root element. CreateCanvas() This method creates a canvas element that will be the root of the UI component. CreateTextBlock(SpriteFont? _font) This method creates a TextBlock element that displays the message \"Hello, World\". It uses the loaded font and sets other properties like color and size. This modular approach makes the code easier to understand and maintain. Each method has a clear responsibility. View on GitHub. using Stride.CommunityToolkit.Engine; using Stride.CommunityToolkit.Rendering.ProceduralModels; using Stride.CommunityToolkit.Skyboxes; using Stride.Core.Mathematics; using Stride.Engine; using Stride.Graphics; using Stride.Rendering; using Stride.UI; using Stride.UI.Controls; using Stride.UI.Panels; SpriteFont? _font; using var game = new Game(); game.Run(start: Start); void Start(Scene rootScene) { game.SetupBase3DScene(); game.AddSkybox(); AddCapsule(rootScene); LoadFont(); AddWindow(rootScene); } void AddCapsule(Scene rootScene) { var entity = game.Create3DPrimitive(PrimitiveModelType.Capsule); entity.Transform.Position = new Vector3(0, 8, 0); entity.Scene = rootScene; } void LoadFont() { _font = game.Content.Load<SpriteFont>(\"StrideDefaultFont\"); } void AddWindow(Scene rootScene) { var uiEntity = CreateUIEntity(); uiEntity.Scene = rootScene; } Entity CreateUIEntity() { return new Entity { new UIComponent { Page = new UIPage { RootElement = CreateCanvas() }, RenderGroup = RenderGroup.Group31 } }; } Canvas CreateCanvas() { var canvas = new Canvas { Width = 300, Height = 100, BackgroundColor = new Color(248, 177, 149, 100) }; canvas.Children.Add(CreateTextBlock(_font)); return canvas; } TextBlock CreateTextBlock(SpriteFont? _font) { if (_font is null) { Console.WriteLine(\"Font is null\"); } return new TextBlock { Text = \"Hello, World\", TextColor = Color.White, TextSize = 20, Margin = new Thickness(3, 3, 3, 0), Font = _font }; }"
  },
  "manual/code-only/examples/stride-ui-cube-clicker.html": {
    "href": "manual/code-only/examples/stride-ui-cube-clicker.html",
    "title": "Cube clicker | Stride Manual",
    "keywords": "Cube clicker Cube Clicker is an instructive example using the Stride game engine, showcasing several key features: Game Data Management: Utilizes the NexVYaml serializer for saving and loading game data, demonstrating effective data persistence techniques. Stride UI Demonstration: Illustrates the use of Stride's UI elements, specifically Grid, TextBlock, and Button, to create interactive and user-friendly interfaces. Scripting in Stride: Employs both SyncScript and AsyncScript, providing examples of how to implement synchronous and asynchronous logic in a Stride game. Separation of Concerns: The game's architecture demonstrates good practice in separating different areas of logic, making the code more maintainable and scalable. When the game starts, it automatically loads the click data and cube positions from the previous session. The player interacts with dynamically generated cubes, with the game tracking left and right mouse clicks. View on GitHub. To explore the entire project, follow the link above. Below is the Program.cs file from the project for a quick overview. using Example07_CubeClicker.Managers; using Example07_CubeClicker.Scripts; using NexVYaml; using Stride.CommunityToolkit.Engine; using Stride.CommunityToolkit.Skyboxes; using Stride.Engine; using Stride.Graphics; // This example demonstrates how to load and save game data. When the game starts, // it automatically loads the click data and cube positions from the previous session. // The player interacts with dynamically generated cubes, with the game tracking left // and right mouse clicks. // In case of a corrupted Yaml file, navigate to the \\bin\\Debug\\net8.0\\data\\ // directory and delete the file manually. using var game = new Game(); // Register all DataContracted Types NexYamlSerializerRegistry.Init(); game.Run(start: Start); void Start(Scene rootScene) { game.SetupBase3DScene(); game.AddSkybox(); game.AddGroundGizmo(showAxisName: true); CreateAndRegisterGameManagerUI(rootScene); } void CreateAndRegisterGameManagerUI(Scene rootScene) { var font = game.Content.Load<SpriteFont>(\"StrideDefaultFont\"); var gameManager = new GameManager(font); game.Services.AddService(gameManager); var uiEntity = gameManager.CreateUI(); uiEntity.Add(new ClickHandlerComponent()); uiEntity.Scene = rootScene; }"
  },
  "manual/code-only/extensions.html": {
    "href": "manual/code-only/extensions.html",
    "title": "Extensions | Stride Manual",
    "keywords": "Extensions Each extension has been crafted to address common game development scenarios. They encapsulate and abstract away some of the complexities involved in setting up these scenarios, thus allowing you to focus more on the game logic and less on the setup and configuration. To modify an extension, you can examine its code to understand how it works. Once you grasp the underlying logic, you can modify it or even create a new extension that better suits your needs. Remember, these extensions are just tools to help you get started; don't be afraid to modify them or build your own to align with your unique requirements. In conclusion, whether you are a beginner just starting out with Stride or an experienced developer looking for a quicker way to get your game up and running, these extensions are a valuable resource. They are designed to be a starting point that can be used as is, or can be customised and built upon to create the perfect solution for your game development needs. Remember, the key to mastering Stride, and game development in general, is practice and exploration. So, go ahead, play around with these extensions, and start creating! GameExtensions.cs Some extensions return Entity so it can be further modified. Run() - Initialising the game, use start and update params SetupBase() - Adds graphics compositor, camera and directional light SetupBase2DScene() - Same as SetupBase() plus skybox, ground, mouse look camera SetupBase3DScene() - Same as SetupBase() plus skybox, ground, mouse look camera AddGraphicsCompositor() - Adds a default GraphicsCompositor Add2DCamera() - Adds 2D camera Add3DCamera() - Adds 3D camera AddDirectionalLight() - Adds directional light AddSkybox() - Adds skybox Add2DGround() - Adds 2D ground Add3DGround() - Adds 3D ground AddInfinite3DGround() - Adds infinite 3D ground GraphicsCompositorExtensions.cs AddCleanUIStage() - Adds a UI render stage and white/clean text effect to the given GraphicsCompositor AddGizmo() - Adds Gizmo to the ground ScriptComponentExtensions.cs | DeltaTime() || Easier way of getting DeltaTime as a float in seconds | | GetCamera() || Gets the first camera with the name \"Main\", currently doesnt work at the start of a game due to being null in the GraphicsCompositor | | GetCamera(string name) || Gets the first camera with the name provided, currently doesnt work at the start of a game due to being null in the GraphicsCompositor | | GetFirstCamera() || Gets the first camera in the GraphicsCompositor. currently doesnt work at the start of a game due to being null in the GraphicsCompositor | AnimationComponentExtensions.cs | PlayAnimation() || Plays an animation if not already playing | ModelComponentExtensions.cs | GetMeshHeight() || Gets the Mesh height as a float | | GetMeshHWL() || Gets the Mesh height, width and length as a Vector3 |"
  },
  "manual/code-only/index.html": {
    "href": "manual/code-only/index.html",
    "title": "Code Only | Stride Manual",
    "keywords": "Code Only Why Opt for Code-Only Over the Stride Editor? There are numerous reasons to consider using the Code-Only approach, especially if: You prefer not to install additional software on your computer (Stride installation not required). Learn C# or game development in a straightforward, code-first manner. You're aiming for a quick start in game development or C# programming. You're eager to dive into C# or game development, finding joy and educational value in hands-on coding experiences, whether you're new or experienced. You wish to see tangible, visual 2D/3D outputs instead of just console-based results. You want to gradually ease into game programming, mastering the basics before diving into the complexities of a game editor. You find typical coding environments and tools too overwhelming to navigate. You'd like to prototype quickly and easily game elements. You want an efficient way to grasp fundamental game development concepts and practices. You're interested in evaluating performance and features of Stride Game Engine without the overhead of a full-fledged editor. Have more reasons to add? Feel free to suggest them through our GitHub Issues. Extensions and Helpers Our extensions and helpers provide a simplified pathway for game creation, specifically designed for code-only projects within the Stride Game Engine. While they are not essential for running a game, they serve as time-saving tools to aid users, particularly those new to Stride, in quickly getting started. These extensions rely heavily on default settings to ease your initiation into the engine. However, they are not rigid; if the default settings don't fully meet your needs, you have the option to delve into the extension's implementation and create a custom version tailored to your preferences. Please note, although these extensions have been created with an opinionated approach to help beginners get up and running quickly, experienced users can also find value in them. They can serve as a foundation upon which you can build, modify, and extend to create more complex and customised solutions. Functionality Some functionality you would expect and which is working in the Stride Editor might not be possible yet. Please add your vote or submit another request in the GitHub Issues. References https://github.com/stride3d/stride/issues/1295 https://github.com/stride3d/stride/discussions/1253"
  },
  "manual/entity-extensions/index.html": {
    "href": "manual/entity-extensions/index.html",
    "title": "EntityExtensions.cs | Stride Manual",
    "keywords": "EntityExtensions.cs EntityExtensions.cs is a collection of extension methods enhancing the functionality of entities within the Stride game engine. These methods provide additional capabilities to entities, making it easier to work with them in various scenarios. From adding gizmos and interactive scripts to retrieving components and managing entity positions, these extensions offer a variety of useful tools for developers. Here is an overview of the available extension methods: Add2DCameraController() - Adds an interactive 2D camera script to the specified entity, enabling camera movement and rotation Add3DCameraController() - Adds an interactive 3D camera script to the specified entity, enabling camera movement and rotation AddGizmo() - Adds a TranslationGizmo to the specified entity with optional custom colors GetComponent<T>() - Retrieves the first component of the specified type from the entity GetComponents<T>() - Retrieves all components of the specified type from the entity Remove() - Removes the entity from its current scene by setting its Scene property to null TryGetComponent<T>() - Tries to retrieve a component of type T from the given entity WorldPosition() - An easier way to get world position These extensions are designed to streamline common tasks associated with entities in Stride, enhancing the overall efficiency and flexibility of game development workflows."
  },
  "manual/game-extensions/index.html": {
    "href": "manual/game-extensions/index.html",
    "title": "GameExtensions.cs | Stride Manual",
    "keywords": "GameExtensions.cs GameExtensions.cs provides a suite of extension methods for the Game class in the Stride game engine, enhancing its capabilities and offering convenient functionalities to game developers. These methods streamline common tasks in game development, ranging from performance monitoring to material creation and entity manipulation. Here's a brief overview of the functionalities provided by these extension methods: AddAllDirectionLighting() - Adds directional lighting from multiple angles to the current scene AddProfiler() - Adds a profiler to the game, which can be toggled on/off with Left Shift + Left Ctrl + P CreateMaterial() - Creates a basic material with optional color, specular reflection, and micro-surface smoothness values Create2DPrimitive() - Creates a primitive 2D model entity of the specified type with optional customizations Create3DPrimitive() - Creates a primitive 3D model entity of the specified type with optional customizations DeltaTime() - Gets the time elapsed since the last game update in seconds as a single-precision floating-point number DeltaTimeAccurate() - Gets the time elapsed since the last game update in seconds as a double-precision floating-point FPS() - Retrieves the current frames per second (FPS) rate of the running game AddEntityNames() - Debug. To see entity properties in the game AddPhysicsDebugger() - Debug. To see colliders. Tracked here Issue #9"
  },
  "manual/getting-started.html": {
    "href": "manual/getting-started.html",
    "title": "🚀 Get Started | Stride Manual",
    "keywords": "🚀 Get Started This article guides you through the initial steps to utilize the packages within the Stride Community Toolkit project. 🛠️ Prerequisites Ensure the following are installed to build/run the project. If you're on Stride 4.2+ already, these should be pre-installed. Microsoft Visual C++ 2015-2022 Redistributable vcredist_x64.exe (25MB) Note: You might be asked to restart your PC after the installation. .NET 8 SDK x64: Download (200MB) Verify installation with: dotnet --info IDE of your choice Visual Studio 2022 Visual Studio 2022 Community (Free) Visual Studio Code (Free, 95MB) Install C# Dev Kit extension Restart Visual Studio Code to ensure dotnet command functions properly Rider (Paid) 📦 Adding the NuGet package The toolkit is encapsulated in a single package named Stride.CommunityToolkit. This package embodies all the toolkit's functionalities. You can use your preferred IDE or the command line to add this package to your project. To add the NuGet package using the command line, execute the following command: dotnet add package Stride.CommunityToolkit --prerelease Use the left navigation to check our extension or dive in code-only section for simple examples."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Stride Community Toolkit Manual | Stride Manual",
    "keywords": "Stride Community Toolkit Manual Note The Stride Community Toolkit is currently in development. Documentation is incomplete and may contain errors. We published it early for your convenience, ahead of the toolkit's completion. Welcome to the Stride Community Toolkit Manual. This comprehensive guide is designed to help you make the most of the Stride Community Toolkit for Stride, an open-source C# game engine. Whether you are new to Stride or an experienced developer, these pages offer valuable insights, tips, and detailed instructions to enhance your game development experience. Table of Contents Getting Started: A guide for newcomers on how to set up and start using the Stride Community Toolkit. Code Only Approach: Learn how to create and manage Stride projects using only C# code. Create Project C# Basic Examples Capsule with Rigid Body Give me a Cube Stride UI - Capsule with Rigid Body and Window Procedural Geometry C# Advanced Examples Myra UI - Draggable Window, GetService() Image Processing F# Basic Examples Capsule with Rigid Body (F#) VB Basic Examples Capsule with Rigid Body (VB) Extensions Camera Extensions: These extensions provide powerful and convenient ways to interact with the camera. Animation Extensions Entity Extensions: Enhancements and utilities for working with entities. Game Extensions: Extensions ranging from performance monitoring to material creation and entity manipulation. Model Extensions Script Extensions: Additional features and tools for game development. Script System Extensions: Provides utilities for writing async methods. Rendering: A guide on rendering techniques. MeshBuilder: A utility class allowing dynamic creation of meshes at runtime. TextureCanvas: a utility class allowing dynamic creation of textures at runtime. Troubleshooting: Solutions and tips for common issues encountered while using the toolkit. Explore these sections to discover the full potential of the Stride Community Toolkit and enhance your game development skills."
  },
  "manual/model-extensions/index.html": {
    "href": "manual/model-extensions/index.html",
    "title": "ModelComponentExtensions.cs | Stride Manual",
    "keywords": "ModelComponentExtensions.cs Below is a list of available extension methods: GetMeshHWL() - Calculates the height, width, and length of the model represented by the ModelComponent GetMeshHeight() - Calculates the height of the model represented by the ModelComponent. GetMeshVerticesAndIndices() - Retrieves the vertices and indices from the ModelComponent's mesh data"
  },
  "manual/rendering/debug-shapes.html": {
    "href": "manual/rendering/debug-shapes.html",
    "title": "Debug Shapes | Stride Manual",
    "keywords": "Debug Shapes Available Shapes Sphere DrawSphere position - where the Sphere is located radius - the radius of the Sphere color - the color of the Sphere *optional duration - how long the Sphere will be visible *optional depthTest - if the Sphere should be visible through other objects *optional solid - if the Sphere should be solid or wireframe *optional Cube DrawCube position - where the Box is located size - the size of the Box rotation - the rotation of the Box *optional color - the color of the Sphere *optional duration - how long the Sphere will be visible *optional depthTest - if the Sphere should be visible through other objects *optional solid - if the Sphere should be solid or wireframe *optional Line DrawLine start - the start position of the Line end - the end position of the Line color - the color of the line *optional duration - how long the line will be visible *optional depthTest - if the line should be visible through other objects *optional Arrow DrawArrow start - the start position of the Arrow end - the end position of the Arrow coneHeight - the height of the Arrow cone *optional coneRadius - the radius of the Arrow cone *optional color - the color of the arrow *optional duration - how long the arrow will be visible *optional depthTest - if the arrow should be visible through other objects *optional solid - if the arrow cone should be solid or wireframe *optional Half Sphere DrawHalfSphere position - where the Half Sphere is located radius - the radius of the Half Sphere rotation - the rotation of the Half Sphere *optional color - the color of the Half Sphere *optional duration - how long the Half Sphere will be visible *optional depthTest - if the Half Sphere should be visible through other objects *optional solid - if the Half Sphere should be solid or wireframe *optional Cylinder DrawCylinder position - where the Cylinder is located radius - the radius of the Cylinder height - the height of the Cylinder rotation - the rotation of the Cylinder *optional color - the color of the Cylinder *optional duration - how long the Cylinder will be visible *optional depthTest - if the Cylinder should be visible through other objects *optional solid - if the Cylinder should be solid or wireframe *optional Cone DrawCone position - where the Cone is located radius - the radius of the Cone height - the height of the Cone rotation - the rotation of the Cone *optional color - the color of the Cone *optional duration - how long the Cone will be visible *optional depthTest - if the Cone should be visible through other objects *optional solid - if the Cone should be solid or wireframe *optional Capsule DrawCapsule position - where the Capsule is located radius - the radius of the Capsule height - the height of the Capsule rotation - the rotation of the Capsule *optional color - the color of the Capsule *optional duration - how long the Capsule will be visible *optional depthTest - if the Capsule should be visible through other objects *optional solid - if the Capsule should be solid or wireframe *optional Quad DrawQuad position - where the Quad is located size - the size of the Quad rotation - the rotation of the Quad *optional color - the color of the Quad *optional duration - how long the Quad will be visible *optional depthTest - if the Quad should be visible through other objects *optional solid - if the Quad should be solid or wireframe *optional Circle DrawCircle position - where the Circle is located radius - the radius of the Circle rotation - the rotation of the Circle *optional color - the color of the Circle *optional duration - how long the Circle will be visible *optional depthTest - if the Circle should be visible through other objects *optional solid - if the Circle should be solid or wireframe *optional Boundsing Box DrawBounds start - the start position of the Bounds end - the end position of the Bounds rotation - the rotation of the Bounds *optional color - the color of the bounds *optional duration - how long the bounds will be visible *optional depthTest - if the bounds should be visible through other objects *optional solid - if the bounds should be solid or wireframe *optional"
  },
  "manual/rendering/mesh-builder.html": {
    "href": "manual/rendering/mesh-builder.html",
    "title": "MeshBuilder | Stride Manual",
    "keywords": "MeshBuilder Introduction The MeshBuilder is a utility class allowing dynamic creation of meshes at runtime. Acting as a wrapper around the Mesh class, it provides a simpler API for defining the mesh layout and data. Once there was a triangle Like in all rendering examples let's start with a simple triangle. VertexElement A vertex element is a value assigned to a specific vertex. In Stride we can use a lot of different types to define our data some of them are Vector3, Vector4, Color, Int, Float, Half and more. We need to tell Stride how we want layout this data so our shader can read our various values. This is where vertex elements come in. They define a semanticName, semanticIndex, offset and a size. By default Stride allows you to define structs for your data or to use custom buffers for your data. For most use-cases this is probably fine and the easier approach compared to a mesh builder. However if you need to define your data dynamically or want a generalized method here we go. MeshBuilder The MeshBuilder abstracts away a lot of complexity behind custom buffers, type erasure, memory allocation and instead provides you with a simpler builder API to define your mesh dynamically. It uses the same concepts as Stride so you still have to define your layout manually but the process is easier and you don't need to worry about the memory layout yourself. To use a MeshBuilder just create a new instance. using var meshBuilder = new MeshBuilder() Note Notice the using at the front. This part is crucial as you should always dispose of your mesh builder when it's no longer needed. The builder utilizes pooling behind the scenes, and failing to dispose of it prevents the return of internal buffers, which can lead to significant performance degradation. Layout As we discussed earlier we need to tell the MeshBuilder which data types and fields we want to use. For this we use the various With... methods. Primitive Type First we need to select a primitive type in our example we create a bunch of triangles so we use this code: meshBuilder.WithPrimitiveType(PrimitiveType.TriangleList); Indexing The mesh builder supports three types of indexing, None, Int16 or Int32. In our case we definitely don't need more than 32k indices so we can safely use the Int16 version. meshBuilder.WithIndexType(IndexingType.Int16); Elements For our example we will use a vertex with a position and a color element. var position = meshBuilder.WithPosition<Vector3>(); var color = meshBuilder.WithColor<Color>(); These methods return the element index we need when we set our actual values. We use a Vector3 as our vertex position and a Color for our vertex color. Other types would work as well but these are very common so we will use them as well. Vertices Next we define our vertices. For that we use a new method AddVertex(). This will add a new vertex to our builder and allows us to use the Get/SetElement methods. You can also declare multiple vertices before setting the actual values but this is the simplest way for now. meshBuilder.AddVertex(); After this we can set our element data. For this we use the SetElement() method. It expects an element index (which we received from WithPosition and WithColor earlier) as well as your desired value. meshBuilder.SetElement(position, new Vector3(0, 0, 0)); meshBuilder.SetElement(color, Color.Red); We repeat this for the other two triangle points as well. meshBuilder.AddVertex(); meshBuilder.SetElement(position, new Vector3(1, 0, 0)); meshBuilder.SetElement(color, Color.Green); meshBuilder.AddVertex(); meshBuilder.SetElement(position, new Vector3(.5f, 1, 0)); meshBuilder.SetElement(color, Color.Blue); Indices Next we need to tell the MeshBuilder how we want to connect the vertices. We configured indexing for our builder so we need to do this explicitly. For a simple example like this you could also completely skip the indexing part and use IndexingType.None instead. The winding order in Stride is counter-clockwise so we use these indices. meshBuilder.AddIndex(0); meshBuilder.AddIndex(2); meshBuilder.AddIndex(1); Mesh The only thing left is building the actual mesh. For this we use this method. It expects a graphics device as an argument. If you call this from a script this is usually available for you using the GraphicsDevice property of your script. meshBuilder.ToMeshDraw(GraphicsDevice); Display To show this MeshDraw on screen we create a ModelComponent and add our MeshDraw as new model. We also need to define a material to use our vertex colors on screen. Else the Triangle would just be white. var model = new Model { new MaterialInstance { Material = Material.New(graphicsDevice, new MaterialDescriptor { Attributes = new MaterialAttributes { DiffuseModel = new MaterialDiffuseLambertModelFeature(), Diffuse = new MaterialDiffuseMapFeature { DiffuseMap = new ComputeVertexStreamColor() }, } }) }, new Mesh { Draw = meshBuilder.ToMeshDraw(graphicsDevice), MaterialIndex = 0 } } Congrats 🥳 you got a triangle. Example For a more comprehensive usage of MeshBuilder, explore our Procedural Geometry example where you'll find detailed code on creating complex geometries dynamically."
  },
  "manual/rendering/texture-canvas.html": {
    "href": "manual/rendering/texture-canvas.html",
    "title": "TextureCanvas | Stride Manual",
    "keywords": "TextureCanvas Introduction The TextureCanvas is a utility class allowing dynamic creation of textures at runtime. Acting as a wrapper around the Texture class, it provides a simpler API for simple texture manipulation. Motivation Stride is a very versatile and powerful engine which uses textures for a lot of data processing. Sometimes it is necessary to create these textures on the fly for example for simple tasks like scaling, applying image effects or to build new textures based on existing ones (texture atlas). TextureCanvas The TextureCanvas abstracts away a lot of complexity behind custom buffers, textures, memory allocation and instead provides you with a simpler builder API to define your texture dynamically. var renderContext = RenderContext.GetShared(game.Services); using var canvas = new TextureCanvas(renderContext); Note Notice the using at the front. This part is crucial as you should always dispose of your texture canvas when it's no longer needed. The canvas utilizes multiple image buffers behind the scenes, and failing to dispose of it prevents the release of these resources, which can lead to memory leaks. Initialization Most operations start with a single texture as a source so we need to load the texture first using the traditional texture api. var directory = Path.GetDirectoryName(Assembly.GetEntryAssembly()!.Location)!; var filePath = Path.Combine(directory, \"input.png\"); using var input = File.Open(filePath, FileMode.Open); var texture = Texture.Load(game.GraphicsDevice, input); This code loads an input image from the local file system and stores it as a temporary texture Loading In case you just want to manipulate a texture directly you can also use the similar api from the TextureCanvas directly. var directory = Path.GetDirectoryName(Assembly.GetEntryAssembly()!.Location)!; var filePath = Path.Combine(directory, \"input.png\"); canvas.Load(filePath) This would load the same texture directly as a buffer for further processing. Similar methods also exist for file streams or data buffers accordingly. Storing To get the resulting image you have the option to save the image to a file, stream or array depending on your requirements. var directory = Path.GetDirectoryName(Assembly.GetEntryAssembly()!.Location)!; var filePath = Path.Combine(directory, \"input.png\"); using var output = File.Open(filePath, FileMode.Open); canvas.Store(output, ImageFileType.Png); The most common approach however would be to get the result as a texture you can use for your UI or Materials. var output = canvas.ToTexture(); Note Notice that you shouldn't use these methods every frame as it involves GPU < - > CPU transfers which can block your game. Manipulation The TextureCanvas supports various image manipulations as well as image effects. Resample The Resample method changes the current size of the texture or pixel format while preserving the current content. The content will be resized to match the new size if neccesary. canvas.Resample(size: new Size2(512, 512), pixelFormat: PixelFormat.R8G8B8A8_UNorm) BrightFilter The BrightFilter method a BrightFilter filter to the image canvas.BrightFilter(threshold: 0.2f, steepness: 1.0f) GaussianBlur The GaussianBlur method applies a GaussianBlur effect to the image canvas.GaussianBlur(radius: 4, sigmaRatio: 2.0f) CoCMapBlur The CoCMapBlur method applies a CoCMapBlur effect to the image canvas.CoCMapBlur(radius: 4) Transform The Transform method applies a ColorTransformGroup effect to the image canvas.Transform(transforms: new[] { new LuminanceToChannelTransform{ ColorChannel = ColorChannel.R } }) Combine The Combine method applies a ColorCombiner effect to the image canvas.Combine( textures: new [] { sourceTexture1, sourceTexture2, null /* = Canvas Content */ }, factors: new [] { .2f, .2f, .6f } ); Colorize The Colorize method multiplies the current canvas content by a color to create a modulated image. canvas.Colorize(colorMultiplier: new Color4(1f, 0, 0)); Recolorize The Recolorize method works the same way as colorize but only uses the red-channel as an input. The color multiplier is optional, omitting it would change the image to a gray-scale image. canvas.Recolorize(colorMultiplier: new Color4(1f, 0, 0)); Apply The Apply method applies a custom ImageEffect to the image using var effect = new GaussianBlur(); canvas.Apply(effect); Drawing Sometimes you also want to customize which parts of a source texture is applied to which part of the canvas. You can also compose multiple texture into a single one using these methods. Stretch This enum controls the stretch mode when resampling the source rect to the target rect None: The texture preserves its original size. Overflowing content is cropped. Stretch: The texture is resized to fill the destination dimensions. The aspect ratio is not preserved. Contain: The texture is resized to fit in the destination dimensions while it preserves its native aspect ratio. Cover: The texture is resized to fill the destination dimensions while it preserves its native aspect ratio. If the aspect ratio of the destination rectangle differs from the source, the source texture is clipped to fit in the destination dimensions. Anchors This enum controls the alignment mode if clipping or padding is necessary. How the anchors behave is dependant on the selected stretch mode. TopLeft: Adjust the position so the top-left corner of the source and target rect are aligned. Top: Adjust the position so the top-edge center of the source and target rect are aligned. TopRight: Adjust the position so the top-right corner of the source and target rect are aligned. Left: Adjust the position so the left-edge center of the source and target rect are aligned. Center: Adjust the position so the center of the source and target rect are aligned. Right: Adjust the position so the right-edge center of the source and target rect are aligned. BottomLeft: Adjust the position so the bottom-left corner of the source and target rect are aligned. Bottom: Adjust the position so the bottom-edge center of the source and target rect are aligned. BottomRight: Adjust the position so the bottom-right corner of the source and target rect are aligned. Draw There are many overloads to the draw method but all of them follow this basic structure. canvas.DrawTexture( texture, [SourceRect], [TargetRect], [ColorMultiplier], [Stretch], [Anchor], [SamplingPattern] ); Note Notice the options for stretch and anchors these control how the texture is converted from the source rectangle to the target one. Examples Stretch Anchor Source Rect Target Rect Result None TopLeft None Top None TopRight None Left None Center None Right None BottomLeft None Bottom None BottomRight Stretch Any Stretch Any Contain AnyLeft Contain AnyRight Contain AnyTop Contain AnyBottom Contain AnyCenter Cover AnyLeft Cover AnyRight Cover AnyTop Cover AnyBottom Cover AnyCenter View on GitHub. using Stride.CommunityToolkit.Engine; using Stride.CommunityToolkit.Extensions; using Stride.CommunityToolkit.Rendering.Utilities; using Stride.Core.Mathematics; using Stride.Engine; using Stride.Graphics; using Stride.Rendering.Images; using Stride.Rendering.Sprites; using Stride.UI; using Stride.UI.Controls; using Stride.UI.Panels; using System.Reflection; using var game = new Game(); game.Run(start: Start); static void Start(Game game) { game.Window.SetSize(new Int2(1000, 1080)); game.SetupBase(); var directory = Path.GetDirectoryName(Assembly.GetEntryAssembly()!.Location)!; var filePath = Path.Combine(directory, \"input.png\"); using var input = File.Open(filePath, FileMode.Open); var texture = Texture.Load(game.GraphicsDevice, input); var grid = new UniformGrid { Width = 1000, Height = 1000, Columns = 9, Rows = 9, Margin = new Thickness(8, 8, 8, 8) }; grid.Children.Add(CreateCard(texture)); for (var a = 0; a < 9; a++) { var anchor = (TextureCanvas.Anchor)a; for (var s = 0; s < 4; s++) { var stretch = (TextureCanvas.Stretch)s; using (var canvas = game.CreateTextureCanvas(new Size2(1024, 1024))) { canvas.DrawTexture(texture, new Rectangle(0, 128, 256, 256), new Rectangle(128, 256, 768, 512), null, stretch, anchor, SamplingPattern.Expanded); var card = CreateCard(canvas.ToTexture()); card.SetGridColumn(a); card.SetGridRow(s * 2 + 1); grid.Children.Add(card); } using (var canvas = game.CreateTextureCanvas(new Size2(1024, 1024))) { canvas.DrawTexture(texture, new Rectangle(0, 128, 256, 256), new Rectangle(256, 128, 512, 768), null, stretch, anchor); var card = CreateCard(canvas.ToTexture()); card.SetGridColumn(a); card.SetGridRow(s * 2 + 2); grid.Children.Add(card); } } } var entity = new Entity { Scene = game.SceneSystem.SceneInstance.RootScene }; entity.Add(new UIComponent { Page = new UIPage { RootElement = grid } }); } static Border CreateCard(Texture texture) { var card = new Border { BorderColor = new Color(25, 25, 25), BackgroundColor = new Color(120, 120, 120), BorderThickness = new Thickness(2, 2, 2, 2), Padding = new Thickness(8, 8, 8, 8), Margin = new Thickness(4, 4, 4, 4), Content = new StackPanel { Orientation = Orientation.Vertical, Children = { new ImageElement { Source = new SpriteFromTexture { Texture = texture } } } } }; return card; }"
  },
  "manual/script-extensions/index.html": {
    "href": "manual/script-extensions/index.html",
    "title": "ScriptComponentExtensions.cs | Stride Manual",
    "keywords": "ScriptComponentExtensions.cs DeltaTime() - Returns delta time from ScriptComponent in a shorter format GetCamera() - Gets the camera from the GraphicsCompositor with the name \"Main\" GetCamera() - Gets the camera from the GraphicsCompositor with the given name GetFirstCamera() - Gets the first camera from the GraphicsCompositor"
  },
  "manual/script-system-extensions/index.html": {
    "href": "manual/script-system-extensions/index.html",
    "title": "ScriptSystemExtensions.cs | Stride Manual",
    "keywords": "ScriptSystemExtensions.cs DelayWarped() - Waits for a specified amount of time while taking into account the Update Time factor Delay() - Waits for a specified amount of time without considering the Update Time factor ExecuteInWarpedTime() - Continuously executes an action every frame during a specified amount of time while taking into account the Update Time factor ExecuteInTime() - Continuously executes an action every frame during a specified amount of time without considering the Update Time factor"
  },
  "manual/troubleshooting.html": {
    "href": "manual/troubleshooting.html",
    "title": "Troubleshooting | Stride Manual",
    "keywords": "Troubleshooting Building Project Issues Error - Could not load native library libcore using CPU architecture x64 Missing Microsoft Visual C++ Redistributable C:\\Users\\Vacla\\.nuget\\packages\\stride.core.assets.compilerapp\\4.1.0.1728\\buildTransitive\\Stride.Core.Assets.CompilerApp.targets(132,5): error MSB3073: The command \"\"C:\\Users\\Vacla\\.nuget\\packages\\stride.core.assets.compilerapp\\4.1.0.1728\\buildTransitive\\..\\tools\\net6.0-windows7.0\\Stride.Core.Assets.CompilerApp.exe\" --disable-auto- compile --project-configuration \"Debug\" --platform=Windows --project-configuration=Debug --compile-property:StrideGraphicsApi=Direct3D11 --output-path=\"C:\\Projects\\StrideDemo\\bin\\Debug\\net6.0\\data\" --build-path=\"C:\\Projects\\StrideDemo\\obj\\stride\\assetbuild\\data\" --package-file=\"C:\\Projects\\StrideDemo\\StrideDemo.csproj\" --msbuild-up todatecheck-filebase=\"C:\\Projects\\StrideDemo\\obj\\Debug\\net6.0\\stride\\assetcompiler-uptodatecheck\"\" exited with code -532462766. [C:\\Projects\\StrideDemo\\StrideDemo.csproj] Error - Unable to instantiate compiler Missing Microsoft Visual C++ Redistributable EXEC : error 6.206s: [AssetsCompiler.AttributeBasedRegistry] Unable to instantiate compiler [Stride.A ssets.Physics.ColliderShapeAsset, Stride.Assets, Version=4.1.0.1898, Culture=neutral, PublicKeyToken= null]. Exception: TargetInvocationException: Exception has been thrown by the target of an invocation . [C:\\Examples\\Example01\\Example01.csproj] ---> TypeInitializationException: The type initializer for 'Stride.Assets.Physics.ColliderShapeAss etCompiler' threw an exception. ---> InvalidOperationException: Could not load native library VHACD using CPU architecture x64. at Stride.Core.NativeLibraryHelper.PreloadLibrary(String libraryName, Type owner) in C:\\BuildAge nt\\work\\b5f46e3c4829a09e\\sources\\core\\Stride.Core\\Native\\NativeLibraryHelper.cs:line 156 at Stride.Assets.Physics.ColliderShapeAssetCompiler..cctor() in C:\\BuildAgent\\work\\b5f46e3c4829a 09e\\sources\\engine\\Stride.Assets\\Physics\\ColliderShapeAssetCompiler.cs:line 30 at Stride.Assets.Physics.ColliderShapeAssetCompiler..ctor() at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions) at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions) at Stride.Core.Assets.Compiler.AssetCompilerRegistry.ProcessAttribute(AssetCompilerAttribute com pilerCompilerAttribute, Type type) in C:\\BuildAgent\\work\\b5f46e3c4829a09e\\sources\\assets\\Stride.Cor e.Assets\\Compiler\\AssetCompilerRegistry.cs:line 161 at Stride.Core.Assets.Compiler.AssetCompilerRegistry.RegisterCompilersFromAssembly(Assembly asse mbly) in C:\\BuildAgent\\work\\b5f46e3c4829a09e\\sources\\assets\\Stride.Core.Assets\\Compiler\\AssetCompil erRegistry.cs:line 198 System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocati on."
  },
  "manual/whats-new.html": {
    "href": "manual/whats-new.html",
    "title": "What's new in docs? | Stride Manual",
    "keywords": "What's new in docs? Welcome to what's new in Stride Community Toolkit docs. Use this page to quickly find the latest changes. New articles All content. Updated articles No articles were updated at the moment."
  },
  "release-notes/index.html": {
    "href": "release-notes/index.html",
    "title": "Release Notes | Stride Community Toolkit",
    "keywords": "Release Notes Welcome to the Release Notes for the Stride Community Toolkit. This section aims to provide you with an organized, high-level summary of changes, enhancements, and fixes made in each version release. If you're looking to understand what has changed from one version to the next, you're in the right place. What to Expect The Stride Community Toolkit is developed with rapid iteration in mind. It moves at a faster development pace compared to the Stride Game Engine. As a result, you should expect frequent updates that may introduce breaking changes. This fast-paced approach allows us to incorporate community feedback quickly and continue improving the toolkit."
  },
  "release-notes/release-1.0.0.0-preview.11.html": {
    "href": "release-notes/release-1.0.0.0-preview.11.html",
    "title": "What's new in Stride Community Toolkit 1.0.0.0-preview.11 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0.0.0-preview.11 This article lists the most significant changes in Stride Community Toolkit preview 1.0.0.0-preview.11. What's Changed 💪 Other Changes Update 5 - Content improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/37 38 footer fix the name by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/40 chore: Stride NuGet bumped by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/41"
  },
  "release-notes/release-1.0.0.0-preview.12.html": {
    "href": "release-notes/release-1.0.0.0-preview.12.html",
    "title": "What's new in Stride Community Toolkit 1.0.0.0-preview.12 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0.0.0-preview.12 This article lists the most significant changes in Stride Community Toolkit preview 1.0.0.0-preview.12. What's Changed 💪 Other Changes docs: Getting Started updated by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/42 Content improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/43 Update 6 - Docs content updates by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/44 added new Eflag value to Raycast extensions by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/45 Update 6 - Docs improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/46 Add mesh builder with examples by @dotlogix in https://github.com/stride3d/stride-community-toolkit/pull/48 Merging refactoring and docs updates by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/49 New Contributors @dotlogix made their first contribution in https://github.com/stride3d/stride-community-toolkit/pull/48 Full Changelog: https://github.com/stride3d/stride-community-toolkit/compare/v1.0.0.0-preview.11...1.0.0.0-preview.12"
  },
  "release-notes/release-1.0.0.0-preview.13.html": {
    "href": "release-notes/release-1.0.0.0-preview.13.html",
    "title": "What's new in Stride Community Toolkit 1.0.0.0-preview.13 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0.0.0-preview.13 This article lists the most significant changes in Stride Community Toolkit preview 1.0.0.0-preview.13. What's Changed 💪 Other Changes Update 6 - Docs content updates by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/44 added new Eflag value to Raycast extensions by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/45 Update 6 - Docs improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/46 Add mesh builder with examples by @dotlogix in https://github.com/stride3d/stride-community-toolkit/pull/48 Merging refactoring and docs updates by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/49 New Contributors @dotlogix made their first contribution in https://github.com/stride3d/stride-community-toolkit/pull/48 Full Changelog: https://github.com/stride3d/stride-community-toolkit/compare/v1.0.0.0-preview.12...1.0.0.0-preview.13"
  },
  "release-notes/release-1.0.0.0-preview.14.html": {
    "href": "release-notes/release-1.0.0.0-preview.14.html",
    "title": "What's new in Stride Community Toolkit 1.0.0.0-preview.14 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0.0.0-preview.14 This article lists the most significant changes in Stride Community Toolkit preview 1.0.0.0-preview.14. What's Changed 💪 Other Changes ProceduralGeometry: More complex example and docs by @dotlogix in https://github.com/stride3d/stride-community-toolkit/pull/50 Update 7 by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/51 Udpate 8 - Moving MeshBuilder to manual section by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/52 Update 9 - Refactoring and docs improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/53 updated based on recommendations by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/55 New example added by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/58 Example game renamed by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/59 Update to Stride 4.2 by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/63 Get mesh data by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/62 feat: GitHub Actions updated by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/64 Full Changelog: https://github.com/stride3d/stride-community-toolkit/compare/v1.0.0.0-preview.13...1.0.0.0-preview.14"
  },
  "release-notes/release-1.0.0.0-preview.15.html": {
    "href": "release-notes/release-1.0.0.0-preview.15.html",
    "title": "What's new in Stride Community Toolkit 1.0.0.0-preview.15 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0.0.0-preview.15 This article lists the most significant changes in Stride Community Toolkit preview 1.0.0.0-preview.15. What's Changed ✨ Enhancement Toolkit refactoring and improvements, Gizmo added by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/78 📄 Documentation Update HeightmapExtensions.cs by @Idomeneas1970 in https://github.com/stride3d/stride-community-toolkit/pull/69 💪 Other Changes Create PickingExample by @Idomeneas1970 in https://github.com/stride3d/stride-community-toolkit/pull/66 [Examples] feat: Code improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/67 refactor: Code improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/68 Toolkit improvements and refactoring. by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/72 Minor refactoring by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/73 Update 10 - Docs and code improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/74"
  },
  "release-notes/release-1.0.0.0-preview.16.html": {
    "href": "release-notes/release-1.0.0.0-preview.16.html",
    "title": "What's new in Stride Community Toolkit 1.0.0.0-preview.16 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0.0.0-preview.16 This article lists the most significant changes in Stride Community Toolkit preview 1.0.0.0-preview.16. What's Changed 🎉 New Features Adding a helper class for simple image processing by @dotlogix in https://github.com/stride3d/stride-community-toolkit/pull/57 Toolkit 2D Improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/97 🔧 Engineering increase nexvyaml by @IXLLEGACYIXL in https://github.com/stride3d/stride-community-toolkit/pull/95 increase nexvyaml version by @IXLLEGACYIXL in https://github.com/stride3d/stride-community-toolkit/pull/100 [Refactoring] add module by @IXLLEGACYIXL in https://github.com/stride3d/stride-community-toolkit/pull/101 [Docs] Update README.md by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/102 📄 Documentation Update 14 - Example 7 docs added by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/92 Clean up and docs by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/94 🎓 Examples Update 13 - 2D scene setup and example added by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/90 Update 15 - 2D scene updates and refactorings by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/96 💪 Other Changes Update 11 - Docs improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/79 Modify entity extension by @IXLLEGACYIXL in https://github.com/stride3d/stride-community-toolkit/pull/81 Update 12 - Library improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/82 Image Processing Consistency Updates by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/83 Add example cube clicker by @IXLLEGACYIXL in https://github.com/stride3d/stride-community-toolkit/pull/84 Texture Extensions and reading the Source of an asset by @Idomeneas1970 in https://github.com/stride3d/stride-community-toolkit/pull/85 Example 7 refactoring by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/86 Add cube loading to cube clicker by @IXLLEGACYIXL in https://github.com/stride3d/stride-community-toolkit/pull/87 Example 7 refactoring 2 by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/88 Refactor: UIManager added by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/89 Add SetMaxFPS() by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/91 Add Debug Shapes from Profan by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/93 add new world to screenpoint by @IXLLEGACYIXL in https://github.com/stride3d/stride-community-toolkit/pull/98 Script System Extensions for writing async methods by @DockFrankenstein in https://github.com/stride3d/stride-community-toolkit/pull/99 New Contributors @DockFrankenstein made their first contribution in https://github.com/stride3d/stride-community-toolkit/pull/99 Full Changelog: https://github.com/stride3d/stride-community-toolkit/compare/v1.0.0.0-preview.15...1.0.0.0-preview.16-toolkit/pull/32"
  },
  "release-notes/release-1.0.0.0-preview.17.html": {
    "href": "release-notes/release-1.0.0.0-preview.17.html",
    "title": "What's new in Stride Community Toolkit 1.0.0.0-preview.17 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0.0.0-preview.17 This article lists the most significant changes in Stride Community Toolkit preview 1.0.0.0-preview.17. This release adds Bepu Physics integration, a new upcoming physics engine for Stride. Some of the new Bepu extensions are specific for code-only approach, while other can be used in the editor generated projects as well. What's Changed 🔧 Engineering Update 14 - Bepu updates and Skybox separated by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/106 ✨ Enhancement feat: Release.yml title updated by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/103 feat: GitHub Actions updated by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/104 📄 Docs fix: Docs improvements and link references fixes by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/105 Full Changelog: https://github.com/stride3d/stride-community-toolkit/compare/v1.0.0.0-preview.16...1.0.0.0-preview.17"
  },
  "release-notes/release-1.0.0.0-preview.20.html": {
    "href": "release-notes/release-1.0.0.0-preview.20.html",
    "title": "What's new in Stride Community Toolkit 1.0.0.0-preview.20 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0.0.0-preview.20 This article lists the most significant changes in Stride Community Toolkit preview 1.0.0.0-preview.20. This release adds Bepu Physics integration, a new upcoming physics engine for Stride. Some of the new Bepu extensions are specific for code-only approach, while other can be used in the editor generated projects as well. What's Changed 💥 Breaking Changes refactor: Bepu references corrected and other updates by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/116 🔧 Engineering Update 14 - Bepu updates and Skybox separated by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/106 fix: GetCamera() related updates by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/112 refactor: Cleaned up examples by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/113 ✨ Enhancement feat: Release.yml title updated by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/103 feat: GitHub Actions updated by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/104 📄 Docs fix: Docs improvements and link references fixes by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/105 chore: Releatese notes added by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/109 🔁 Build & Deploy fix: TAG_COMMIT flag added by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/110 fix: Adding Bepu packages references by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/111 Full Changelog: https://github.com/stride3d/stride-community-toolkit/compare/v1.0.0.0-preview.16...1.0.0.0-preview.20"
  },
  "release-notes/release-1.0.0.0-preview.6.html": {
    "href": "release-notes/release-1.0.0.0-preview.6.html",
    "title": "What's new in Stride Community Toolkit 1.0.0.0-preview.6 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0.0.0-preview.6 This article lists the most significant changes in Stride Community Toolkit preview 1.0.0.0-preview.6. What's Changed 💪 Other Changes Merge NexCoreExtensions into it by @IXLLEGACYIXL in https://github.com/stride3d/stride-community-toolkit/pull/18 Merged Doprez.Stride extensions by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/20 Add more extensions by @IXLLEGACYIXL in https://github.com/stride3d/stride-community-toolkit/pull/24 Fix RaySegment by @IXLLEGACYIXL in https://github.com/stride3d/stride-community-toolkit/pull/26 Added docs for Doprez.Stride extensions by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/29 completed basic MyraUI example by @Doprez in https://github.com/stride3d/stride-community-toolkit/pull/30 fix: Updating repo references to stride3d organisation by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/32 feat: GitHub Actions added by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/33 GitHub Actions updated by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/34 Update 3 - GitHub Action improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/35 New Contributors @IXLLEGACYIXL made their first contribution in https://github.com/stride3d/stride-community-toolkit/pull/18 @Doprez made their first contribution in https://github.com/stride3d/stride-community-toolkit/pull/20 @VaclavElias made their first contribution in https://github.com/stride3d/stride-community-toolkit/pull/32"
  },
  "release-notes/release-1.0.0.0-preview.7.html": {
    "href": "release-notes/release-1.0.0.0-preview.7.html",
    "title": "What's new in Stride Community Toolkit 1.0.0.0-preview.7 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0.0.0-preview.7 This article lists the most significant changes in Stride Community Toolkit preview 1.0.0.0-preview.7. What's Changed 💪 Other Changes Update 4 - Toolkit Improvements by @VaclavElias in https://github.com/stride3d/stride-community-toolkit/pull/36"
  },
  "release-notes/release-1.0.html": {
    "href": "release-notes/release-1.0.html",
    "title": "What's new in Stride Community Toolkit 1.0 | Stride Community Toolkit",
    "keywords": "What's new in Stride Community Toolkit 1.0 This article highlights the most significant changes in Stride Community Toolkit 1.0 with links to relevant documentation. This is just a placeholder for the release notes. The actual release notes will be generated when the release is published."
  },
  "tutorials/code-only/getting-started.html": {
    "href": "tutorials/code-only/getting-started.html",
    "title": "Get Started | Stride Tutorials",
    "keywords": "Get Started These tutorials cover the code only principles of using C# when working with the Stride game engine."
  },
  "tutorials/code-only/index.html": {
    "href": "tutorials/code-only/index.html",
    "title": "C# Code Only | Stride Tutorials",
    "keywords": "C# Code Only These tutorials cover the code only principles of using C# when working with the Stride game engine."
  },
  "tutorials/index.html": {
    "href": "tutorials/index.html",
    "title": "Stride Game Engine Tutorials | Stride Tutorials",
    "keywords": "Stride Game Engine Tutorials These pages contain tutorials to learn more about the Stride game engine 🎮. Stride Tutorials New to Stride? Start with these tutorials to get familiar with the basics of the engine and the Game Studio. 🛠️ Game Studio - The Stride engine comes with an editor called Game Studio, which is the central tool for game and application production in Stride. 🌱 C# Beginner - Covering the beginner principles of using C# when working with the Stride game engine. 📈 C# Intermediate - Diving into intermediate principles of C# programming in Stride, including UI, collisions, and more. Stride Community Toolkit Tutorials Note Under construction"
  }
}